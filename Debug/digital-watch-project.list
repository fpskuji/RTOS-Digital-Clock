
digital-watch-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  08008de4  08008de4  00009de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a0  080094a0  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  080094a0  080094a0  0000a4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094a8  080094a8  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094a8  080094a8  0000a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094ac  080094ac  0000a4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080094b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b070  2**0
                  CONTENTS
 10 .bss          00003258  20000070  20000070  0000b070  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200032c8  200032c8  0000b070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014554  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003817  00000000  00000000  0001f5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  00022e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001040  00000000  00000000  00024320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256d2  00000000  00000000  00025360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c7d  00000000  00000000  0004aa32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e125a  00000000  00000000  000626af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143909  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006160  00000000  00000000  0014394c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00149aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dcc 	.word	0x08008dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008dcc 	.word	0x08008dcc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f002 faed 	bl	8002b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f97f 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fa79 	bl	8000a64 <MX_GPIO_Init>
  MX_RTC_Init();
 8000572:	f000 f9db 	bl	800092c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000576:	f002 f9ea 	bl	800294e <LCD_Init>

//  Task 1
	xReturned = xTaskCreate(
 800057a:	4b80      	ldr	r3, [pc, #512]	@ (800077c <main+0x21c>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2304      	movs	r3, #4
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	4b7f      	ldr	r3, [pc, #508]	@ (8000780 <main+0x220>)
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	497f      	ldr	r1, [pc, #508]	@ (8000784 <main+0x224>)
 8000588:	487f      	ldr	r0, [pc, #508]	@ (8000788 <main+0x228>)
 800058a:	f005 f870 	bl	800566e <xTaskCreate>
 800058e:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			"redButtonHandler running...",		/* Parameter passed into the task. */
			BUTTON_PRIORITY,					/* Priority at which the task is created. */
			&redButtonHandle );					/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d103      	bne.n	800059e <main+0x3e>
		DEBUG_PRINT("redButtonHandler task created successfully\n");
 8000596:	487d      	ldr	r0, [pc, #500]	@ (800078c <main+0x22c>)
 8000598:	f007 fba2 	bl	8007ce0 <puts>
 800059c:	e002      	b.n	80005a4 <main+0x44>
	} else {
		DEBUG_PRINT("redButtonHandler task creation failed\n");
 800059e:	487c      	ldr	r0, [pc, #496]	@ (8000790 <main+0x230>)
 80005a0:	f007 fb9e 	bl	8007ce0 <puts>
	}

//  Task 2
	xReturned = xTaskCreate(
 80005a4:	4b7b      	ldr	r3, [pc, #492]	@ (8000794 <main+0x234>)
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	2304      	movs	r3, #4
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	4b7a      	ldr	r3, [pc, #488]	@ (8000798 <main+0x238>)
 80005ae:	2280      	movs	r2, #128	@ 0x80
 80005b0:	497a      	ldr	r1, [pc, #488]	@ (800079c <main+0x23c>)
 80005b2:	487b      	ldr	r0, [pc, #492]	@ (80007a0 <main+0x240>)
 80005b4:	f005 f85b 	bl	800566e <xTaskCreate>
 80005b8:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			"blueButtonHandler running...",		/* Parameter passed into the task. */
			BUTTON_PRIORITY,					/* Priority at which the task is created. */
			&blueButtonHandle );				/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d103      	bne.n	80005c8 <main+0x68>
	    DEBUG_PRINT("blueButtonHandler task created successfully\n");
 80005c0:	4878      	ldr	r0, [pc, #480]	@ (80007a4 <main+0x244>)
 80005c2:	f007 fb8d 	bl	8007ce0 <puts>
 80005c6:	e002      	b.n	80005ce <main+0x6e>
	} else {
	    DEBUG_PRINT("blueButtonHandler task creation failed\n");
 80005c8:	4877      	ldr	r0, [pc, #476]	@ (80007a8 <main+0x248>)
 80005ca:	f007 fb89 	bl	8007ce0 <puts>
	}

//  Task 3
	xReturned = xTaskCreate(
 80005ce:	4b77      	ldr	r3, [pc, #476]	@ (80007ac <main+0x24c>)
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2304      	movs	r3, #4
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4b76      	ldr	r3, [pc, #472]	@ (80007b0 <main+0x250>)
 80005d8:	2280      	movs	r2, #128	@ 0x80
 80005da:	4976      	ldr	r1, [pc, #472]	@ (80007b4 <main+0x254>)
 80005dc:	4876      	ldr	r0, [pc, #472]	@ (80007b8 <main+0x258>)
 80005de:	f005 f846 	bl	800566e <xTaskCreate>
 80005e2:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			"greenButtonHandler running...",	/* Parameter passed into the task. */
			BUTTON_PRIORITY,					/* Priority at which the task is created. */
			&greenButtonHandle );				/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d103      	bne.n	80005f2 <main+0x92>
		DEBUG_PRINT("greenButtonHandler task created successfully\n");
 80005ea:	4874      	ldr	r0, [pc, #464]	@ (80007bc <main+0x25c>)
 80005ec:	f007 fb78 	bl	8007ce0 <puts>
 80005f0:	e002      	b.n	80005f8 <main+0x98>
	} else {
		DEBUG_PRINT("greenButtonHandler task creation failed\n");
 80005f2:	4873      	ldr	r0, [pc, #460]	@ (80007c0 <main+0x260>)
 80005f4:	f007 fb74 	bl	8007ce0 <puts>
	}

//  Task 4
	xReturned = xTaskCreate(
 80005f8:	4b72      	ldr	r3, [pc, #456]	@ (80007c4 <main+0x264>)
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2304      	movs	r3, #4
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4b71      	ldr	r3, [pc, #452]	@ (80007c8 <main+0x268>)
 8000602:	2280      	movs	r2, #128	@ 0x80
 8000604:	4971      	ldr	r1, [pc, #452]	@ (80007cc <main+0x26c>)
 8000606:	4872      	ldr	r0, [pc, #456]	@ (80007d0 <main+0x270>)
 8000608:	f005 f831 	bl	800566e <xTaskCreate>
 800060c:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			"yellowButtonHandler running...",	/* Parameter passed into the task. */
			BUTTON_PRIORITY,					/* Priority at which the task is created. */
			&yellowButtonHandle );				/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d103      	bne.n	800061c <main+0xbc>
		DEBUG_PRINT("yellowButtonHandler task created successfully\n");
 8000614:	486f      	ldr	r0, [pc, #444]	@ (80007d4 <main+0x274>)
 8000616:	f007 fb63 	bl	8007ce0 <puts>
 800061a:	e002      	b.n	8000622 <main+0xc2>
	} else {
		DEBUG_PRINT("yellowButtonHandler task creation failed\n");
 800061c:	486e      	ldr	r0, [pc, #440]	@ (80007d8 <main+0x278>)
 800061e:	f007 fb5f 	bl	8007ce0 <puts>
	}

//  Task 5
	xReturned = xTaskCreate(
 8000622:	4b6e      	ldr	r3, [pc, #440]	@ (80007dc <main+0x27c>)
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	2280      	movs	r2, #128	@ 0x80
 800062e:	496c      	ldr	r1, [pc, #432]	@ (80007e0 <main+0x280>)
 8000630:	486c      	ldr	r0, [pc, #432]	@ (80007e4 <main+0x284>)
 8000632:	f005 f81c 	bl	800566e <xTaskCreate>
 8000636:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			NULL,								/* Parameter passed into the task. */
			LOW_PRIORITY_TASK,					/* Priority at which the task is created. */
			&displayTimeHandle);				/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d103      	bne.n	8000646 <main+0xe6>
		DEBUG_PRINT("display_time task created successfully\n");
 800063e:	486a      	ldr	r0, [pc, #424]	@ (80007e8 <main+0x288>)
 8000640:	f007 fb4e 	bl	8007ce0 <puts>
 8000644:	e002      	b.n	800064c <main+0xec>
	} else {
		DEBUG_PRINT("display_time task creation failed\n");
 8000646:	4869      	ldr	r0, [pc, #420]	@ (80007ec <main+0x28c>)
 8000648:	f007 fb4a 	bl	8007ce0 <puts>
	}

//  Task 6
	xReturned = xTaskCreate(
 800064c:	4b68      	ldr	r3, [pc, #416]	@ (80007f0 <main+0x290>)
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	2303      	movs	r3, #3
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	2280      	movs	r2, #128	@ 0x80
 8000658:	4966      	ldr	r1, [pc, #408]	@ (80007f4 <main+0x294>)
 800065a:	4867      	ldr	r0, [pc, #412]	@ (80007f8 <main+0x298>)
 800065c:	f005 f807 	bl	800566e <xTaskCreate>
 8000660:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			NULL,								/* Parameter passed into the task. */
			HIGH_PRIORITY_TASK,					/* Priority at which the task is created. */
			&changeFormatHandle);				/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d103      	bne.n	8000670 <main+0x110>
		DEBUG_PRINT("change_format task created successfully\n");
 8000668:	4864      	ldr	r0, [pc, #400]	@ (80007fc <main+0x29c>)
 800066a:	f007 fb39 	bl	8007ce0 <puts>
 800066e:	e002      	b.n	8000676 <main+0x116>
	} else {
		DEBUG_PRINT("change_format task creation failed\n");
 8000670:	4863      	ldr	r0, [pc, #396]	@ (8000800 <main+0x2a0>)
 8000672:	f007 fb35 	bl	8007ce0 <puts>
	}

//  Task 7
	xReturned = xTaskCreate(
 8000676:	4b63      	ldr	r3, [pc, #396]	@ (8000804 <main+0x2a4>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2303      	movs	r3, #3
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	2280      	movs	r2, #128	@ 0x80
 8000682:	4961      	ldr	r1, [pc, #388]	@ (8000808 <main+0x2a8>)
 8000684:	4861      	ldr	r0, [pc, #388]	@ (800080c <main+0x2ac>)
 8000686:	f004 fff2 	bl	800566e <xTaskCreate>
 800068a:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			NULL,								/* Parameter passed into the task. */
			HIGH_PRIORITY_TASK,					/* Priority at which the task is created. */
			&stopwatchHandle);					/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d103      	bne.n	800069a <main+0x13a>
		DEBUG_PRINT("stopwatch task created successfully\n");
 8000692:	485f      	ldr	r0, [pc, #380]	@ (8000810 <main+0x2b0>)
 8000694:	f007 fb24 	bl	8007ce0 <puts>
 8000698:	e002      	b.n	80006a0 <main+0x140>
	} else {
		DEBUG_PRINT("stopwatch task creation failed\n");
 800069a:	485e      	ldr	r0, [pc, #376]	@ (8000814 <main+0x2b4>)
 800069c:	f007 fb20 	bl	8007ce0 <puts>
	}

//  Task  8
	xReturned = xTaskCreate(
 80006a0:	4b5d      	ldr	r3, [pc, #372]	@ (8000818 <main+0x2b8>)
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2303      	movs	r3, #3
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2300      	movs	r3, #0
 80006aa:	2280      	movs	r2, #128	@ 0x80
 80006ac:	495b      	ldr	r1, [pc, #364]	@ (800081c <main+0x2bc>)
 80006ae:	485c      	ldr	r0, [pc, #368]	@ (8000820 <main+0x2c0>)
 80006b0:	f004 ffdd 	bl	800566e <xTaskCreate>
 80006b4:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			NULL,								/* Parameter passed into the task. */
			HIGH_PRIORITY_TASK,					/* Priority at which the task is created. */
			&adjustTimeHandle);					/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d103      	bne.n	80006c4 <main+0x164>
		DEBUG_PRINT("adjust time task created successfully\n");
 80006bc:	4859      	ldr	r0, [pc, #356]	@ (8000824 <main+0x2c4>)
 80006be:	f007 fb0f 	bl	8007ce0 <puts>
 80006c2:	e002      	b.n	80006ca <main+0x16a>
	} else {
		DEBUG_PRINT("adjust time task creation failed\n");
 80006c4:	4858      	ldr	r0, [pc, #352]	@ (8000828 <main+0x2c8>)
 80006c6:	f007 fb0b 	bl	8007ce0 <puts>
	}

//  Task 9
	xReturned = xTaskCreate(
 80006ca:	4b58      	ldr	r3, [pc, #352]	@ (800082c <main+0x2cc>)
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2302      	movs	r3, #2
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	4956      	ldr	r1, [pc, #344]	@ (8000830 <main+0x2d0>)
 80006d8:	4856      	ldr	r0, [pc, #344]	@ (8000834 <main+0x2d4>)
 80006da:	f004 ffc8 	bl	800566e <xTaskCreate>
 80006de:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			NULL,								/* Parameter passed into the task. */
			LOW_PRIORITY_TASK,					/* Priority at which the task is created. */
			&hourlyAlarmHandle);				/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d103      	bne.n	80006ee <main+0x18e>
		DEBUG_PRINT("hourlyAlarm task created successfully\n");
 80006e6:	4854      	ldr	r0, [pc, #336]	@ (8000838 <main+0x2d8>)
 80006e8:	f007 fafa 	bl	8007ce0 <puts>
 80006ec:	e002      	b.n	80006f4 <main+0x194>
	} else {
		DEBUG_PRINT("hourlyAlarm task creation failed\n");
 80006ee:	4853      	ldr	r0, [pc, #332]	@ (800083c <main+0x2dc>)
 80006f0:	f007 faf6 	bl	8007ce0 <puts>
	}

//  Task 10
	xReturned = xTaskCreate(
 80006f4:	4b52      	ldr	r3, [pc, #328]	@ (8000840 <main+0x2e0>)
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	2301      	movs	r3, #1
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	4950      	ldr	r1, [pc, #320]	@ (8000844 <main+0x2e4>)
 8000702:	4851      	ldr	r0, [pc, #324]	@ (8000848 <main+0x2e8>)
 8000704:	f004 ffb3 	bl	800566e <xTaskCreate>
 8000708:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			NULL,								/* Parameter passed into the task. */
			MINIMAL_PRIORITY_TASK,				/* Priority at which the task is created. */
			&blinkHandle);						/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d103      	bne.n	8000718 <main+0x1b8>
		DEBUG_PRINT("hourlyAlarm task created successfully\n");
 8000710:	4849      	ldr	r0, [pc, #292]	@ (8000838 <main+0x2d8>)
 8000712:	f007 fae5 	bl	8007ce0 <puts>
 8000716:	e002      	b.n	800071e <main+0x1be>
	} else {
		DEBUG_PRINT("hourlyAlarm task creation failed\n");
 8000718:	4848      	ldr	r0, [pc, #288]	@ (800083c <main+0x2dc>)
 800071a:	f007 fae1 	bl	8007ce0 <puts>
	}

//  Task 11
	xReturned = xTaskCreate(
 800071e:	4b4b      	ldr	r3, [pc, #300]	@ (800084c <main+0x2ec>)
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	2303      	movs	r3, #3
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	2280      	movs	r2, #128	@ 0x80
 800072a:	4949      	ldr	r1, [pc, #292]	@ (8000850 <main+0x2f0>)
 800072c:	4849      	ldr	r0, [pc, #292]	@ (8000854 <main+0x2f4>)
 800072e:	f004 ff9e 	bl	800566e <xTaskCreate>
 8000732:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			NULL,								/* Parameter passed into the task. */
			HIGH_PRIORITY_TASK,					/* Priority at which the task is created. */
			&alarmTaskHandle);					/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d103      	bne.n	8000742 <main+0x1e2>
		DEBUG_PRINT("Alarm task created successfully\n");
 800073a:	4847      	ldr	r0, [pc, #284]	@ (8000858 <main+0x2f8>)
 800073c:	f007 fad0 	bl	8007ce0 <puts>
 8000740:	e002      	b.n	8000748 <main+0x1e8>
	} else {
		DEBUG_PRINT("Alarm task creation failed\n");
 8000742:	4846      	ldr	r0, [pc, #280]	@ (800085c <main+0x2fc>)
 8000744:	f007 facc 	bl	8007ce0 <puts>
	}

//  Task 12
	xReturned = xTaskCreate(
 8000748:	4b45      	ldr	r3, [pc, #276]	@ (8000860 <main+0x300>)
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	2302      	movs	r3, #2
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2300      	movs	r3, #0
 8000752:	2280      	movs	r2, #128	@ 0x80
 8000754:	4943      	ldr	r1, [pc, #268]	@ (8000864 <main+0x304>)
 8000756:	4844      	ldr	r0, [pc, #272]	@ (8000868 <main+0x308>)
 8000758:	f004 ff89 	bl	800566e <xTaskCreate>
 800075c:	6078      	str	r0, [r7, #4]
			configMINIMAL_STACK_SIZE,			/* Stack size in words, not bytes. */
			NULL,								/* Parameter passed into the task. */
			LOW_PRIORITY_TASK,					/* Priority at which the task is created. */
			&snoozeTaskHandle);					/* Used to pass out the created task's handle. */

	if (xReturned == pdPASS) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d103      	bne.n	800076c <main+0x20c>
		DEBUG_PRINT("Alarm task created successfully\n");
 8000764:	483c      	ldr	r0, [pc, #240]	@ (8000858 <main+0x2f8>)
 8000766:	f007 fabb 	bl	8007ce0 <puts>
 800076a:	e002      	b.n	8000772 <main+0x212>
	} else {
		DEBUG_PRINT("Alarm task creation failed\n");
 800076c:	483b      	ldr	r0, [pc, #236]	@ (800085c <main+0x2fc>)
 800076e:	f007 fab7 	bl	8007ce0 <puts>
	}

	vTaskStartScheduler();
 8000772:	f005 f91f 	bl	80059b4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000776:	bf00      	nop
 8000778:	e7fd      	b.n	8000776 <main+0x216>
 800077a:	bf00      	nop
 800077c:	200000ac 	.word	0x200000ac
 8000780:	08008de4 	.word	0x08008de4
 8000784:	08008e00 	.word	0x08008e00
 8000788:	08000b51 	.word	0x08000b51
 800078c:	08008e14 	.word	0x08008e14
 8000790:	08008e40 	.word	0x08008e40
 8000794:	200000b0 	.word	0x200000b0
 8000798:	08008e68 	.word	0x08008e68
 800079c:	08008e88 	.word	0x08008e88
 80007a0:	08000b99 	.word	0x08000b99
 80007a4:	08008e9c 	.word	0x08008e9c
 80007a8:	08008ec8 	.word	0x08008ec8
 80007ac:	200000b4 	.word	0x200000b4
 80007b0:	08008ef0 	.word	0x08008ef0
 80007b4:	08008f10 	.word	0x08008f10
 80007b8:	08000db9 	.word	0x08000db9
 80007bc:	08008f24 	.word	0x08008f24
 80007c0:	08008f54 	.word	0x08008f54
 80007c4:	200000b8 	.word	0x200000b8
 80007c8:	08008f7c 	.word	0x08008f7c
 80007cc:	08008f9c 	.word	0x08008f9c
 80007d0:	08000eb9 	.word	0x08000eb9
 80007d4:	08008fb0 	.word	0x08008fb0
 80007d8:	08008fe0 	.word	0x08008fe0
 80007dc:	200000bc 	.word	0x200000bc
 80007e0:	0800900c 	.word	0x0800900c
 80007e4:	08001709 	.word	0x08001709
 80007e8:	0800901c 	.word	0x0800901c
 80007ec:	08009044 	.word	0x08009044
 80007f0:	200000c0 	.word	0x200000c0
 80007f4:	08009068 	.word	0x08009068
 80007f8:	08001add 	.word	0x08001add
 80007fc:	0800907c 	.word	0x0800907c
 8000800:	080090a4 	.word	0x080090a4
 8000804:	200000c4 	.word	0x200000c4
 8000808:	080090c8 	.word	0x080090c8
 800080c:	08001b21 	.word	0x08001b21
 8000810:	080090d8 	.word	0x080090d8
 8000814:	080090fc 	.word	0x080090fc
 8000818:	200000c8 	.word	0x200000c8
 800081c:	0800911c 	.word	0x0800911c
 8000820:	08002245 	.word	0x08002245
 8000824:	08009128 	.word	0x08009128
 8000828:	08009150 	.word	0x08009150
 800082c:	200000cc 	.word	0x200000cc
 8000830:	08009174 	.word	0x08009174
 8000834:	08001f89 	.word	0x08001f89
 8000838:	08009184 	.word	0x08009184
 800083c:	080091ac 	.word	0x080091ac
 8000840:	200000d8 	.word	0x200000d8
 8000844:	080091d0 	.word	0x080091d0
 8000848:	0800167d 	.word	0x0800167d
 800084c:	200000d0 	.word	0x200000d0
 8000850:	080091e0 	.word	0x080091e0
 8000854:	08001cc9 	.word	0x08001cc9
 8000858:	080091ec 	.word	0x080091ec
 800085c:	0800920c 	.word	0x0800920c
 8000860:	200000d4 	.word	0x200000d4
 8000864:	08009228 	.word	0x08009228
 8000868:	08002059 	.word	0x08002059

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b094      	sub	sp, #80	@ 0x50
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	2230      	movs	r2, #48	@ 0x30
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f007 fb30 	bl	8007ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <SystemClock_Config+0xb8>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	4a22      	ldr	r2, [pc, #136]	@ (8000924 <SystemClock_Config+0xb8>)
 800089a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089e:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a0:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <SystemClock_Config+0xb8>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <SystemClock_Config+0xbc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <SystemClock_Config+0xbc>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <SystemClock_Config+0xbc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008c8:	230a      	movs	r3, #10
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d0:	2310      	movs	r3, #16
 80008d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 fe17 	bl	8003514 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008ec:	f000 fbda 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f003 f87a 	bl	8003a04 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000916:	f000 fbc5 	bl	80010a4 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	@ 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b090      	sub	sp, #64	@ 0x40
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000932:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2228      	movs	r2, #40	@ 0x28
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f007 fac7 	bl	8007ee0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000952:	4b42      	ldr	r3, [pc, #264]	@ (8000a5c <MX_RTC_Init+0x130>)
 8000954:	4a42      	ldr	r2, [pc, #264]	@ (8000a60 <MX_RTC_Init+0x134>)
 8000956:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000958:	4b40      	ldr	r3, [pc, #256]	@ (8000a5c <MX_RTC_Init+0x130>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800095e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a5c <MX_RTC_Init+0x130>)
 8000960:	227f      	movs	r2, #127	@ 0x7f
 8000962:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000964:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <MX_RTC_Init+0x130>)
 8000966:	22ff      	movs	r2, #255	@ 0xff
 8000968:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800096a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a5c <MX_RTC_Init+0x130>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000970:	4b3a      	ldr	r3, [pc, #232]	@ (8000a5c <MX_RTC_Init+0x130>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000976:	4b39      	ldr	r3, [pc, #228]	@ (8000a5c <MX_RTC_Init+0x130>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800097c:	4837      	ldr	r0, [pc, #220]	@ (8000a5c <MX_RTC_Init+0x130>)
 800097e:	f003 fb21 	bl	8003fc4 <HAL_RTC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 fb8c 	bl	80010a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 16;
 800098c:	2310      	movs	r3, #16
 800098e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 59;
 8000992:	233b      	movs	r3, #59	@ 0x3b
 8000994:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 20;
 8000998:	2314      	movs	r3, #20
 800099a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800099e:	2300      	movs	r3, #0
 80009a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	482b      	ldr	r0, [pc, #172]	@ (8000a5c <MX_RTC_Init+0x130>)
 80009b0:	f003 fb8b 	bl	80040ca <HAL_RTC_SetTime>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80009ba:	f000 fb73 	bl	80010a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80009be:	2302      	movs	r3, #2
 80009c0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_SEPTEMBER;
 80009c4:	2309      	movs	r3, #9
 80009c6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 24;
 80009ca:	2318      	movs	r3, #24
 80009cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 24;
 80009d0:	2318      	movs	r3, #24
 80009d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	481f      	ldr	r0, [pc, #124]	@ (8000a5c <MX_RTC_Init+0x130>)
 80009e0:	f003 fc6b 	bl	80042ba <HAL_RTC_SetDate>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80009ea:	f000 fb5b 	bl	80010a4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000a06:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000a0a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <MX_RTC_Init+0x130>)
 8000a28:	f003 fd1a 	bl	8004460 <HAL_RTC_SetAlarm_IT>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000a32:	f000 fb37 	bl	80010a4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000a36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <MX_RTC_Init+0x130>)
 8000a44:	f003 fd0c 	bl	8004460 <HAL_RTC_SetAlarm_IT>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000a4e:	f000 fb29 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3740      	adds	r7, #64	@ 0x40
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000008c 	.word	0x2000008c
 8000a60:	40002800 	.word	0x40002800

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b31      	ldr	r3, [pc, #196]	@ (8000b44 <MX_GPIO_Init+0xe0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a30      	ldr	r2, [pc, #192]	@ (8000b44 <MX_GPIO_Init+0xe0>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b44 <MX_GPIO_Init+0xe0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <MX_GPIO_Init+0xe0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a29      	ldr	r2, [pc, #164]	@ (8000b44 <MX_GPIO_Init+0xe0>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b27      	ldr	r3, [pc, #156]	@ (8000b44 <MX_GPIO_Init+0xe0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|E_Pin|D4_Pin
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	217f      	movs	r1, #127	@ 0x7f
 8000ab6:	4824      	ldr	r0, [pc, #144]	@ (8000b48 <MX_GPIO_Init+0xe4>)
 8000ab8:	f002 fcd4 	bl	8003464 <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Anode_GPIO_Port, Anode_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2180      	movs	r1, #128	@ 0x80
 8000ac0:	4821      	ldr	r0, [pc, #132]	@ (8000b48 <MX_GPIO_Init+0xe4>)
 8000ac2:	f002 fccf 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	481c      	ldr	r0, [pc, #112]	@ (8000b4c <MX_GPIO_Init+0xe8>)
 8000adc:	f002 fb0e 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin E_Pin D4_Pin
                           D5_Pin D6_Pin D7_Pin Anode_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|E_Pin|D4_Pin
 8000ae0:	23ff      	movs	r3, #255	@ 0xff
 8000ae2:	60fb      	str	r3, [r7, #12]
                          |D5_Pin|D6_Pin|D7_Pin|Anode_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	4814      	ldr	r0, [pc, #80]	@ (8000b48 <MX_GPIO_Init+0xe4>)
 8000af8:	f002 fb00 	bl	80030fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2105      	movs	r1, #5
 8000b00:	2006      	movs	r0, #6
 8000b02:	f002 f93d 	bl	8002d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b06:	2006      	movs	r0, #6
 8000b08:	f002 f956 	bl	8002db8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2105      	movs	r1, #5
 8000b10:	2007      	movs	r0, #7
 8000b12:	f002 f935 	bl	8002d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b16:	2007      	movs	r0, #7
 8000b18:	f002 f94e 	bl	8002db8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2105      	movs	r1, #5
 8000b20:	2008      	movs	r0, #8
 8000b22:	f002 f92d 	bl	8002d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b26:	2008      	movs	r0, #8
 8000b28:	f002 f946 	bl	8002db8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2105      	movs	r1, #5
 8000b30:	2009      	movs	r0, #9
 8000b32:	f002 f925 	bl	8002d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b36:	2009      	movs	r0, #9
 8000b38:	f002 f93e 	bl	8002db8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020800 	.word	0x40020800

08000b50 <redButtonHandler>:

/* USER CODE BEGIN 4 */

void redButtonHandler (void *param)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
    while (true) {
    	DEBUG_PRINT("LOG - [Enter] [%s] (%s)\n", __func__, (char*)param);
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	490b      	ldr	r1, [pc, #44]	@ (8000b88 <redButtonHandler+0x38>)
 8000b5c:	480b      	ldr	r0, [pc, #44]	@ (8000b8c <redButtonHandler+0x3c>)
 8000b5e:	f007 f84f 	bl	8007c00 <iprintf>

    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000b62:	f04f 32ff 	mov.w	r2, #4294967295
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f005 fdab 	bl	80066c8 <ulTaskGenericNotifyTake>

    	HAL_GPIO_TogglePin(GPIOA, Anode_Pin);
 8000b72:	2180      	movs	r1, #128	@ 0x80
 8000b74:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <redButtonHandler+0x40>)
 8000b76:	f002 fc8e 	bl	8003496 <HAL_GPIO_TogglePin>

    	DEBUG_PRINT("LOG - [Exit ] [%s] (%s)\n\n", __func__, (char*)param);
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4902      	ldr	r1, [pc, #8]	@ (8000b88 <redButtonHandler+0x38>)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <redButtonHandler+0x44>)
 8000b80:	f007 f83e 	bl	8007c00 <iprintf>
    	DEBUG_PRINT("LOG - [Enter] [%s] (%s)\n", __func__, (char*)param);
 8000b84:	bf00      	nop
 8000b86:	e7e7      	b.n	8000b58 <redButtonHandler+0x8>
 8000b88:	08009404 	.word	0x08009404
 8000b8c:	08009234 	.word	0x08009234
 8000b90:	40020000 	.word	0x40020000
 8000b94:	08009250 	.word	0x08009250

08000b98 <blueButtonHandler>:

    vTaskDelete(NULL);
}

void blueButtonHandler (void *param)
{
 8000b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b9c:	b097      	sub	sp, #92	@ 0x5c
 8000b9e:	af02      	add	r7, sp, #8
 8000ba0:	6378      	str	r0, [r7, #52]	@ 0x34
	uint8_t notify_result;
	TickType_t delay_type = portMAX_DELAY;
 8000ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	while (true) {
    	DEBUG_PRINT("LOG - [Enter] [%s] (%s)\n", __func__, (char*)param);
 8000bae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bb0:	4977      	ldr	r1, [pc, #476]	@ (8000d90 <blueButtonHandler+0x1f8>)
 8000bb2:	4878      	ldr	r0, [pc, #480]	@ (8000d94 <blueButtonHandler+0x1fc>)
 8000bb4:	f007 f824 	bl	8007c00 <iprintf>

		while (true) {
			notify_result = ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(delay_type));
 8000bb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	1896      	adds	r6, r2, r2
 8000bc2:	60be      	str	r6, [r7, #8]
 8000bc4:	415b      	adcs	r3, r3
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bcc:	eb12 0800 	adds.w	r8, r2, r0
 8000bd0:	eb43 0901 	adc.w	r9, r3, r1
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000be0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000be4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000be8:	eb18 0602 	adds.w	r6, r8, r2
 8000bec:	623e      	str	r6, [r7, #32]
 8000bee:	eb49 0303 	adc.w	r3, r9, r3
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
 8000bf6:	181b      	adds	r3, r3, r0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfc:	414b      	adcs	r3, r1
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c0c:	f7ff fb30 	bl	8000270 <__aeabi_uldivmod>
 8000c10:	4602      	mov	r2, r0
 8000c12:	460b      	mov	r3, r1
 8000c14:	2101      	movs	r1, #1
 8000c16:	2000      	movs	r0, #0
 8000c18:	f005 fd56 	bl	80066c8 <ulTaskGenericNotifyTake>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

			uint32_t pressStartTime = xTaskGetTickCount();
 8000c22:	f005 f847 	bl	8005cb4 <xTaskGetTickCount>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	643b      	str	r3, [r7, #64]	@ 0x40

			// Wait for button release
			while (HAL_GPIO_ReadPin(GPIOC, RW_Pin) == GPIO_PIN_SET)
 8000c2e:	e007      	b.n	8000c40 <blueButtonHandler+0xa8>
			{
				// Delay to debounce
				vTaskDelay(TICK_DELAY_50_MS);
 8000c30:	f04f 0205 	mov.w	r2, #5
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f004 fe2c 	bl	8005898 <vTaskDelay>
			while (HAL_GPIO_ReadPin(GPIOC, RW_Pin) == GPIO_PIN_SET)
 8000c40:	2102      	movs	r1, #2
 8000c42:	4855      	ldr	r0, [pc, #340]	@ (8000d98 <blueButtonHandler+0x200>)
 8000c44:	f002 fbf6 	bl	8003434 <HAL_GPIO_ReadPin>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d0f0      	beq.n	8000c30 <blueButtonHandler+0x98>
			}

			// Calculate press duration
			uint32_t pressDuration = xTaskGetTickCount() - pressStartTime;
 8000c4e:	f005 f831 	bl	8005cb4 <xTaskGetTickCount>
 8000c52:	4602      	mov	r2, r0
 8000c54:	460b      	mov	r3, r1
 8000c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			if (pressDuration > pdMS_TO_TICKS(FUNCTION_DELAY)) {
 8000c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c5e:	2200      	movs	r2, #0
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000c64:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c68:	f04f 0100 	mov.w	r1, #0
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	1896      	adds	r6, r2, r2
 8000c72:	603e      	str	r6, [r7, #0]
 8000c74:	415b      	adcs	r3, r3
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c7c:	1814      	adds	r4, r2, r0
 8000c7e:	eb43 0501 	adc.w	r5, r3, r1
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	016b      	lsls	r3, r5, #5
 8000c8c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000c90:	0162      	lsls	r2, r4, #5
 8000c92:	eb14 0a02 	adds.w	sl, r4, r2
 8000c96:	eb45 0b03 	adc.w	fp, r5, r3
 8000c9a:	eb1a 0300 	adds.w	r3, sl, r0
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	eb4b 0301 	adc.w	r3, fp, r1
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000caa:	f04f 0300 	mov.w	r3, #0
 8000cae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cb2:	f7ff fadd 	bl	8000270 <__aeabi_uldivmod>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000cbc:	428a      	cmp	r2, r1
 8000cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000cc0:	418b      	sbcs	r3, r1
 8000cc2:	d20e      	bcs.n	8000ce2 <blueButtonHandler+0x14a>
				// Long press detected
				toggle_chime_function = ~toggle_chime_function;
 8000cc4:	4b35      	ldr	r3, [pc, #212]	@ (8000d9c <blueButtonHandler+0x204>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4a33      	ldr	r2, [pc, #204]	@ (8000d9c <blueButtonHandler+0x204>)
 8000cd0:	7013      	strb	r3, [r2, #0]
				taskENTER_CRITICAL();
 8000cd2:	f006 fb87 	bl	80073e4 <vPortEnterCritical>
				blue_ctr = 0;
 8000cd6:	4a32      	ldr	r2, [pc, #200]	@ (8000da0 <blueButtonHandler+0x208>)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	7013      	strb	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8000cdc:	f006 fb9c 	bl	8007418 <vPortExitCritical>
 8000ce0:	e76a      	b.n	8000bb8 <blueButtonHandler+0x20>

			} else {
				if (function_mode) {
 8000ce2:	4b30      	ldr	r3, [pc, #192]	@ (8000da4 <blueButtonHandler+0x20c>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d006      	beq.n	8000cfa <blueButtonHandler+0x162>
					delay_type = portMAX_DELAY;
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8000cf8:	e009      	b.n	8000d0e <blueButtonHandler+0x176>
				} else {
					if (notify_result == pdTRUE) {
 8000cfa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d111      	bne.n	8000d26 <blueButtonHandler+0x18e>
						delay_type = FUNCTION_DELAY;
 8000d02:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
					} else {
						break;
					}
				}
				taskENTER_CRITICAL();
 8000d0e:	f006 fb69 	bl	80073e4 <vPortEnterCritical>
				blue_ctr++;
 8000d12:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <blueButtonHandler+0x208>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4a20      	ldr	r2, [pc, #128]	@ (8000da0 <blueButtonHandler+0x208>)
 8000d1e:	7013      	strb	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8000d20:	f006 fb7a 	bl	8007418 <vPortExitCritical>
		while (true) {
 8000d24:	e748      	b.n	8000bb8 <blueButtonHandler+0x20>
						break;
 8000d26:	bf00      	nop
			}
		}

		switch (blue_ctr) {
 8000d28:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <blueButtonHandler+0x208>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d11a      	bne.n	8000d68 <blueButtonHandler+0x1d0>
			case 1:
				DEBUG_PRINT("changeFormatHandle Sent!\n");
 8000d32:	481d      	ldr	r0, [pc, #116]	@ (8000da8 <blueButtonHandler+0x210>)
 8000d34:	f006 ffd4 	bl	8007ce0 <puts>
				xTaskNotifyGive(changeFormatHandle);
 8000d38:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <blueButtonHandler+0x214>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2302      	movs	r3, #2
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	f005 fd2d 	bl	80067a4 <xTaskGenericNotify>
				vTaskDelay(TICK_DELAY_50_MS);
 8000d4a:	f04f 0205 	mov.w	r2, #5
 8000d4e:	f04f 0300 	mov.w	r3, #0
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	f004 fd9f 	bl	8005898 <vTaskDelay>
				delay_type = portMAX_DELAY;
 8000d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
				break;
 8000d66:	e00c      	b.n	8000d82 <blueButtonHandler+0x1ea>
			default:
				DEBUG_PRINT("No assigned function!\n");
 8000d68:	4811      	ldr	r0, [pc, #68]	@ (8000db0 <blueButtonHandler+0x218>)
 8000d6a:	f006 ffb9 	bl	8007ce0 <puts>
				blue_ctr = 0;
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000da0 <blueButtonHandler+0x208>)
 8000d70:	2300      	movs	r3, #0
 8000d72:	7013      	strb	r3, [r2, #0]
				delay_type = portMAX_DELAY;
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
				break;
 8000d80:	bf00      	nop
		}

    	DEBUG_PRINT("LOG - [Exit ] [%s] (%s)\n\n", __func__, (char*)param);
 8000d82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d84:	4902      	ldr	r1, [pc, #8]	@ (8000d90 <blueButtonHandler+0x1f8>)
 8000d86:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <blueButtonHandler+0x21c>)
 8000d88:	f006 ff3a 	bl	8007c00 <iprintf>
    	DEBUG_PRINT("LOG - [Enter] [%s] (%s)\n", __func__, (char*)param);
 8000d8c:	e70f      	b.n	8000bae <blueButtonHandler+0x16>
 8000d8e:	bf00      	nop
 8000d90:	08009418 	.word	0x08009418
 8000d94:	08009234 	.word	0x08009234
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	200000e0 	.word	0x200000e0
 8000da0:	200000dd 	.word	0x200000dd
 8000da4:	200000dc 	.word	0x200000dc
 8000da8:	0800926c 	.word	0x0800926c
 8000dac:	200000c0 	.word	0x200000c0
 8000db0:	08009288 	.word	0x08009288
 8000db4:	08009250 	.word	0x08009250

08000db8 <greenButtonHandler>:

    vTaskDelete(NULL);
}

void greenButtonHandler (void *param)
{
 8000db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dbc:	b089      	sub	sp, #36	@ 0x24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
	uint8_t notify_result;
	TickType_t delay_type = portMAX_DELAY;
 8000dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e9c7 2306 	strd	r2, r3, [r7, #24]

	while (true) {
    	DEBUG_PRINT("LOG - [Enter] [%s] (%s)\n", __func__, (char*)param);
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4933      	ldr	r1, [pc, #204]	@ (8000ea0 <greenButtonHandler+0xe8>)
 8000dd2:	4834      	ldr	r0, [pc, #208]	@ (8000ea4 <greenButtonHandler+0xec>)
 8000dd4:	f006 ff14 	bl	8007c00 <iprintf>

		while (true) {
			notify_result = ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(delay_type));
 8000dd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	1896      	adds	r6, r2, r2
 8000de2:	603e      	str	r6, [r7, #0]
 8000de4:	415b      	adcs	r3, r3
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dec:	1814      	adds	r4, r2, r0
 8000dee:	eb43 0501 	adc.w	r5, r3, r1
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	016b      	lsls	r3, r5, #5
 8000dfc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000e00:	0162      	lsls	r2, r4, #5
 8000e02:	eb14 0802 	adds.w	r8, r4, r2
 8000e06:	eb45 0903 	adc.w	r9, r5, r3
 8000e0a:	eb18 0a00 	adds.w	sl, r8, r0
 8000e0e:	eb49 0b01 	adc.w	fp, r9, r1
 8000e12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	4650      	mov	r0, sl
 8000e1c:	4659      	mov	r1, fp
 8000e1e:	f7ff fa27 	bl	8000270 <__aeabi_uldivmod>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	2101      	movs	r1, #1
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f005 fc4d 	bl	80066c8 <ulTaskGenericNotifyTake>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	75fb      	strb	r3, [r7, #23]

			if (function_mode) {
 8000e32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <greenButtonHandler+0xf0>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <greenButtonHandler+0x92>
				delay_type = portMAX_DELAY;
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000e48:	e008      	b.n	8000e5c <greenButtonHandler+0xa4>
			} else {
				if (notify_result == pdTRUE) {
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d111      	bne.n	8000e74 <greenButtonHandler+0xbc>
					delay_type = FUNCTION_DELAY;
 8000e50:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	e9c7 2306 	strd	r2, r3, [r7, #24]
				} else {
					break;
				}
			}
			taskENTER_CRITICAL();
 8000e5c:	f006 fac2 	bl	80073e4 <vPortEnterCritical>
			green_ctr++;
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <greenButtonHandler+0xf4>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <greenButtonHandler+0xf4>)
 8000e6c:	701a      	strb	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8000e6e:	f006 fad3 	bl	8007418 <vPortExitCritical>
			notify_result = ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(delay_type));
 8000e72:	e7b1      	b.n	8000dd8 <greenButtonHandler+0x20>
					break;
 8000e74:	bf00      	nop
		}

		switch (green_ctr) {
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <greenButtonHandler+0xf4>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
			default:
				DEBUG_PRINT("No assigned function!\n");
 8000e7a:	480d      	ldr	r0, [pc, #52]	@ (8000eb0 <greenButtonHandler+0xf8>)
 8000e7c:	f006 ff30 	bl	8007ce0 <puts>
				green_ctr = 0;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <greenButtonHandler+0xf4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
				delay_type = portMAX_DELAY;
 8000e86:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
				break;
 8000e92:	bf00      	nop
		}

    	DEBUG_PRINT("LOG - [Exit ] [%s] (%s)\n\n", __func__, (char*)param);
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4902      	ldr	r1, [pc, #8]	@ (8000ea0 <greenButtonHandler+0xe8>)
 8000e98:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <greenButtonHandler+0xfc>)
 8000e9a:	f006 feb1 	bl	8007c00 <iprintf>
    	DEBUG_PRINT("LOG - [Enter] [%s] (%s)\n", __func__, (char*)param);
 8000e9e:	e796      	b.n	8000dce <greenButtonHandler+0x16>
 8000ea0:	0800942c 	.word	0x0800942c
 8000ea4:	08009234 	.word	0x08009234
 8000ea8:	200000dc 	.word	0x200000dc
 8000eac:	200000de 	.word	0x200000de
 8000eb0:	08009288 	.word	0x08009288
 8000eb4:	08009250 	.word	0x08009250

08000eb8 <yellowButtonHandler>:

    vTaskDelete(NULL);
}

void yellowButtonHandler (void *param)
{
 8000eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ebc:	b08b      	sub	sp, #44	@ 0x2c
 8000ebe:	af02      	add	r7, sp, #8
 8000ec0:	60f8      	str	r0, [r7, #12]
	uint8_t notify_result;
	TickType_t delay_type = portMAX_DELAY;
 8000ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e9c7 2306 	strd	r2, r3, [r7, #24]

	while (true) {
    	DEBUG_PRINT("LOG - [Enter] [%s] (%s)\n", __func__, (char*)param);
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4961      	ldr	r1, [pc, #388]	@ (8001058 <yellowButtonHandler+0x1a0>)
 8000ed2:	4862      	ldr	r0, [pc, #392]	@ (800105c <yellowButtonHandler+0x1a4>)
 8000ed4:	f006 fe94 	bl	8007c00 <iprintf>

		while (true) {
			notify_result = ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(delay_type));
 8000ed8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	1896      	adds	r6, r2, r2
 8000ee2:	603e      	str	r6, [r7, #0]
 8000ee4:	415b      	adcs	r3, r3
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eec:	1814      	adds	r4, r2, r0
 8000eee:	eb43 0501 	adc.w	r5, r3, r1
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	016b      	lsls	r3, r5, #5
 8000efc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000f00:	0162      	lsls	r2, r4, #5
 8000f02:	eb14 0802 	adds.w	r8, r4, r2
 8000f06:	eb45 0903 	adc.w	r9, r5, r3
 8000f0a:	eb18 0a00 	adds.w	sl, r8, r0
 8000f0e:	eb49 0b01 	adc.w	fp, r9, r1
 8000f12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	4650      	mov	r0, sl
 8000f1c:	4659      	mov	r1, fp
 8000f1e:	f7ff f9a7 	bl	8000270 <__aeabi_uldivmod>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	2101      	movs	r1, #1
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f005 fbcd 	bl	80066c8 <ulTaskGenericNotifyTake>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	75fb      	strb	r3, [r7, #23]

			if (function_mode) {
 8000f32:	4b4b      	ldr	r3, [pc, #300]	@ (8001060 <yellowButtonHandler+0x1a8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <yellowButtonHandler+0x92>
				delay_type = portMAX_DELAY;
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000f48:	e008      	b.n	8000f5c <yellowButtonHandler+0xa4>
			} else {
				if (notify_result == pdTRUE) {
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d111      	bne.n	8000f74 <yellowButtonHandler+0xbc>
					delay_type = FUNCTION_DELAY;
 8000f50:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 2306 	strd	r2, r3, [r7, #24]
				} else {
					break;
				}
			}
			taskENTER_CRITICAL();
 8000f5c:	f006 fa42 	bl	80073e4 <vPortEnterCritical>
			yellow_ctr++;
 8000f60:	4b40      	ldr	r3, [pc, #256]	@ (8001064 <yellowButtonHandler+0x1ac>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001064 <yellowButtonHandler+0x1ac>)
 8000f6c:	701a      	strb	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8000f6e:	f006 fa53 	bl	8007418 <vPortExitCritical>
			notify_result = ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(delay_type));
 8000f72:	e7b1      	b.n	8000ed8 <yellowButtonHandler+0x20>
					break;
 8000f74:	bf00      	nop
		}

		switch (yellow_ctr) {
 8000f76:	4b3b      	ldr	r3, [pc, #236]	@ (8001064 <yellowButtonHandler+0x1ac>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d03c      	beq.n	8000ffa <yellowButtonHandler+0x142>
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	dc55      	bgt.n	8001030 <yellowButtonHandler+0x178>
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d002      	beq.n	8000f8e <yellowButtonHandler+0xd6>
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d01b      	beq.n	8000fc4 <yellowButtonHandler+0x10c>
 8000f8c:	e050      	b.n	8001030 <yellowButtonHandler+0x178>
			case 1:
				DEBUG_PRINT("Sent!\n");
 8000f8e:	4836      	ldr	r0, [pc, #216]	@ (8001068 <yellowButtonHandler+0x1b0>)
 8000f90:	f006 fea6 	bl	8007ce0 <puts>
				xTaskNotifyGive(alarmTaskHandle);
 8000f94:	4b35      	ldr	r3, [pc, #212]	@ (800106c <yellowButtonHandler+0x1b4>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f005 fbff 	bl	80067a4 <xTaskGenericNotify>
				vTaskDelay(TICK_DELAY_50_MS);
 8000fa6:	f04f 0205 	mov.w	r2, #5
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f004 fc71 	bl	8005898 <vTaskDelay>
				delay_type = portMAX_DELAY;
 8000fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
				break;
 8000fc2:	e042      	b.n	800104a <yellowButtonHandler+0x192>
			case 2:
				DEBUG_PRINT("Sent!\n");
 8000fc4:	4828      	ldr	r0, [pc, #160]	@ (8001068 <yellowButtonHandler+0x1b0>)
 8000fc6:	f006 fe8b 	bl	8007ce0 <puts>
				xTaskNotifyGive(stopwatchHandle);
 8000fca:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <yellowButtonHandler+0x1b8>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f005 fbe4 	bl	80067a4 <xTaskGenericNotify>
				vTaskDelay(TICK_DELAY_50_MS);
 8000fdc:	f04f 0205 	mov.w	r2, #5
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f004 fc56 	bl	8005898 <vTaskDelay>
				delay_type = portMAX_DELAY;
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff4:	e9c7 2306 	strd	r2, r3, [r7, #24]
				break;
 8000ff8:	e027      	b.n	800104a <yellowButtonHandler+0x192>
			case 3:
				DEBUG_PRINT("Sent!\n");
 8000ffa:	481b      	ldr	r0, [pc, #108]	@ (8001068 <yellowButtonHandler+0x1b0>)
 8000ffc:	f006 fe70 	bl	8007ce0 <puts>
				xTaskNotifyGive(adjustTimeHandle);
 8001000:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <yellowButtonHandler+0x1bc>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	2300      	movs	r3, #0
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	f005 fbc9 	bl	80067a4 <xTaskGenericNotify>
				vTaskDelay(TICK_DELAY_50_MS);
 8001012:	f04f 0205 	mov.w	r2, #5
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f004 fc3b 	bl	8005898 <vTaskDelay>
				delay_type = portMAX_DELAY;
 8001022:	f04f 32ff 	mov.w	r2, #4294967295
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e9c7 2306 	strd	r2, r3, [r7, #24]
				break;
 800102e:	e00c      	b.n	800104a <yellowButtonHandler+0x192>
			default:
				DEBUG_PRINT("No assigned function!\n");
 8001030:	4811      	ldr	r0, [pc, #68]	@ (8001078 <yellowButtonHandler+0x1c0>)
 8001032:	f006 fe55 	bl	8007ce0 <puts>
				yellow_ctr = 0;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <yellowButtonHandler+0x1ac>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
				delay_type = portMAX_DELAY;
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	e9c7 2306 	strd	r2, r3, [r7, #24]
				break;
 8001048:	bf00      	nop
		}

    	DEBUG_PRINT("LOG - [Exit ] [%s] (%s)\n\n", __func__, (char*)param);
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4902      	ldr	r1, [pc, #8]	@ (8001058 <yellowButtonHandler+0x1a0>)
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <yellowButtonHandler+0x1c4>)
 8001050:	f006 fdd6 	bl	8007c00 <iprintf>
    	DEBUG_PRINT("LOG - [Enter] [%s] (%s)\n", __func__, (char*)param);
 8001054:	e73b      	b.n	8000ece <yellowButtonHandler+0x16>
 8001056:	bf00      	nop
 8001058:	08009440 	.word	0x08009440
 800105c:	08009234 	.word	0x08009234
 8001060:	200000dc 	.word	0x200000dc
 8001064:	200000df 	.word	0x200000df
 8001068:	080092a0 	.word	0x080092a0
 800106c:	200000d0 	.word	0x200000d0
 8001070:	200000c4 	.word	0x200000c4
 8001074:	200000c8 	.word	0x200000c8
 8001078:	08009288 	.word	0x08009288
 800107c:	08009250 	.word	0x08009250

08001080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001092:	f001 fd79 	bl	8002b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40001000 	.word	0x40001000

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <HAL_MspInit+0x58>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <HAL_MspInit+0x58>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <HAL_MspInit+0x58>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_MspInit+0x58>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <HAL_MspInit+0x58>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <HAL_MspInit+0x58>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2004      	movs	r0, #4
 80010f4:	f001 fe44 	bl	8002d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80010f8:	2004      	movs	r0, #4
 80010fa:	f001 fe5d 	bl	8002db8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <HAL_RTC_MspInit+0x5c>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d119      	bne.n	8001160 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800112c:	2302      	movs	r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001130:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001134:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fe60 	bl	8003e00 <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001146:	f7ff ffad 	bl	80010a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_RTC_MspInit+0x60>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2105      	movs	r1, #5
 8001154:	2029      	movs	r0, #41	@ 0x29
 8001156:	f001 fe13 	bl	8002d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800115a:	2029      	movs	r0, #41	@ 0x29
 800115c:	f001 fe2c 	bl	8002db8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001160:	bf00      	nop
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40002800 	.word	0x40002800
 800116c:	42470e3c 	.word	0x42470e3c

08001170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08e      	sub	sp, #56	@ 0x38
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4b33      	ldr	r3, [pc, #204]	@ (8001254 <HAL_InitTick+0xe4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	4a32      	ldr	r2, [pc, #200]	@ (8001254 <HAL_InitTick+0xe4>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001190:	4b30      	ldr	r3, [pc, #192]	@ (8001254 <HAL_InitTick+0xe4>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fdf8 	bl	8003d9c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d103      	bne.n	80011be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b6:	f002 fddd 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 80011ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011be:	f002 fdd9 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 80011c2:	4603      	mov	r3, r0
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ca:	4a23      	ldr	r2, [pc, #140]	@ (8001258 <HAL_InitTick+0xe8>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	3b01      	subs	r3, #1
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <HAL_InitTick+0xec>)
 80011d8:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <HAL_InitTick+0xf0>)
 80011da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <HAL_InitTick+0xec>)
 80011de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011e4:	4a1d      	ldr	r2, [pc, #116]	@ (800125c <HAL_InitTick+0xec>)
 80011e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <HAL_InitTick+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <HAL_InitTick+0xec>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_InitTick+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011fc:	4817      	ldr	r0, [pc, #92]	@ (800125c <HAL_InitTick+0xec>)
 80011fe:	f003 fb8b 	bl	8004918 <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001208:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800120c:	2b00      	cmp	r3, #0
 800120e:	d11b      	bne.n	8001248 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001210:	4812      	ldr	r0, [pc, #72]	@ (800125c <HAL_InitTick+0xec>)
 8001212:	f003 fbdb 	bl	80049cc <HAL_TIM_Base_Start_IT>
 8001216:	4603      	mov	r3, r0
 8001218:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800121c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001220:	2b00      	cmp	r3, #0
 8001222:	d111      	bne.n	8001248 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001224:	2036      	movs	r0, #54	@ 0x36
 8001226:	f001 fdc7 	bl	8002db8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d808      	bhi.n	8001242 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	2036      	movs	r0, #54	@ 0x36
 8001236:	f001 fda3 	bl	8002d80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <HAL_InitTick+0xf4>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e002      	b.n	8001248 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001248:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800124c:	4618      	mov	r0, r3
 800124e:	3738      	adds	r7, #56	@ 0x38
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	431bde83 	.word	0x431bde83
 800125c:	200000e4 	.word	0x200000e4
 8001260:	40001000 	.word	0x40001000
 8001264:	20000004 	.word	0x20000004

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80012a2:	f001 fd97 	bl	8002dd4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint32_t currentTime = xTaskGetTickCountFromISR();
 80012b2:	f004 fd15 	bl	8005ce0 <xTaskGetTickCountFromISR>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4613      	mov	r3, r2
 80012bc:	607b      	str	r3, [r7, #4]

	if ((currentTime - lastInterruptTime) > pdMS_TO_TICKS(DEBOUNCE_DELAY)) {
 80012be:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <EXTI0_IRQHandler+0x5c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b4b      	cmp	r3, #75	@ 0x4b
 80012c8:	d916      	bls.n	80012f8 <EXTI0_IRQHandler+0x4c>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]

		lastInterruptTime = currentTime;
 80012ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <EXTI0_IRQHandler+0x5c>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6013      	str	r3, [r2, #0]
		vTaskNotifyGiveFromISR(redButtonHandle, &xHigherPriorityTaskWoken);
 80012d4:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <EXTI0_IRQHandler+0x60>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	463a      	mov	r2, r7
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f005 fb2b 	bl	8006938 <vTaskGenericNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <EXTI0_IRQHandler+0x4c>
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <EXTI0_IRQHandler+0x64>)
 80012ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	f3bf 8f4f 	dsb	sy
 80012f4:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f002 f8e7 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000012c 	.word	0x2000012c
 800130c:	200000ac 	.word	0x200000ac
 8001310:	e000ed04 	.word	0xe000ed04

08001314 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	uint32_t currentTime = xTaskGetTickCountFromISR();
 800131a:	f004 fce1 	bl	8005ce0 <xTaskGetTickCountFromISR>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4613      	mov	r3, r2
 8001324:	607b      	str	r3, [r7, #4]

	if ((currentTime - lastInterruptTime) > pdMS_TO_TICKS(DEBOUNCE_DELAY)) {
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <EXTI1_IRQHandler+0x5c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b4b      	cmp	r3, #75	@ 0x4b
 8001330:	d916      	bls.n	8001360 <EXTI1_IRQHandler+0x4c>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]

		lastInterruptTime = currentTime;
 8001336:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <EXTI1_IRQHandler+0x5c>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6013      	str	r3, [r2, #0]
		vTaskNotifyGiveFromISR(blueButtonHandle, &xHigherPriorityTaskWoken);
 800133c:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <EXTI1_IRQHandler+0x60>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	463a      	mov	r2, r7
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f005 faf7 	bl	8006938 <vTaskGenericNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <EXTI1_IRQHandler+0x4c>
 8001350:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <EXTI1_IRQHandler+0x64>)
 8001352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	f3bf 8f4f 	dsb	sy
 800135c:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001360:	2002      	movs	r0, #2
 8001362:	f002 f8b3 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000012c 	.word	0x2000012c
 8001374:	200000b0 	.word	0x200000b0
 8001378:	e000ed04 	.word	0xe000ed04

0800137c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	uint32_t currentTime = xTaskGetTickCountFromISR();
 8001382:	f004 fcad 	bl	8005ce0 <xTaskGetTickCountFromISR>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4613      	mov	r3, r2
 800138c:	607b      	str	r3, [r7, #4]

	if ((currentTime - lastInterruptTime) > pdMS_TO_TICKS(DEBOUNCE_DELAY)) {
 800138e:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <EXTI2_IRQHandler+0x5c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b4b      	cmp	r3, #75	@ 0x4b
 8001398:	d916      	bls.n	80013c8 <EXTI2_IRQHandler+0x4c>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]

		lastInterruptTime = currentTime;
 800139e:	4a0e      	ldr	r2, [pc, #56]	@ (80013d8 <EXTI2_IRQHandler+0x5c>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6013      	str	r3, [r2, #0]
		vTaskNotifyGiveFromISR(greenButtonHandle, &xHigherPriorityTaskWoken);
 80013a4:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <EXTI2_IRQHandler+0x60>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	463a      	mov	r2, r7
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 fac3 	bl	8006938 <vTaskGenericNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d007      	beq.n	80013c8 <EXTI2_IRQHandler+0x4c>
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <EXTI2_IRQHandler+0x64>)
 80013ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	f3bf 8f4f 	dsb	sy
 80013c4:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80013c8:	2004      	movs	r0, #4
 80013ca:	f002 f87f 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000012c 	.word	0x2000012c
 80013dc:	200000b4 	.word	0x200000b4
 80013e0:	e000ed04 	.word	0xe000ed04

080013e4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	uint32_t currentTime = xTaskGetTickCountFromISR();
 80013ea:	f004 fc79 	bl	8005ce0 <xTaskGetTickCountFromISR>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4613      	mov	r3, r2
 80013f4:	607b      	str	r3, [r7, #4]

	printf("[%lu===%lu]\n", (currentTime - lastInterruptTime), pdMS_TO_TICKS(DEBOUNCE_DELAY));
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <EXTI3_IRQHandler+0x70>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	1ad1      	subs	r1, r2, r3
 80013fe:	f04f 024b 	mov.w	r2, #75	@ 0x4b
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	4814      	ldr	r0, [pc, #80]	@ (8001458 <EXTI3_IRQHandler+0x74>)
 8001408:	f006 fbfa 	bl	8007c00 <iprintf>

	if ((currentTime - lastInterruptTime) > pdMS_TO_TICKS(DEBOUNCE_DELAY)) {
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <EXTI3_IRQHandler+0x70>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b4b      	cmp	r3, #75	@ 0x4b
 8001416:	d916      	bls.n	8001446 <EXTI3_IRQHandler+0x62>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]

		lastInterruptTime = currentTime;
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <EXTI3_IRQHandler+0x70>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
		vTaskNotifyGiveFromISR(yellowButtonHandle, &xHigherPriorityTaskWoken);
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <EXTI3_IRQHandler+0x78>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	463a      	mov	r2, r7
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f005 fa84 	bl	8006938 <vTaskGenericNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <EXTI3_IRQHandler+0x62>
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <EXTI3_IRQHandler+0x7c>)
 8001438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f3bf 8f4f 	dsb	sy
 8001442:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001446:	2008      	movs	r0, #8
 8001448:	f002 f840 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000012c 	.word	0x2000012c
 8001458:	080092a8 	.word	0x080092a8
 800145c:	200000b8 	.word	0x200000b8
 8001460:	e000ed04 	.word	0xe000ed04

08001464 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

	if (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF)) {
 800146a:	4b27      	ldr	r3, [pc, #156]	@ (8001508 <RTC_Alarm_IRQHandler+0xa4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01c      	beq.n	80014b2 <RTC_Alarm_IRQHandler+0x4e>
		// Alarm A triggered
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
		vTaskNotifyGiveFromISR(snoozeTaskHandle, &xHigherPriorityTaskWoken);
 800147c:	4b23      	ldr	r3, [pc, #140]	@ (800150c <RTC_Alarm_IRQHandler+0xa8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	1d3a      	adds	r2, r7, #4
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f005 fa57 	bl	8006938 <vTaskGenericNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <RTC_Alarm_IRQHandler+0x3c>
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <RTC_Alarm_IRQHandler+0xac>)
 8001492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f3bf 8f4f 	dsb	sy
 800149c:	f3bf 8f6f 	isb	sy
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <RTC_Alarm_IRQHandler+0xa4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <RTC_Alarm_IRQHandler+0xa4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80014b0:	60da      	str	r2, [r3, #12]
	}

	if (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF)) {
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <RTC_Alarm_IRQHandler+0xa4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01c      	beq.n	80014fa <RTC_Alarm_IRQHandler+0x96>
		// Alarm B triggered
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
		vTaskNotifyGiveFromISR(hourlyAlarmHandle, &xHigherPriorityTaskWoken);
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <RTC_Alarm_IRQHandler+0xb0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	463a      	mov	r2, r7
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f005 fa33 	bl	8006938 <vTaskGenericNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <RTC_Alarm_IRQHandler+0x84>
 80014d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <RTC_Alarm_IRQHandler+0xac>)
 80014da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f3bf 8f4f 	dsb	sy
 80014e4:	f3bf 8f6f 	isb	sy
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <RTC_Alarm_IRQHandler+0xa4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <RTC_Alarm_IRQHandler+0xa4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80014f8:	60da      	str	r2, [r3, #12]
	}

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80014fa:	4803      	ldr	r0, [pc, #12]	@ (8001508 <RTC_Alarm_IRQHandler+0xa4>)
 80014fc:	f003 f8f4 	bl	80046e8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000008c 	.word	0x2000008c
 800150c:	200000d4 	.word	0x200000d4
 8001510:	e000ed04 	.word	0xe000ed04
 8001514:	200000cc 	.word	0x200000cc

08001518 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <TIM6_DAC_IRQHandler+0x10>)
 800151e:	f003 fac5 	bl	8004aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000e4 	.word	0x200000e4

0800152c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001536:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <ITM_SendChar+0x48>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0e      	ldr	r2, [pc, #56]	@ (8001574 <ITM_SendChar+0x48>)
 800153c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001540:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001542:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <ITM_SendChar+0x4c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a0c      	ldr	r2, [pc, #48]	@ (8001578 <ITM_SendChar+0x4c>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800154e:	bf00      	nop
 8001550:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f8      	beq.n	8001550 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800155e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	6013      	str	r3, [r2, #0]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000edfc 	.word	0xe000edfc
 8001578:	e0000e00 	.word	0xe0000e00

0800157c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e00a      	b.n	80015a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158e:	f3af 8000 	nop.w
 8001592:	4601      	mov	r1, r0
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	60ba      	str	r2, [r7, #8]
 800159a:	b2ca      	uxtb	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dbf0      	blt.n	800158e <_read+0x12>
  }

  return len;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e009      	b.n	80015dc <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	60ba      	str	r2, [r7, #8]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ffab 	bl	800152c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbf1      	blt.n	80015c8 <_write+0x12>
  }
  return len;
 80015e4:	687b      	ldr	r3, [r7, #4]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_close>:

int _close(int file)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001616:	605a      	str	r2, [r3, #4]
  return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_isatty>:

int _isatty(int file)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <SystemInit+0x20>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001662:	4a05      	ldr	r2, [pc, #20]	@ (8001678 <SystemInit+0x20>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <blinkBacklight>:
static void alarmInit (void);
static void setAlarm (uint8_t hours, uint8_t minutes);
static uint8_t getDaysInMonth (uint8_t month, uint8_t year);

void blinkBacklight (void *param)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    (void)param;
    while (true) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	2101      	movs	r1, #1
 800168e:	2000      	movs	r0, #0
 8001690:	f005 f81a 	bl	80066c8 <ulTaskGenericNotifyTake>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001694:	2180      	movs	r1, #128	@ 0x80
 8001696:	481b      	ldr	r0, [pc, #108]	@ (8001704 <blinkBacklight+0x88>)
 8001698:	f001 fefd 	bl	8003496 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(SHORT_TIME_DELAY));
 800169c:	f04f 0028 	mov.w	r0, #40	@ 0x28
 80016a0:	f04f 0100 	mov.w	r1, #0
 80016a4:	f004 f8f8 	bl	8005898 <vTaskDelay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80016a8:	2180      	movs	r1, #128	@ 0x80
 80016aa:	4816      	ldr	r0, [pc, #88]	@ (8001704 <blinkBacklight+0x88>)
 80016ac:	f001 fef3 	bl	8003496 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(SHORT_TIME_DELAY));
 80016b0:	f04f 0028 	mov.w	r0, #40	@ 0x28
 80016b4:	f04f 0100 	mov.w	r1, #0
 80016b8:	f004 f8ee 	bl	8005898 <vTaskDelay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80016bc:	2180      	movs	r1, #128	@ 0x80
 80016be:	4811      	ldr	r0, [pc, #68]	@ (8001704 <blinkBacklight+0x88>)
 80016c0:	f001 fee9 	bl	8003496 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(SHORT_TIME_DELAY));
 80016c4:	f04f 0028 	mov.w	r0, #40	@ 0x28
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	f004 f8e4 	bl	8005898 <vTaskDelay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80016d0:	2180      	movs	r1, #128	@ 0x80
 80016d2:	480c      	ldr	r0, [pc, #48]	@ (8001704 <blinkBacklight+0x88>)
 80016d4:	f001 fedf 	bl	8003496 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(SHORT_TIME_DELAY));
 80016d8:	f04f 0028 	mov.w	r0, #40	@ 0x28
 80016dc:	f04f 0100 	mov.w	r1, #0
 80016e0:	f004 f8da 	bl	8005898 <vTaskDelay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80016e4:	2180      	movs	r1, #128	@ 0x80
 80016e6:	4807      	ldr	r0, [pc, #28]	@ (8001704 <blinkBacklight+0x88>)
 80016e8:	f001 fed5 	bl	8003496 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(SHORT_TIME_DELAY));
 80016ec:	f04f 0028 	mov.w	r0, #40	@ 0x28
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	f004 f8d0 	bl	8005898 <vTaskDelay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80016f8:	2180      	movs	r1, #128	@ 0x80
 80016fa:	4802      	ldr	r0, [pc, #8]	@ (8001704 <blinkBacklight+0x88>)
 80016fc:	f001 fecb 	bl	8003496 <HAL_GPIO_TogglePin>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001700:	bf00      	nop
 8001702:	e7bf      	b.n	8001684 <blinkBacklight+0x8>
 8001704:	40020000 	.word	0x40020000

08001708 <displayTimeTask>:
    }
}

void displayTimeTask (void *param)
{
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	b092      	sub	sp, #72	@ 0x48
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    (void)param;
    RTC_TimeTypeDef gTime = {0};
 8001710:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef gDate = {0};
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char temp[TEMP_SIZE] = {0};
 8001724:	4bda      	ldr	r3, [pc, #872]	@ (8001a90 <displayTimeTask+0x388>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	853b      	strh	r3, [r7, #40]	@ 0x28
 800172a:	2300      	movs	r3, #0
 800172c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    char tempWeekDay[TEMP_DAY_SIZE] = {0};
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t meridiem = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const char weekDay[MAX_WEEKDAY][TEMP_DAY_SIZE] = {"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"};
 800173a:	4bd6      	ldr	r3, [pc, #856]	@ (8001a94 <displayTimeTask+0x38c>)
 800173c:	f107 0408 	add.w	r4, r7, #8
 8001740:	461d      	mov	r5, r3
 8001742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800174a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    while (true) {
        HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800174e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001752:	2200      	movs	r2, #0
 8001754:	4619      	mov	r1, r3
 8001756:	48d0      	ldr	r0, [pc, #832]	@ (8001a98 <displayTimeTask+0x390>)
 8001758:	f002 fd51 	bl	80041fe <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800175c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001760:	2200      	movs	r2, #0
 8001762:	4619      	mov	r1, r3
 8001764:	48cc      	ldr	r0, [pc, #816]	@ (8001a98 <displayTimeTask+0x390>)
 8001766:	f002 fe2c 	bl	80043c2 <HAL_RTC_GetDate>
        meridiem = (gTime.Hours >= 12U) ? 1U : 0U;
 800176a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800176e:	2b0b      	cmp	r3, #11
 8001770:	d901      	bls.n	8001776 <displayTimeTask+0x6e>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <displayTimeTask+0x70>
 8001776:	2300      	movs	r3, #0
 8001778:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        LCD_Send_Command(CUR_BEGIN_UPPER_SECOND);
 800177c:	2081      	movs	r0, #129	@ 0x81
 800177e:	f001 f989 	bl	8002a94 <LCD_Send_Command>
        (void)sprintf(temp, "%02d", (gDate.Date % MAX_TEMP_VAL));
 8001782:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001786:	4ac5      	ldr	r2, [pc, #788]	@ (8001a9c <displayTimeTask+0x394>)
 8001788:	fba2 1203 	umull	r1, r2, r2, r3
 800178c:	0952      	lsrs	r2, r2, #5
 800178e:	2164      	movs	r1, #100	@ 0x64
 8001790:	fb01 f202 	mul.w	r2, r1, r2
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800179e:	49c0      	ldr	r1, [pc, #768]	@ (8001aa0 <displayTimeTask+0x398>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f006 faa5 	bl	8007cf0 <siprintf>
        LCD_Send_Data_Upper(temp[0]);
 80017a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 f98e 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("%c", temp[0]);
 80017b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017b4:	4618      	mov	r0, r3
 80017b6:	f006 fa35 	bl	8007c24 <putchar>
        LCD_Send_Data_Upper(temp[1]);
 80017ba:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 f984 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("%c", temp[1]);
 80017c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80017c8:	4618      	mov	r0, r3
 80017ca:	f006 fa2b 	bl	8007c24 <putchar>
        LCD_Send_Data_Upper('/');
 80017ce:	202f      	movs	r0, #47	@ 0x2f
 80017d0:	f001 f97c 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("/");
 80017d4:	202f      	movs	r0, #47	@ 0x2f
 80017d6:	f006 fa25 	bl	8007c24 <putchar>
        (void)sprintf(temp, "%02d", (gDate.Month % MAX_TEMP_VAL));
 80017da:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017de:	4aaf      	ldr	r2, [pc, #700]	@ (8001a9c <displayTimeTask+0x394>)
 80017e0:	fba2 1203 	umull	r1, r2, r2, r3
 80017e4:	0952      	lsrs	r2, r2, #5
 80017e6:	2164      	movs	r1, #100	@ 0x64
 80017e8:	fb01 f202 	mul.w	r2, r1, r2
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017f6:	49aa      	ldr	r1, [pc, #680]	@ (8001aa0 <displayTimeTask+0x398>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f006 fa79 	bl	8007cf0 <siprintf>
        LCD_Send_Data_Upper(temp[0]);
 80017fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001802:	4618      	mov	r0, r3
 8001804:	f001 f962 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("%c", temp[0]);
 8001808:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800180c:	4618      	mov	r0, r3
 800180e:	f006 fa09 	bl	8007c24 <putchar>
        LCD_Send_Data_Upper(temp[1]);
 8001812:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001816:	4618      	mov	r0, r3
 8001818:	f001 f958 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("%c", temp[1]);
 800181c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001820:	4618      	mov	r0, r3
 8001822:	f006 f9ff 	bl	8007c24 <putchar>
        LCD_Send_Data_Upper('/');
 8001826:	202f      	movs	r0, #47	@ 0x2f
 8001828:	f001 f950 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("/");
 800182c:	202f      	movs	r0, #47	@ 0x2f
 800182e:	f006 f9f9 	bl	8007c24 <putchar>
        (void)sprintf(temp, "%02d", (gDate.Year % MAX_TEMP_VAL));
 8001832:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001836:	4a99      	ldr	r2, [pc, #612]	@ (8001a9c <displayTimeTask+0x394>)
 8001838:	fba2 1203 	umull	r1, r2, r2, r3
 800183c:	0952      	lsrs	r2, r2, #5
 800183e:	2164      	movs	r1, #100	@ 0x64
 8001840:	fb01 f202 	mul.w	r2, r1, r2
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	b2db      	uxtb	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800184e:	4994      	ldr	r1, [pc, #592]	@ (8001aa0 <displayTimeTask+0x398>)
 8001850:	4618      	mov	r0, r3
 8001852:	f006 fa4d 	bl	8007cf0 <siprintf>
        LCD_Send_Data_Upper('2');
 8001856:	2032      	movs	r0, #50	@ 0x32
 8001858:	f001 f938 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("2");
 800185c:	2032      	movs	r0, #50	@ 0x32
 800185e:	f006 f9e1 	bl	8007c24 <putchar>
        LCD_Send_Data_Upper('0');
 8001862:	2030      	movs	r0, #48	@ 0x30
 8001864:	f001 f932 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("0");
 8001868:	2030      	movs	r0, #48	@ 0x30
 800186a:	f006 f9db 	bl	8007c24 <putchar>
        LCD_Send_Data_Upper(temp[0]);
 800186e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001872:	4618      	mov	r0, r3
 8001874:	f001 f92a 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("%c", temp[0]);
 8001878:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800187c:	4618      	mov	r0, r3
 800187e:	f006 f9d1 	bl	8007c24 <putchar>
        LCD_Send_Data_Upper(temp[1]);
 8001882:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001886:	4618      	mov	r0, r3
 8001888:	f001 f920 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("%c", temp[1]);
 800188c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001890:	4618      	mov	r0, r3
 8001892:	f006 f9c7 	bl	8007c24 <putchar>
        LCD_Send_Data(EMPTY);
 8001896:	2020      	movs	r0, #32
 8001898:	f001 f90a 	bl	8002ab0 <LCD_Send_Data>
        LCD_Send_Data(EMPTY);
 800189c:	2020      	movs	r0, #32
 800189e:	f001 f907 	bl	8002ab0 <LCD_Send_Data>
        DEBUG_PRINT("%c", EMPTY);
 80018a2:	2020      	movs	r0, #32
 80018a4:	f006 f9be 	bl	8007c24 <putchar>
		(void)sprintf(tempWeekDay, "%s", weekDay[(gDate.WeekDay - 1)]);
 80018a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018ac:	3b01      	subs	r3, #1
 80018ae:	f107 0208 	add.w	r2, r7, #8
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	441a      	add	r2, r3
 80018b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ba:	497a      	ldr	r1, [pc, #488]	@ (8001aa4 <displayTimeTask+0x39c>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f006 fa17 	bl	8007cf0 <siprintf>
        LCD_Send_Data_Upper(tempWeekDay[0]);
 80018c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 f900 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("%c", tempWeekDay[0]);
 80018cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018d0:	4618      	mov	r0, r3
 80018d2:	f006 f9a7 	bl	8007c24 <putchar>
        LCD_Send_Data_Upper(tempWeekDay[1]);
 80018d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 f8f6 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("%c", tempWeekDay[1]);
 80018e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018e4:	4618      	mov	r0, r3
 80018e6:	f006 f99d 	bl	8007c24 <putchar>
        LCD_Send_Data_Upper(tempWeekDay[2]);
 80018ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 f8ec 	bl	8002acc <LCD_Send_Data_Upper>
        DEBUG_PRINT("%c", tempWeekDay[2]);
 80018f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018f8:	4618      	mov	r0, r3
 80018fa:	f006 f993 	bl	8007c24 <putchar>
        DEBUG_PRINT("\n");
 80018fe:	200a      	movs	r0, #10
 8001900:	f006 f990 	bl	8007c24 <putchar>

        if (time_format != 0U) {
 8001904:	4b68      	ldr	r3, [pc, #416]	@ (8001aa8 <displayTimeTask+0x3a0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <displayTimeTask+0x22c>
            (void)sprintf(temp, "%02d", (gTime.Hours % 12U));
 800190c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001910:	4b66      	ldr	r3, [pc, #408]	@ (8001aac <displayTimeTask+0x3a4>)
 8001912:	fba3 1302 	umull	r1, r3, r3, r2
 8001916:	08d9      	lsrs	r1, r3, #3
 8001918:	460b      	mov	r3, r1
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	440b      	add	r3, r1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192a:	495d      	ldr	r1, [pc, #372]	@ (8001aa0 <displayTimeTask+0x398>)
 800192c:	4618      	mov	r0, r3
 800192e:	f006 f9df 	bl	8007cf0 <siprintf>
 8001932:	e011      	b.n	8001958 <displayTimeTask+0x250>
        } else {
            (void)sprintf(temp, "%02d", (gTime.Hours % MAX_TEMP_VAL));
 8001934:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001938:	4a58      	ldr	r2, [pc, #352]	@ (8001a9c <displayTimeTask+0x394>)
 800193a:	fba2 1203 	umull	r1, r2, r2, r3
 800193e:	0952      	lsrs	r2, r2, #5
 8001940:	2164      	movs	r1, #100	@ 0x64
 8001942:	fb01 f202 	mul.w	r2, r1, r2
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001950:	4953      	ldr	r1, [pc, #332]	@ (8001aa0 <displayTimeTask+0x398>)
 8001952:	4618      	mov	r0, r3
 8001954:	f006 f9cc 	bl	8007cf0 <siprintf>
        }

        LCD_Send_Data_Lower(temp[0]);
 8001958:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800195c:	4618      	mov	r0, r3
 800195e:	f001 f8d3 	bl	8002b08 <LCD_Send_Data_Lower>
        DEBUG_PRINT("%c", temp[0]);
 8001962:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001966:	4618      	mov	r0, r3
 8001968:	f006 f95c 	bl	8007c24 <putchar>
        LCD_Send_Data_Lower(temp[1]);
 800196c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001970:	4618      	mov	r0, r3
 8001972:	f001 f8c9 	bl	8002b08 <LCD_Send_Data_Lower>
        DEBUG_PRINT("%c", temp[1]);
 8001976:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800197a:	4618      	mov	r0, r3
 800197c:	f006 f952 	bl	8007c24 <putchar>
        LCD_Send_Data_Lower(':');
 8001980:	203a      	movs	r0, #58	@ 0x3a
 8001982:	f001 f8c1 	bl	8002b08 <LCD_Send_Data_Lower>
        DEBUG_PRINT(":");
 8001986:	203a      	movs	r0, #58	@ 0x3a
 8001988:	f006 f94c 	bl	8007c24 <putchar>
        (void)sprintf(temp, "%02d", (gTime.Minutes % MAX_TEMP_VAL));
 800198c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001990:	4a42      	ldr	r2, [pc, #264]	@ (8001a9c <displayTimeTask+0x394>)
 8001992:	fba2 1203 	umull	r1, r2, r2, r3
 8001996:	0952      	lsrs	r2, r2, #5
 8001998:	2164      	movs	r1, #100	@ 0x64
 800199a:	fb01 f202 	mul.w	r2, r1, r2
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019a8:	493d      	ldr	r1, [pc, #244]	@ (8001aa0 <displayTimeTask+0x398>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 f9a0 	bl	8007cf0 <siprintf>
        LCD_Send_Data_Lower(temp[0]);
 80019b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 f8a7 	bl	8002b08 <LCD_Send_Data_Lower>
        DEBUG_PRINT("%c", temp[0]);
 80019ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019be:	4618      	mov	r0, r3
 80019c0:	f006 f930 	bl	8007c24 <putchar>
        LCD_Send_Data_Lower(temp[1]);
 80019c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 f89d 	bl	8002b08 <LCD_Send_Data_Lower>
        DEBUG_PRINT("%c", temp[1]);
 80019ce:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019d2:	4618      	mov	r0, r3
 80019d4:	f006 f926 	bl	8007c24 <putchar>
        LCD_Send_Data_Lower(':');
 80019d8:	203a      	movs	r0, #58	@ 0x3a
 80019da:	f001 f895 	bl	8002b08 <LCD_Send_Data_Lower>
        DEBUG_PRINT(":");
 80019de:	203a      	movs	r0, #58	@ 0x3a
 80019e0:	f006 f920 	bl	8007c24 <putchar>
        (void)sprintf(temp, "%02d", (gTime.Seconds % MAX_TEMP_VAL));
 80019e4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80019e8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a9c <displayTimeTask+0x394>)
 80019ea:	fba2 1203 	umull	r1, r2, r2, r3
 80019ee:	0952      	lsrs	r2, r2, #5
 80019f0:	2164      	movs	r1, #100	@ 0x64
 80019f2:	fb01 f202 	mul.w	r2, r1, r2
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a00:	4927      	ldr	r1, [pc, #156]	@ (8001aa0 <displayTimeTask+0x398>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 f974 	bl	8007cf0 <siprintf>
        LCD_Send_Data_Lower(temp[0]);
 8001a08:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 f87b 	bl	8002b08 <LCD_Send_Data_Lower>
        DEBUG_PRINT("%c", temp[0]);
 8001a12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 f904 	bl	8007c24 <putchar>
        LCD_Send_Data_Lower(temp[1]);
 8001a1c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 f871 	bl	8002b08 <LCD_Send_Data_Lower>
        DEBUG_PRINT("%c", temp[1]);
 8001a26:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f006 f8fa 	bl	8007c24 <putchar>

        if (time_format != 0U) {
 8001a30:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <displayTimeTask+0x3a0>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01c      	beq.n	8001a72 <displayTimeTask+0x36a>
            LCD_Send_Data_Lower(EMPTY);
 8001a38:	2020      	movs	r0, #32
 8001a3a:	f001 f865 	bl	8002b08 <LCD_Send_Data_Lower>
            DEBUG_PRINT(" ");
 8001a3e:	2020      	movs	r0, #32
 8001a40:	f006 f8f0 	bl	8007c24 <putchar>
            if (meridiem == 0U) {
 8001a44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <displayTimeTask+0x352>
                LCD_Send_Data_Lower('A');
 8001a4c:	2041      	movs	r0, #65	@ 0x41
 8001a4e:	f001 f85b 	bl	8002b08 <LCD_Send_Data_Lower>
                DEBUG_PRINT("A");
 8001a52:	2041      	movs	r0, #65	@ 0x41
 8001a54:	f006 f8e6 	bl	8007c24 <putchar>
 8001a58:	e005      	b.n	8001a66 <displayTimeTask+0x35e>
            } else {
                LCD_Send_Data_Lower('P');
 8001a5a:	2050      	movs	r0, #80	@ 0x50
 8001a5c:	f001 f854 	bl	8002b08 <LCD_Send_Data_Lower>
                DEBUG_PRINT("P");
 8001a60:	2050      	movs	r0, #80	@ 0x50
 8001a62:	f006 f8df 	bl	8007c24 <putchar>
            }
            LCD_Send_Data_Lower('M');
 8001a66:	204d      	movs	r0, #77	@ 0x4d
 8001a68:	f001 f84e 	bl	8002b08 <LCD_Send_Data_Lower>
            DEBUG_PRINT("M");
 8001a6c:	204d      	movs	r0, #77	@ 0x4d
 8001a6e:	f006 f8d9 	bl	8007c24 <putchar>
        }

        if (toggle_chime_function != 0U) {
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <displayTimeTask+0x3a8>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01b      	beq.n	8001ab4 <displayTimeTask+0x3ac>
			LCD_Send_Command(CUR_BEGIN_LOWER_SIXTEEN);
 8001a7c:	20cf      	movs	r0, #207	@ 0xcf
 8001a7e:	f001 f809 	bl	8002a94 <LCD_Send_Command>
			LCD_Send_Data(BELL_ASCII);
 8001a82:	2007      	movs	r0, #7
 8001a84:	f001 f814 	bl	8002ab0 <LCD_Send_Data>
			DEBUG_PRINT("%c", BELL_ASCII);
 8001a88:	2007      	movs	r0, #7
 8001a8a:	f006 f8cb 	bl	8007c24 <putchar>
 8001a8e:	e01a      	b.n	8001ac6 <displayTimeTask+0x3be>
 8001a90:	080092c4 	.word	0x080092c4
 8001a94:	080092c8 	.word	0x080092c8
 8001a98:	2000008c 	.word	0x2000008c
 8001a9c:	51eb851f 	.word	0x51eb851f
 8001aa0:	080092b8 	.word	0x080092b8
 8001aa4:	080092c0 	.word	0x080092c0
 8001aa8:	20000130 	.word	0x20000130
 8001aac:	aaaaaaab 	.word	0xaaaaaaab
 8001ab0:	200000e0 	.word	0x200000e0
		} else {
			LCD_Send_Command(CUR_BEGIN_LOWER_SIXTEEN);
 8001ab4:	20cf      	movs	r0, #207	@ 0xcf
 8001ab6:	f000 ffed 	bl	8002a94 <LCD_Send_Command>
			LCD_Send_Data(EMPTY);
 8001aba:	2020      	movs	r0, #32
 8001abc:	f000 fff8 	bl	8002ab0 <LCD_Send_Data>
			DEBUG_PRINT("%c", EMPTY);
 8001ac0:	2020      	movs	r0, #32
 8001ac2:	f006 f8af 	bl	8007c24 <putchar>
		}

        DEBUG_PRINT("\n");
 8001ac6:	200a      	movs	r0, #10
 8001ac8:	f006 f8ac 	bl	8007c24 <putchar>
        vTaskDelay(pdMS_TO_TICKS(TIME_DELAY)/10);
 8001acc:	f04f 000a 	mov.w	r0, #10
 8001ad0:	f04f 0100 	mov.w	r1, #0
 8001ad4:	f003 fee0 	bl	8005898 <vTaskDelay>
        HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001ad8:	e639      	b.n	800174e <displayTimeTask+0x46>
 8001ada:	bf00      	nop

08001adc <changeFormatTask>:
//        vTaskDelay(pdMS_TO_TICKS(TIME_DELAY));
    }
}

void changeFormatTask (void *param)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    (void)param;
    while (true) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	2101      	movs	r1, #1
 8001aee:	2000      	movs	r0, #0
 8001af0:	f004 fdea 	bl	80066c8 <ulTaskGenericNotifyTake>
        taskENTER_CRITICAL();
 8001af4:	f005 fc76 	bl	80073e4 <vPortEnterCritical>
        enterFunctionMode();
 8001af8:	f000 fdfc 	bl	80026f4 <enterFunctionMode>
        time_format = (uint8_t)(~time_format);
 8001afc:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <changeFormatTask+0x40>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <changeFormatTask+0x40>)
 8001b06:	701a      	strb	r2, [r3, #0]
        exitFunctionMode();
 8001b08:	f000 fe10 	bl	800272c <exitFunctionMode>
        taskEXIT_CRITICAL();
 8001b0c:	f005 fc84 	bl	8007418 <vPortExitCritical>
        LCD_Send_Command(CLEAR_DISPLAY);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f000 ffbf 	bl	8002a94 <LCD_Send_Command>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001b16:	bf00      	nop
 8001b18:	e7e4      	b.n	8001ae4 <changeFormatTask+0x8>
 8001b1a:	bf00      	nop
 8001b1c:	20000130 	.word	0x20000130

08001b20 <stopwatchTask>:
    }
}

void stopwatchTask (void *param)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    (void)param;
    uint8_t prev_green = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
    char temp[TEMP_SIZE] = {0};
 8001b2c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca4 <stopwatchTask+0x184>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	813b      	strh	r3, [r7, #8]
 8001b32:	2300      	movs	r3, #0
 8001b34:	72bb      	strb	r3, [r7, #10]
    uint8_t seconds = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73bb      	strb	r3, [r7, #14]
    uint8_t minutes = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	737b      	strb	r3, [r7, #13]
    uint8_t hours = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	733b      	strb	r3, [r7, #12]

    while (true) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001b42:	f04f 32ff 	mov.w	r2, #4294967295
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f004 fdbb 	bl	80066c8 <ulTaskGenericNotifyTake>
        DEBUG_PRINT("You are in stopwatch mode!\n");
 8001b52:	4855      	ldr	r0, [pc, #340]	@ (8001ca8 <stopwatchTask+0x188>)
 8001b54:	f006 f8c4 	bl	8007ce0 <puts>
        enterFunctionMode();
 8001b58:	f000 fdcc 	bl	80026f4 <enterFunctionMode>
        prev_green = green_ctr;
 8001b5c:	4b53      	ldr	r3, [pc, #332]	@ (8001cac <stopwatchTask+0x18c>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	73fb      	strb	r3, [r7, #15]
        stopwatchInit();
 8001b62:	f000 fdff 	bl	8002764 <stopwatchInit>

        while (true) {
            if (yellow_ctr > 0U) {
 8001b66:	4b52      	ldr	r3, [pc, #328]	@ (8001cb0 <stopwatchTask+0x190>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f040 8094 	bne.w	8001c9a <stopwatchTask+0x17a>
                break;
            }

            if (green_ctr == prev_green) {
 8001b72:	4b4e      	ldr	r3, [pc, #312]	@ (8001cac <stopwatchTask+0x18c>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d175      	bne.n	8001c6a <stopwatchTask+0x14a>
                if ((blue_ctr % 2U) != 0U) {
 8001b7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb4 <stopwatchTask+0x194>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d078      	beq.n	8001c80 <stopwatchTask+0x160>
                    /* start stopwatch */
                    LCD_Send_Command(CUR_BEGIN_LOWER_SECOND);
 8001b8e:	20c1      	movs	r0, #193	@ 0xc1
 8001b90:	f000 ff80 	bl	8002a94 <LCD_Send_Command>
                    (void)sprintf(temp, "%02d", (hours % MAX_TEMP_VAL));
 8001b94:	7b3b      	ldrb	r3, [r7, #12]
 8001b96:	4a48      	ldr	r2, [pc, #288]	@ (8001cb8 <stopwatchTask+0x198>)
 8001b98:	fba2 1203 	umull	r1, r2, r2, r3
 8001b9c:	0952      	lsrs	r2, r2, #5
 8001b9e:	2164      	movs	r1, #100	@ 0x64
 8001ba0:	fb01 f202 	mul.w	r2, r1, r2
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	4943      	ldr	r1, [pc, #268]	@ (8001cbc <stopwatchTask+0x19c>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f006 f89d 	bl	8007cf0 <siprintf>
                    LCD_Send_Data_Lower(temp[0]);
 8001bb6:	7a3b      	ldrb	r3, [r7, #8]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 ffa5 	bl	8002b08 <LCD_Send_Data_Lower>
                    LCD_Send_Data_Lower(temp[1]);
 8001bbe:	7a7b      	ldrb	r3, [r7, #9]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 ffa1 	bl	8002b08 <LCD_Send_Data_Lower>
                    LCD_Send_Data_Lower(':');
 8001bc6:	203a      	movs	r0, #58	@ 0x3a
 8001bc8:	f000 ff9e 	bl	8002b08 <LCD_Send_Data_Lower>
                    (void)sprintf(temp, "%02d", (minutes % MAX_TEMP_VAL));
 8001bcc:	7b7b      	ldrb	r3, [r7, #13]
 8001bce:	4a3a      	ldr	r2, [pc, #232]	@ (8001cb8 <stopwatchTask+0x198>)
 8001bd0:	fba2 1203 	umull	r1, r2, r2, r3
 8001bd4:	0952      	lsrs	r2, r2, #5
 8001bd6:	2164      	movs	r1, #100	@ 0x64
 8001bd8:	fb01 f202 	mul.w	r2, r1, r2
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	4935      	ldr	r1, [pc, #212]	@ (8001cbc <stopwatchTask+0x19c>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f006 f881 	bl	8007cf0 <siprintf>
                    LCD_Send_Data_Lower(temp[0]);
 8001bee:	7a3b      	ldrb	r3, [r7, #8]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 ff89 	bl	8002b08 <LCD_Send_Data_Lower>
                    LCD_Send_Data_Lower(temp[1]);
 8001bf6:	7a7b      	ldrb	r3, [r7, #9]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 ff85 	bl	8002b08 <LCD_Send_Data_Lower>
                    LCD_Send_Data_Lower(':');
 8001bfe:	203a      	movs	r0, #58	@ 0x3a
 8001c00:	f000 ff82 	bl	8002b08 <LCD_Send_Data_Lower>
                    (void)sprintf(temp, "%02d", (seconds % MAX_TEMP_VAL));
 8001c04:	7bbb      	ldrb	r3, [r7, #14]
 8001c06:	4a2c      	ldr	r2, [pc, #176]	@ (8001cb8 <stopwatchTask+0x198>)
 8001c08:	fba2 1203 	umull	r1, r2, r2, r3
 8001c0c:	0952      	lsrs	r2, r2, #5
 8001c0e:	2164      	movs	r1, #100	@ 0x64
 8001c10:	fb01 f202 	mul.w	r2, r1, r2
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	4927      	ldr	r1, [pc, #156]	@ (8001cbc <stopwatchTask+0x19c>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f006 f865 	bl	8007cf0 <siprintf>
                    LCD_Send_Data_Lower(temp[0]);
 8001c26:	7a3b      	ldrb	r3, [r7, #8]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 ff6d 	bl	8002b08 <LCD_Send_Data_Lower>
                    LCD_Send_Data_Lower(temp[1]);
 8001c2e:	7a7b      	ldrb	r3, [r7, #9]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 ff69 	bl	8002b08 <LCD_Send_Data_Lower>
                    DEBUG_PRINT("Timer: %02d:%02d:%02d\n", hours, minutes, seconds);
 8001c36:	7b39      	ldrb	r1, [r7, #12]
 8001c38:	7b7a      	ldrb	r2, [r7, #13]
 8001c3a:	7bbb      	ldrb	r3, [r7, #14]
 8001c3c:	4820      	ldr	r0, [pc, #128]	@ (8001cc0 <stopwatchTask+0x1a0>)
 8001c3e:	f005 ffdf 	bl	8007c00 <iprintf>
                    seconds++;
 8001c42:	7bbb      	ldrb	r3, [r7, #14]
 8001c44:	3301      	adds	r3, #1
 8001c46:	73bb      	strb	r3, [r7, #14]
                    if (seconds >= 60U) {
 8001c48:	7bbb      	ldrb	r3, [r7, #14]
 8001c4a:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c4c:	d918      	bls.n	8001c80 <stopwatchTask+0x160>
                        seconds = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73bb      	strb	r3, [r7, #14]
                        minutes++;
 8001c52:	7b7b      	ldrb	r3, [r7, #13]
 8001c54:	3301      	adds	r3, #1
 8001c56:	737b      	strb	r3, [r7, #13]
                        if (minutes >= 60U) {
 8001c58:	7b7b      	ldrb	r3, [r7, #13]
 8001c5a:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c5c:	d910      	bls.n	8001c80 <stopwatchTask+0x160>
                            minutes = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	737b      	strb	r3, [r7, #13]
                            hours++;
 8001c62:	7b3b      	ldrb	r3, [r7, #12]
 8001c64:	3301      	adds	r3, #1
 8001c66:	733b      	strb	r3, [r7, #12]
 8001c68:	e00a      	b.n	8001c80 <stopwatchTask+0x160>
                        }
                    }
                }
            } else {
            	stopwatchInit();
 8001c6a:	f000 fd7b 	bl	8002764 <stopwatchInit>
                seconds = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73bb      	strb	r3, [r7, #14]
                minutes = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	737b      	strb	r3, [r7, #13]
                hours = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	733b      	strb	r3, [r7, #12]
                prev_green = green_ctr;
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <stopwatchTask+0x18c>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	73fb      	strb	r3, [r7, #15]
            }

            taskYIELD();
 8001c80:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <stopwatchTask+0x1a4>)
 8001c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f3bf 8f4f 	dsb	sy
 8001c8c:	f3bf 8f6f 	isb	sy
            HAL_Delay(TIME_DELAY);
 8001c90:	f240 401a 	movw	r0, #1050	@ 0x41a
 8001c94:	f000 ff98 	bl	8002bc8 <HAL_Delay>
            if (yellow_ctr > 0U) {
 8001c98:	e765      	b.n	8001b66 <stopwatchTask+0x46>
                break;
 8001c9a:	bf00      	nop
        }

        exitFunctionMode();
 8001c9c:	f000 fd46 	bl	800272c <exitFunctionMode>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001ca0:	e74f      	b.n	8001b42 <stopwatchTask+0x22>
 8001ca2:	bf00      	nop
 8001ca4:	080092c4 	.word	0x080092c4
 8001ca8:	080092e4 	.word	0x080092e4
 8001cac:	200000de 	.word	0x200000de
 8001cb0:	200000df 	.word	0x200000df
 8001cb4:	200000dd 	.word	0x200000dd
 8001cb8:	51eb851f 	.word	0x51eb851f
 8001cbc:	080092b8 	.word	0x080092b8
 8001cc0:	08009300 	.word	0x08009300
 8001cc4:	e000ed04 	.word	0xe000ed04

08001cc8 <alarmTask>:
    }
}

void alarmTask (void *param)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
	uint8_t flipper = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t prev_blue_ctr;
	uint8_t prev_toggle_chime_function;
	char temp[TEMP_SIZE] = {0};
 8001ce6:	4b9a      	ldr	r3, [pc, #616]	@ (8001f50 <alarmTask+0x288>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	81bb      	strh	r3, [r7, #12]
 8001cec:	2300      	movs	r3, #0
 8001cee:	73bb      	strb	r3, [r7, #14]

	(void)param;

	while (true) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f004 fce4 	bl	80066c8 <ulTaskGenericNotifyTake>

		DEBUG_PRINT("You are in alarm mode!\n");
 8001d00:	4894      	ldr	r0, [pc, #592]	@ (8001f54 <alarmTask+0x28c>)
 8001d02:	f005 ffed 	bl	8007ce0 <puts>
		enterFunctionMode();
 8001d06:	f000 fcf5 	bl	80026f4 <enterFunctionMode>

		prev_blue_ctr = blue_ctr;
 8001d0a:	4b93      	ldr	r3, [pc, #588]	@ (8001f58 <alarmTask+0x290>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		prev_toggle_chime_function = toggle_chime_function;
 8001d12:	4b92      	ldr	r3, [pc, #584]	@ (8001f5c <alarmTask+0x294>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		alarmInit();
 8001d1a:	f000 fd55 	bl	80027c8 <alarmInit>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001d1e:	f107 0310 	add.w	r3, r7, #16
 8001d22:	2200      	movs	r2, #0
 8001d24:	4619      	mov	r1, r3
 8001d26:	488e      	ldr	r0, [pc, #568]	@ (8001f60 <alarmTask+0x298>)
 8001d28:	f002 fa69 	bl	80041fe <HAL_RTC_GetTime>
		(void)sprintf(temp, "%02d", (sTime.Hours % MAX_TEMP_VAL));
 8001d2c:	7c3b      	ldrb	r3, [r7, #16]
 8001d2e:	4a8d      	ldr	r2, [pc, #564]	@ (8001f64 <alarmTask+0x29c>)
 8001d30:	fba2 1203 	umull	r1, r2, r2, r3
 8001d34:	0952      	lsrs	r2, r2, #5
 8001d36:	2164      	movs	r1, #100	@ 0x64
 8001d38:	fb01 f202 	mul.w	r2, r1, r2
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4988      	ldr	r1, [pc, #544]	@ (8001f68 <alarmTask+0x2a0>)
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f005 ffd1 	bl	8007cf0 <siprintf>
		LCD_Send_Data_Lower(temp[0]);
 8001d4e:	7b3b      	ldrb	r3, [r7, #12]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fed9 	bl	8002b08 <LCD_Send_Data_Lower>
		LCD_Send_Data_Lower(temp[1]);
 8001d56:	7b7b      	ldrb	r3, [r7, #13]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fed5 	bl	8002b08 <LCD_Send_Data_Lower>
		LCD_Send_Data_Lower(':');
 8001d5e:	203a      	movs	r0, #58	@ 0x3a
 8001d60:	f000 fed2 	bl	8002b08 <LCD_Send_Data_Lower>
		(void)sprintf(temp, "%02d", (sTime.Minutes % MAX_TEMP_VAL));
 8001d64:	7c7b      	ldrb	r3, [r7, #17]
 8001d66:	4a7f      	ldr	r2, [pc, #508]	@ (8001f64 <alarmTask+0x29c>)
 8001d68:	fba2 1203 	umull	r1, r2, r2, r3
 8001d6c:	0952      	lsrs	r2, r2, #5
 8001d6e:	2164      	movs	r1, #100	@ 0x64
 8001d70:	fb01 f202 	mul.w	r2, r1, r2
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	497a      	ldr	r1, [pc, #488]	@ (8001f68 <alarmTask+0x2a0>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f005 ffb5 	bl	8007cf0 <siprintf>
		LCD_Send_Data_Lower(temp[0]);
 8001d86:	7b3b      	ldrb	r3, [r7, #12]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 febd 	bl	8002b08 <LCD_Send_Data_Lower>
		LCD_Send_Data_Lower(temp[1]);
 8001d8e:	7b7b      	ldrb	r3, [r7, #13]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 feb9 	bl	8002b08 <LCD_Send_Data_Lower>

		while (true) {
			DEBUG_PRINT("BLUE %d GREEN %d!\n", blue_ctr, green_ctr);
 8001d96:	4b70      	ldr	r3, [pc, #448]	@ (8001f58 <alarmTask+0x290>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4b73      	ldr	r3, [pc, #460]	@ (8001f6c <alarmTask+0x2a4>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	4872      	ldr	r0, [pc, #456]	@ (8001f70 <alarmTask+0x2a8>)
 8001da8:	f005 ff2a 	bl	8007c00 <iprintf>
			/* Exit condition */
			if (yellow_ctr != 0U) {
 8001dac:	4b71      	ldr	r3, [pc, #452]	@ (8001f74 <alarmTask+0x2ac>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <alarmTask+0xfc>
				setAlarm(sTime.Hours, sTime.Minutes);
 8001db6:	7c3b      	ldrb	r3, [r7, #16]
 8001db8:	7c7a      	ldrb	r2, [r7, #17]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 f9f9 	bl	80021b4 <setAlarm>
				break;
 8001dc2:	e0c2      	b.n	8001f4a <alarmTask+0x282>
			}

			/* Chime function */
			if (prev_toggle_chime_function != toggle_chime_function) {
 8001dc4:	4b65      	ldr	r3, [pc, #404]	@ (8001f5c <alarmTask+0x294>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d01c      	beq.n	8001e0c <alarmTask+0x144>
				if (toggle_chime_function != 0U) {
 8001dd2:	4b62      	ldr	r3, [pc, #392]	@ (8001f5c <alarmTask+0x294>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <alarmTask+0x128>
					internal_toggle_chime_function = 1U;
 8001ddc:	4b66      	ldr	r3, [pc, #408]	@ (8001f78 <alarmTask+0x2b0>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
					LCD_Send_Command(CUR_BEGIN_LOWER_SIXTEEN);
 8001de2:	20cf      	movs	r0, #207	@ 0xcf
 8001de4:	f000 fe56 	bl	8002a94 <LCD_Send_Command>
					LCD_Send_Data(BELL_ASCII);
 8001de8:	2007      	movs	r0, #7
 8001dea:	f000 fe61 	bl	8002ab0 <LCD_Send_Data>
 8001dee:	e008      	b.n	8001e02 <alarmTask+0x13a>
				} else {
					internal_toggle_chime_function = 0U;
 8001df0:	4b61      	ldr	r3, [pc, #388]	@ (8001f78 <alarmTask+0x2b0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
					LCD_Send_Command(CUR_BEGIN_LOWER_SIXTEEN);
 8001df6:	20cf      	movs	r0, #207	@ 0xcf
 8001df8:	f000 fe4c 	bl	8002a94 <LCD_Send_Command>
					LCD_Send_Data(EMPTY);
 8001dfc:	2020      	movs	r0, #32
 8001dfe:	f000 fe57 	bl	8002ab0 <LCD_Send_Data>
				}
				prev_toggle_chime_function = toggle_chime_function;
 8001e02:	4b56      	ldr	r3, [pc, #344]	@ (8001f5c <alarmTask+0x294>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001e0a:	e091      	b.n	8001f30 <alarmTask+0x268>
			} else {
				/* Set alarm condition */
				if (blue_ctr >= 1U) {
 8001e0c:	4b52      	ldr	r3, [pc, #328]	@ (8001f58 <alarmTask+0x290>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 808c 	beq.w	8001f30 <alarmTask+0x268>
					/* Display hour and minutes */
					if ((green_ctr % 2U) == 1U) {
 8001e18:	4b54      	ldr	r3, [pc, #336]	@ (8001f6c <alarmTask+0x2a4>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d13f      	bne.n	8001ea8 <alarmTask+0x1e0>
						if (prev_blue_ctr != blue_ctr) {
 8001e28:	4b4b      	ldr	r3, [pc, #300]	@ (8001f58 <alarmTask+0x290>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d010      	beq.n	8001e58 <alarmTask+0x190>
							sTime.Hours = (uint8_t)((sTime.Hours + 1U) % 24U);
 8001e36:	7c3b      	ldrb	r3, [r7, #16]
 8001e38:	1c59      	adds	r1, r3, #1
 8001e3a:	4b50      	ldr	r3, [pc, #320]	@ (8001f7c <alarmTask+0x2b4>)
 8001e3c:	fba3 2301 	umull	r2, r3, r3, r1
 8001e40:	091a      	lsrs	r2, r3, #4
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	1aca      	subs	r2, r1, r3
 8001e4c:	b2d3      	uxtb	r3, r2
 8001e4e:	743b      	strb	r3, [r7, #16]
							prev_blue_ctr = blue_ctr;
 8001e50:	4b41      	ldr	r3, [pc, #260]	@ (8001f58 <alarmTask+0x290>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
						}
						(void)sprintf(temp, "%02d", (sTime.Hours % MAX_TEMP_VAL));
 8001e58:	7c3b      	ldrb	r3, [r7, #16]
 8001e5a:	4a42      	ldr	r2, [pc, #264]	@ (8001f64 <alarmTask+0x29c>)
 8001e5c:	fba2 1203 	umull	r1, r2, r2, r3
 8001e60:	0952      	lsrs	r2, r2, #5
 8001e62:	2164      	movs	r1, #100	@ 0x64
 8001e64:	fb01 f202 	mul.w	r2, r1, r2
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	493d      	ldr	r1, [pc, #244]	@ (8001f68 <alarmTask+0x2a0>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f005 ff3b 	bl	8007cf0 <siprintf>
						LCD_Send_Command(CUR_BEGIN_LOWER_SECOND);
 8001e7a:	20c1      	movs	r0, #193	@ 0xc1
 8001e7c:	f000 fe0a 	bl	8002a94 <LCD_Send_Command>
						UPDATE_POSITION(flipper, temp[0], temp[1]);
 8001e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <alarmTask+0x1d2>
 8001e88:	7b3b      	ldrb	r3, [r7, #12]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 fe10 	bl	8002ab0 <LCD_Send_Data>
 8001e90:	7b7b      	ldrb	r3, [r7, #13]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fe0c 	bl	8002ab0 <LCD_Send_Data>
 8001e98:	e045      	b.n	8001f26 <alarmTask+0x25e>
 8001e9a:	2020      	movs	r0, #32
 8001e9c:	f000 fe08 	bl	8002ab0 <LCD_Send_Data>
 8001ea0:	2020      	movs	r0, #32
 8001ea2:	f000 fe05 	bl	8002ab0 <LCD_Send_Data>
 8001ea6:	e03e      	b.n	8001f26 <alarmTask+0x25e>
					} else {
						if (prev_blue_ctr != blue_ctr) {
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f58 <alarmTask+0x290>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d010      	beq.n	8001ed8 <alarmTask+0x210>
							sTime.Minutes = (uint8_t)((sTime.Minutes + 1U) % 60U);
 8001eb6:	7c7b      	ldrb	r3, [r7, #17]
 8001eb8:	1c59      	adds	r1, r3, #1
 8001eba:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <alarmTask+0x2b8>)
 8001ebc:	fba3 2301 	umull	r2, r3, r3, r1
 8001ec0:	095a      	lsrs	r2, r3, #5
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	1aca      	subs	r2, r1, r3
 8001ecc:	b2d3      	uxtb	r3, r2
 8001ece:	747b      	strb	r3, [r7, #17]
							prev_blue_ctr = blue_ctr;
 8001ed0:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <alarmTask+0x290>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
						}
						(void)sprintf(temp, "%02d", (sTime.Minutes % MAX_TEMP_VAL));
 8001ed8:	7c7b      	ldrb	r3, [r7, #17]
 8001eda:	4a22      	ldr	r2, [pc, #136]	@ (8001f64 <alarmTask+0x29c>)
 8001edc:	fba2 1203 	umull	r1, r2, r2, r3
 8001ee0:	0952      	lsrs	r2, r2, #5
 8001ee2:	2164      	movs	r1, #100	@ 0x64
 8001ee4:	fb01 f202 	mul.w	r2, r1, r2
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	491d      	ldr	r1, [pc, #116]	@ (8001f68 <alarmTask+0x2a0>)
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f005 fefb 	bl	8007cf0 <siprintf>
						LCD_Send_Command(CUR_BEGIN_LOWER_FIFTH);
 8001efa:	20c4      	movs	r0, #196	@ 0xc4
 8001efc:	f000 fdca 	bl	8002a94 <LCD_Send_Command>
						UPDATE_POSITION(flipper, temp[0], temp[1]);
 8001f00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <alarmTask+0x252>
 8001f08:	7b3b      	ldrb	r3, [r7, #12]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fdd0 	bl	8002ab0 <LCD_Send_Data>
 8001f10:	7b7b      	ldrb	r3, [r7, #13]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fdcc 	bl	8002ab0 <LCD_Send_Data>
 8001f18:	e005      	b.n	8001f26 <alarmTask+0x25e>
 8001f1a:	2020      	movs	r0, #32
 8001f1c:	f000 fdc8 	bl	8002ab0 <LCD_Send_Data>
 8001f20:	2020      	movs	r0, #32
 8001f22:	f000 fdc5 	bl	8002ab0 <LCD_Send_Data>
					}
					flipper = (uint8_t)(~flipper);
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
			}

			taskYIELD();
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <alarmTask+0x2bc>)
 8001f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	f3bf 8f6f 	isb	sy
			HAL_Delay(SHORT_TIME_DELAY);
 8001f40:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001f44:	f000 fe40 	bl	8002bc8 <HAL_Delay>
			DEBUG_PRINT("BLUE %d GREEN %d!\n", blue_ctr, green_ctr);
 8001f48:	e725      	b.n	8001d96 <alarmTask+0xce>
		}
		exitFunctionMode();
 8001f4a:	f000 fbef 	bl	800272c <exitFunctionMode>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001f4e:	e6cf      	b.n	8001cf0 <alarmTask+0x28>
 8001f50:	080092c4 	.word	0x080092c4
 8001f54:	08009318 	.word	0x08009318
 8001f58:	200000dd 	.word	0x200000dd
 8001f5c:	200000e0 	.word	0x200000e0
 8001f60:	2000008c 	.word	0x2000008c
 8001f64:	51eb851f 	.word	0x51eb851f
 8001f68:	080092b8 	.word	0x080092b8
 8001f6c:	200000de 	.word	0x200000de
 8001f70:	08009330 	.word	0x08009330
 8001f74:	200000df 	.word	0x200000df
 8001f78:	20000131 	.word	0x20000131
 8001f7c:	aaaaaaab 	.word	0xaaaaaaab
 8001f80:	88888889 	.word	0x88888889
 8001f84:	e000ed04 	.word	0xe000ed04

08001f88 <hourlyAlarmTask>:
	}
}

void hourlyAlarmTask (void *param)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b094      	sub	sp, #80	@ 0x50
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 8001f90:	f107 0320 	add.w	r3, r7, #32
 8001f94:	2228      	movs	r2, #40	@ 0x28
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f005 ffa1 	bl	8007ee0 <memset>
	RTC_TimeTypeDef sTime;

	(void)param;

	sAlarm.AlarmTime.Minutes = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	sAlarm.AlarmTime.Seconds = 1U;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	sAlarm.AlarmTime.SubSeconds = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	633b      	str	r3, [r7, #48]	@ 0x30
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001fb6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001fba:	637b      	str	r3, [r7, #52]	@ 0x34
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sAlarm.AlarmDateWeekDay = 1U;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	sAlarm.Alarm = RTC_ALARM_B;
 8001fca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fce:	647b      	str	r3, [r7, #68]	@ 0x44

	while (true) {
		DEBUG_PRINT("You are in vHourlyAlarmTask!\n");
 8001fd0:	481b      	ldr	r0, [pc, #108]	@ (8002040 <hourlyAlarmTask+0xb8>)
 8001fd2:	f005 fe85 	bl	8007ce0 <puts>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	2200      	movs	r2, #0
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4819      	ldr	r0, [pc, #100]	@ (8002044 <hourlyAlarmTask+0xbc>)
 8001fe0:	f002 f90d 	bl	80041fe <HAL_RTC_GetTime>
		sAlarm.AlarmTime.Hours = (uint8_t)((sTime.Hours + 1U) % 24U);
 8001fe4:	7b3b      	ldrb	r3, [r7, #12]
 8001fe6:	1c59      	adds	r1, r3, #1
 8001fe8:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <hourlyAlarmTask+0xc0>)
 8001fea:	fba3 2301 	umull	r2, r3, r3, r1
 8001fee:	091a      	lsrs	r2, r3, #4
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1aca      	subs	r2, r1, r3
 8001ffa:	b2d3      	uxtb	r3, r2
 8001ffc:	f887 3020 	strb.w	r3, [r7, #32]

		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8002000:	f107 0320 	add.w	r3, r7, #32
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	480e      	ldr	r0, [pc, #56]	@ (8002044 <hourlyAlarmTask+0xbc>)
 800200a:	f002 fa29 	bl	8004460 <HAL_RTC_SetAlarm_IT>
			/* Alarm Setting Error */
		}

		/* Wait for the alarm to trigger */
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800200e:	f04f 32ff 	mov.w	r2, #4294967295
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	2101      	movs	r1, #1
 8002018:	2000      	movs	r0, #0
 800201a:	f004 fb55 	bl	80066c8 <ulTaskGenericNotifyTake>

		if (internal_toggle_chime_function != 0U) {
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <hourlyAlarmTask+0xc4>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <hourlyAlarmTask+0xb0>
			(void)xTaskNotifyGive(blinkHandle);
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <hourlyAlarmTask+0xc8>)
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	2300      	movs	r3, #0
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2302      	movs	r3, #2
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	f004 fbb6 	bl	80067a4 <xTaskGenericNotify>
		}
		DEBUG_PRINT("Exit vHourlyAlarmTask!\n");
 8002038:	4806      	ldr	r0, [pc, #24]	@ (8002054 <hourlyAlarmTask+0xcc>)
 800203a:	f005 fe51 	bl	8007ce0 <puts>
		DEBUG_PRINT("You are in vHourlyAlarmTask!\n");
 800203e:	e7c7      	b.n	8001fd0 <hourlyAlarmTask+0x48>
 8002040:	08009344 	.word	0x08009344
 8002044:	2000008c 	.word	0x2000008c
 8002048:	aaaaaaab 	.word	0xaaaaaaab
 800204c:	20000131 	.word	0x20000131
 8002050:	200000d8 	.word	0x200000d8
 8002054:	08009364 	.word	0x08009364

08002058 <snoozeTask>:
	}
}

void snoozeTask (void *param)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b094      	sub	sp, #80	@ 0x50
 800205c:	af02      	add	r7, sp, #8
 800205e:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	2228      	movs	r2, #40	@ 0x28
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f005 ff39 	bl	8007ee0 <memset>
	uint8_t prev_blue_ctr;
	uint8_t prev_yellow_ctr;

	(void)param;

	sAlarm.AlarmTime.Seconds = 1U;
 800206e:	2301      	movs	r3, #1
 8002070:	77bb      	strb	r3, [r7, #30]
	sAlarm.AlarmTime.SubSeconds = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002076:	2300      	movs	r3, #0
 8002078:	62bb      	str	r3, [r7, #40]	@ 0x28
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800207e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002088:	2300      	movs	r3, #0
 800208a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sAlarm.AlarmDateWeekDay = 1U;
 800208c:	2301      	movs	r3, #1
 800208e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	sAlarm.Alarm = RTC_ALARM_A;
 8002092:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002096:	643b      	str	r3, [r7, #64]	@ 0x40

	prev_green_ctr = green_ctr;
 8002098:	4b3e      	ldr	r3, [pc, #248]	@ (8002194 <snoozeTask+0x13c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	prev_blue_ctr = blue_ctr;
 80020a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002198 <snoozeTask+0x140>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	prev_yellow_ctr = yellow_ctr;
 80020a8:	4b3c      	ldr	r3, [pc, #240]	@ (800219c <snoozeTask+0x144>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

	while (true) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
 80020b8:	2101      	movs	r1, #1
 80020ba:	2000      	movs	r0, #0
 80020bc:	f004 fb04 	bl	80066c8 <ulTaskGenericNotifyTake>
		enterFunctionMode();
 80020c0:	f000 fb18 	bl	80026f4 <enterFunctionMode>
		DEBUG_PRINT("You are in snooze_task!\n");
 80020c4:	4836      	ldr	r0, [pc, #216]	@ (80021a0 <snoozeTask+0x148>)
 80020c6:	f005 fe0b 	bl	8007ce0 <puts>

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	2200      	movs	r2, #0
 80020d0:	4619      	mov	r1, r3
 80020d2:	4834      	ldr	r0, [pc, #208]	@ (80021a4 <snoozeTask+0x14c>)
 80020d4:	f002 f893 	bl	80041fe <HAL_RTC_GetTime>

		sAlarm.AlarmTime.Hours = sTime.Hours;
 80020d8:	7a3b      	ldrb	r3, [r7, #8]
 80020da:	773b      	strb	r3, [r7, #28]
		sAlarm.AlarmTime.Minutes = (uint8_t)((sTime.Minutes + 1U) % 60U);
 80020dc:	7a7b      	ldrb	r3, [r7, #9]
 80020de:	1c59      	adds	r1, r3, #1
 80020e0:	4b31      	ldr	r3, [pc, #196]	@ (80021a8 <snoozeTask+0x150>)
 80020e2:	fba3 2301 	umull	r2, r3, r3, r1
 80020e6:	095a      	lsrs	r2, r3, #5
 80020e8:	4613      	mov	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	1aca      	subs	r2, r1, r3
 80020f2:	b2d3      	uxtb	r3, r2
 80020f4:	777b      	strb	r3, [r7, #29]

		uint8_t alarm_loop = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

		while (alarm_loop < ALARM_DURATION) {
 80020fc:	e01e      	b.n	800213c <snoozeTask+0xe4>
			if (prev_yellow_ctr != yellow_ctr) {
 80020fe:	4b27      	ldr	r3, [pc, #156]	@ (800219c <snoozeTask+0x144>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002108:	429a      	cmp	r2, r3
 800210a:	d11c      	bne.n	8002146 <snoozeTask+0xee>
				break;
			}

			(void)xTaskNotifyGive(blinkHandle);
 800210c:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <snoozeTask+0x154>)
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	2300      	movs	r3, #0
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2302      	movs	r3, #2
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	f004 fb43 	bl	80067a4 <xTaskGenericNotify>
			alarm_loop++;
 800211e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002122:	3301      	adds	r3, #1
 8002124:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
			prev_yellow_ctr = yellow_ctr;
 8002128:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <snoozeTask+0x144>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
			vTaskDelay(pdMS_TO_TICKS(2500U));
 8002130:	f04f 00fa 	mov.w	r0, #250	@ 0xfa
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	f003 fbae 	bl	8005898 <vTaskDelay>
		while (alarm_loop < ALARM_DURATION) {
 800213c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002140:	2b08      	cmp	r3, #8
 8002142:	d9dc      	bls.n	80020fe <snoozeTask+0xa6>
 8002144:	e000      	b.n	8002148 <snoozeTask+0xf0>
				break;
 8002146:	bf00      	nop
		}

		if ((prev_green_ctr != green_ctr) || (prev_blue_ctr != blue_ctr)) {
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <snoozeTask+0x13c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002152:	429a      	cmp	r2, r3
 8002154:	d106      	bne.n	8002164 <snoozeTask+0x10c>
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <snoozeTask+0x140>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002160:	429a      	cmp	r2, r3
 8002162:	d002      	beq.n	800216a <snoozeTask+0x112>
			exitFunctionMode();
 8002164:	f000 fae2 	bl	800272c <exitFunctionMode>
			continue;
 8002168:	e013      	b.n	8002192 <snoozeTask+0x13a>
		}

		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	2200      	movs	r2, #0
 8002170:	4619      	mov	r1, r3
 8002172:	480c      	ldr	r0, [pc, #48]	@ (80021a4 <snoozeTask+0x14c>)
 8002174:	f002 f974 	bl	8004460 <HAL_RTC_SetAlarm_IT>
			/* Alarm Setting Error */
		}

		prev_green_ctr = green_ctr;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <snoozeTask+0x13c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		prev_blue_ctr = blue_ctr;
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <snoozeTask+0x140>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		DEBUG_PRINT("Exit snooze_task!\n");
 8002188:	4809      	ldr	r0, [pc, #36]	@ (80021b0 <snoozeTask+0x158>)
 800218a:	f005 fda9 	bl	8007ce0 <puts>
		exitFunctionMode();
 800218e:	f000 facd 	bl	800272c <exitFunctionMode>
	while (true) {
 8002192:	e78d      	b.n	80020b0 <snoozeTask+0x58>
 8002194:	200000de 	.word	0x200000de
 8002198:	200000dd 	.word	0x200000dd
 800219c:	200000df 	.word	0x200000df
 80021a0:	0800937c 	.word	0x0800937c
 80021a4:	2000008c 	.word	0x2000008c
 80021a8:	88888889 	.word	0x88888889
 80021ac:	200000d8 	.word	0x200000d8
 80021b0:	08009394 	.word	0x08009394

080021b4 <setAlarm>:
	}
}


void setAlarm (uint8_t hours, uint8_t minutes)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b092      	sub	sp, #72	@ 0x48
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	460a      	mov	r2, r1
 80021be:	71fb      	strb	r3, [r7, #7]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71bb      	strb	r3, [r7, #6]
    RTC_AlarmTypeDef sAlarm = {0};
 80021c4:	f107 0320 	add.w	r3, r7, #32
 80021c8:	2228      	movs	r2, #40	@ 0x28
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f005 fe87 	bl	8007ee0 <memset>
    RTC_TimeTypeDef sTime;

    DEBUG_PRINT("You are in set_alarm! %d %d\n", hours, minutes);
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	79ba      	ldrb	r2, [r7, #6]
 80021d6:	4619      	mov	r1, r3
 80021d8:	4818      	ldr	r0, [pc, #96]	@ (800223c <setAlarm+0x88>)
 80021da:	f005 fd11 	bl	8007c00 <iprintf>
    /* Get the current time */
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	2200      	movs	r2, #0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4816      	ldr	r0, [pc, #88]	@ (8002240 <setAlarm+0x8c>)
 80021e8:	f002 f809 	bl	80041fe <HAL_RTC_GetTime>

    /* Configure the alarm to trigger at the start of the next hour */
    sAlarm.AlarmTime.Hours = hours;
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f887 3020 	strb.w	r3, [r7, #32]
    sAlarm.AlarmTime.Minutes = minutes;
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    sAlarm.AlarmTime.Seconds = 1U;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    sAlarm.AlarmTime.SubSeconds = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	633b      	str	r3, [r7, #48]	@ 0x30
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800220a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002210:	2300      	movs	r3, #0
 8002212:	63bb      	str	r3, [r7, #56]	@ 0x38
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002214:	2300      	movs	r3, #0
 8002216:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sAlarm.AlarmDateWeekDay = 1U;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    sAlarm.Alarm = RTC_ALARM_A;
 800221e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002222:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	2200      	movs	r2, #0
 800222a:	4619      	mov	r1, r3
 800222c:	4804      	ldr	r0, [pc, #16]	@ (8002240 <setAlarm+0x8c>)
 800222e:	f002 f917 	bl	8004460 <HAL_RTC_SetAlarm_IT>
        /* Alarm Setting Error */
    }
}
 8002232:	bf00      	nop
 8002234:	3748      	adds	r7, #72	@ 0x48
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	080093a8 	.word	0x080093a8
 8002240:	2000008c 	.word	0x2000008c

08002244 <adjustTime>:

void adjustTime (void *param)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    (void)param;

    while (true) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	f04f 33ff 	mov.w	r3, #4294967295
 8002254:	2101      	movs	r1, #1
 8002256:	2000      	movs	r0, #0
 8002258:	f004 fa36 	bl	80066c8 <ulTaskGenericNotifyTake>
        DEBUG_PRINT("You are in time setting mode!\n");
 800225c:	48c1      	ldr	r0, [pc, #772]	@ (8002564 <adjustTime+0x320>)
 800225e:	f005 fd3f 	bl	8007ce0 <puts>
        enterFunctionMode();
 8002262:	f000 fa47 	bl	80026f4 <enterFunctionMode>

        RTC_TimeTypeDef sTime = {0};
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]
        RTC_DateTypeDef sDate = {0};
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
        uint8_t flipper = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char temp[TEMP_SIZE] = {0};
 8002280:	4bb9      	ldr	r3, [pc, #740]	@ (8002568 <adjustTime+0x324>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	813b      	strh	r3, [r7, #8]
 8002286:	2300      	movs	r3, #0
 8002288:	72bb      	strb	r3, [r7, #10]
        uint8_t prev_green_ctr = green_ctr;
 800228a:	4bb8      	ldr	r3, [pc, #736]	@ (800256c <adjustTime+0x328>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        uint8_t prev_blue_ctr = blue_ctr;
 8002292:	4bb7      	ldr	r3, [pc, #732]	@ (8002570 <adjustTime+0x32c>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800229a:	f107 0310 	add.w	r3, r7, #16
 800229e:	2200      	movs	r2, #0
 80022a0:	4619      	mov	r1, r3
 80022a2:	48b4      	ldr	r0, [pc, #720]	@ (8002574 <adjustTime+0x330>)
 80022a4:	f001 ffab 	bl	80041fe <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	48b0      	ldr	r0, [pc, #704]	@ (8002574 <adjustTime+0x330>)
 80022b2:	f002 f886 	bl	80043c2 <HAL_RTC_GetDate>

        while (true) {
            DEBUG_PRINT("%d, %d %d\n", yellow_ctr, blue_ctr, green_ctr);
 80022b6:	4bb0      	ldr	r3, [pc, #704]	@ (8002578 <adjustTime+0x334>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4619      	mov	r1, r3
 80022be:	4bac      	ldr	r3, [pc, #688]	@ (8002570 <adjustTime+0x32c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	4ba9      	ldr	r3, [pc, #676]	@ (800256c <adjustTime+0x328>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	48ab      	ldr	r0, [pc, #684]	@ (800257c <adjustTime+0x338>)
 80022ce:	f005 fc97 	bl	8007c00 <iprintf>

            if (yellow_ctr > 0U) {
 80022d2:	4ba9      	ldr	r3, [pc, #676]	@ (8002578 <adjustTime+0x334>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00e      	beq.n	80022fa <adjustTime+0xb6>
                HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	2200      	movs	r2, #0
 80022e2:	4619      	mov	r1, r3
 80022e4:	48a3      	ldr	r0, [pc, #652]	@ (8002574 <adjustTime+0x330>)
 80022e6:	f001 fef0 	bl	80040ca <HAL_RTC_SetTime>
                HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	2200      	movs	r2, #0
 80022f0:	4619      	mov	r1, r3
 80022f2:	48a0      	ldr	r0, [pc, #640]	@ (8002574 <adjustTime+0x330>)
 80022f4:	f001 ffe1 	bl	80042ba <HAL_RTC_SetDate>
                break;
 80022f8:	e1f1      	b.n	80026de <adjustTime+0x49a>
            }

            if (prev_green_ctr != green_ctr) {
 80022fa:	4b9c      	ldr	r3, [pc, #624]	@ (800256c <adjustTime+0x328>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002304:	429a      	cmp	r2, r3
 8002306:	d00a      	beq.n	800231e <adjustTime+0xda>
            	taskENTER_CRITICAL();
 8002308:	f005 f86c 	bl	80073e4 <vPortEnterCritical>
                blue_ctr = 0U;
 800230c:	4b98      	ldr	r3, [pc, #608]	@ (8002570 <adjustTime+0x32c>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
                taskEXIT_CRITICAL();
 8002312:	f005 f881 	bl	8007418 <vPortExitCritical>
                prev_green_ctr = green_ctr;
 8002316:	4b95      	ldr	r3, [pc, #596]	@ (800256c <adjustTime+0x328>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }

            switch (green_ctr % 6U) {
 800231e:	4b93      	ldr	r3, [pc, #588]	@ (800256c <adjustTime+0x328>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b96      	ldr	r3, [pc, #600]	@ (8002580 <adjustTime+0x33c>)
 8002326:	fba3 1302 	umull	r1, r3, r3, r2
 800232a:	0899      	lsrs	r1, r3, #2
 800232c:	460b      	mov	r3, r1
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	440b      	add	r3, r1
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b05      	cmp	r3, #5
 800233a:	f200 81bd 	bhi.w	80026b8 <adjustTime+0x474>
 800233e:	a201      	add	r2, pc, #4	@ (adr r2, 8002344 <adjustTime+0x100>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	0800235d 	.word	0x0800235d
 8002348:	080023c7 	.word	0x080023c7
 800234c:	08002447 	.word	0x08002447
 8002350:	080024c7 	.word	0x080024c7
 8002354:	08002591 	.word	0x08002591
 8002358:	0800263b 	.word	0x0800263b
                case 0U:
                    /* Set seconds */
                    if (prev_blue_ctr != blue_ctr) {
 800235c:	4b84      	ldr	r3, [pc, #528]	@ (8002570 <adjustTime+0x32c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002366:	429a      	cmp	r2, r3
 8002368:	d005      	beq.n	8002376 <adjustTime+0x132>
                        sTime.Seconds = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	74bb      	strb	r3, [r7, #18]
                        prev_blue_ctr = blue_ctr;
 800236e:	4b80      	ldr	r3, [pc, #512]	@ (8002570 <adjustTime+0x32c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }
                    (void)sprintf(temp, "%02d", (sTime.Seconds % MAX_TEMP_VAL));
 8002376:	7cbb      	ldrb	r3, [r7, #18]
 8002378:	4a82      	ldr	r2, [pc, #520]	@ (8002584 <adjustTime+0x340>)
 800237a:	fba2 1203 	umull	r1, r2, r2, r3
 800237e:	0952      	lsrs	r2, r2, #5
 8002380:	2164      	movs	r1, #100	@ 0x64
 8002382:	fb01 f202 	mul.w	r2, r1, r2
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	497d      	ldr	r1, [pc, #500]	@ (8002588 <adjustTime+0x344>)
 8002392:	4618      	mov	r0, r3
 8002394:	f005 fcac 	bl	8007cf0 <siprintf>
                    LCD_Send_Command(CUR_BEGIN_LOWER_EIGHT);
 8002398:	20c7      	movs	r0, #199	@ 0xc7
 800239a:	f000 fb7b 	bl	8002a94 <LCD_Send_Command>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 800239e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <adjustTime+0x174>
 80023a6:	7a3b      	ldrb	r3, [r7, #8]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fb81 	bl	8002ab0 <LCD_Send_Data>
 80023ae:	7a7b      	ldrb	r3, [r7, #9]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fb7d 	bl	8002ab0 <LCD_Send_Data>
                    break;
 80023b6:	e180      	b.n	80026ba <adjustTime+0x476>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 80023b8:	2020      	movs	r0, #32
 80023ba:	f000 fb79 	bl	8002ab0 <LCD_Send_Data>
 80023be:	2020      	movs	r0, #32
 80023c0:	f000 fb76 	bl	8002ab0 <LCD_Send_Data>
                    break;
 80023c4:	e179      	b.n	80026ba <adjustTime+0x476>
                case 1U:
                    /* Set hour */
                    if (prev_blue_ctr != blue_ctr) {
 80023c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002570 <adjustTime+0x32c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d010      	beq.n	80023f6 <adjustTime+0x1b2>
                        sTime.Hours = (uint8_t)((sTime.Hours + 1U) % 24U);
 80023d4:	7c3b      	ldrb	r3, [r7, #16]
 80023d6:	1c59      	adds	r1, r3, #1
 80023d8:	4b69      	ldr	r3, [pc, #420]	@ (8002580 <adjustTime+0x33c>)
 80023da:	fba3 2301 	umull	r2, r3, r3, r1
 80023de:	091a      	lsrs	r2, r3, #4
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1aca      	subs	r2, r1, r3
 80023ea:	b2d3      	uxtb	r3, r2
 80023ec:	743b      	strb	r3, [r7, #16]
                        prev_blue_ctr = blue_ctr;
 80023ee:	4b60      	ldr	r3, [pc, #384]	@ (8002570 <adjustTime+0x32c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }
                    (void)sprintf(temp, "%02d", (sTime.Hours % MAX_TEMP_VAL));
 80023f6:	7c3b      	ldrb	r3, [r7, #16]
 80023f8:	4a62      	ldr	r2, [pc, #392]	@ (8002584 <adjustTime+0x340>)
 80023fa:	fba2 1203 	umull	r1, r2, r2, r3
 80023fe:	0952      	lsrs	r2, r2, #5
 8002400:	2164      	movs	r1, #100	@ 0x64
 8002402:	fb01 f202 	mul.w	r2, r1, r2
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	f107 0308 	add.w	r3, r7, #8
 8002410:	495d      	ldr	r1, [pc, #372]	@ (8002588 <adjustTime+0x344>)
 8002412:	4618      	mov	r0, r3
 8002414:	f005 fc6c 	bl	8007cf0 <siprintf>
                    LCD_Send_Command(CUR_BEGIN_LOWER_SECOND);
 8002418:	20c1      	movs	r0, #193	@ 0xc1
 800241a:	f000 fb3b 	bl	8002a94 <LCD_Send_Command>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 800241e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <adjustTime+0x1f4>
 8002426:	7a3b      	ldrb	r3, [r7, #8]
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fb41 	bl	8002ab0 <LCD_Send_Data>
 800242e:	7a7b      	ldrb	r3, [r7, #9]
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fb3d 	bl	8002ab0 <LCD_Send_Data>
                    break;
 8002436:	e140      	b.n	80026ba <adjustTime+0x476>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 8002438:	2020      	movs	r0, #32
 800243a:	f000 fb39 	bl	8002ab0 <LCD_Send_Data>
 800243e:	2020      	movs	r0, #32
 8002440:	f000 fb36 	bl	8002ab0 <LCD_Send_Data>
                    break;
 8002444:	e139      	b.n	80026ba <adjustTime+0x476>
                case 2U:
                    /* Set minute */
                    if (prev_blue_ctr != blue_ctr) {
 8002446:	4b4a      	ldr	r3, [pc, #296]	@ (8002570 <adjustTime+0x32c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002450:	429a      	cmp	r2, r3
 8002452:	d010      	beq.n	8002476 <adjustTime+0x232>
                        sTime.Minutes = (uint8_t)((sTime.Minutes + 1U) % 60U);
 8002454:	7c7b      	ldrb	r3, [r7, #17]
 8002456:	1c59      	adds	r1, r3, #1
 8002458:	4b4c      	ldr	r3, [pc, #304]	@ (800258c <adjustTime+0x348>)
 800245a:	fba3 2301 	umull	r2, r3, r3, r1
 800245e:	095a      	lsrs	r2, r3, #5
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	1aca      	subs	r2, r1, r3
 800246a:	b2d3      	uxtb	r3, r2
 800246c:	747b      	strb	r3, [r7, #17]
                        prev_blue_ctr = blue_ctr;
 800246e:	4b40      	ldr	r3, [pc, #256]	@ (8002570 <adjustTime+0x32c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }
                    (void)sprintf(temp, "%02d", (sTime.Minutes % MAX_TEMP_VAL));
 8002476:	7c7b      	ldrb	r3, [r7, #17]
 8002478:	4a42      	ldr	r2, [pc, #264]	@ (8002584 <adjustTime+0x340>)
 800247a:	fba2 1203 	umull	r1, r2, r2, r3
 800247e:	0952      	lsrs	r2, r2, #5
 8002480:	2164      	movs	r1, #100	@ 0x64
 8002482:	fb01 f202 	mul.w	r2, r1, r2
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	493d      	ldr	r1, [pc, #244]	@ (8002588 <adjustTime+0x344>)
 8002492:	4618      	mov	r0, r3
 8002494:	f005 fc2c 	bl	8007cf0 <siprintf>
                    LCD_Send_Command(CUR_BEGIN_LOWER_FIFTH);
 8002498:	20c4      	movs	r0, #196	@ 0xc4
 800249a:	f000 fafb 	bl	8002a94 <LCD_Send_Command>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 800249e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <adjustTime+0x274>
 80024a6:	7a3b      	ldrb	r3, [r7, #8]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fb01 	bl	8002ab0 <LCD_Send_Data>
 80024ae:	7a7b      	ldrb	r3, [r7, #9]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fafd 	bl	8002ab0 <LCD_Send_Data>
                    break;
 80024b6:	e100      	b.n	80026ba <adjustTime+0x476>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 80024b8:	2020      	movs	r0, #32
 80024ba:	f000 faf9 	bl	8002ab0 <LCD_Send_Data>
 80024be:	2020      	movs	r0, #32
 80024c0:	f000 faf6 	bl	8002ab0 <LCD_Send_Data>
                    break;
 80024c4:	e0f9      	b.n	80026ba <adjustTime+0x476>
                case 3U:
                    /* Set month */
                    if (prev_blue_ctr != blue_ctr) {
 80024c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002570 <adjustTime+0x32c>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d01f      	beq.n	8002514 <adjustTime+0x2d0>
                        sDate.Month = (uint8_t)((((sDate.Month + 1U) % 12U) == 0U) ? 12U : ((sDate.Month + 1U) % 12U));
 80024d4:	7b7b      	ldrb	r3, [r7, #13]
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	4b29      	ldr	r3, [pc, #164]	@ (8002580 <adjustTime+0x33c>)
 80024da:	fba3 2301 	umull	r2, r3, r3, r1
 80024de:	08da      	lsrs	r2, r3, #3
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	1aca      	subs	r2, r1, r3
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d00c      	beq.n	8002508 <adjustTime+0x2c4>
 80024ee:	7b7b      	ldrb	r3, [r7, #13]
 80024f0:	1c59      	adds	r1, r3, #1
 80024f2:	4b23      	ldr	r3, [pc, #140]	@ (8002580 <adjustTime+0x33c>)
 80024f4:	fba3 2301 	umull	r2, r3, r3, r1
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	1aca      	subs	r2, r1, r3
 8002504:	b2d3      	uxtb	r3, r2
 8002506:	e000      	b.n	800250a <adjustTime+0x2c6>
 8002508:	230c      	movs	r3, #12
 800250a:	737b      	strb	r3, [r7, #13]
                        prev_blue_ctr = blue_ctr;
 800250c:	4b18      	ldr	r3, [pc, #96]	@ (8002570 <adjustTime+0x32c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }
                    (void)sprintf(temp, "%02d", (sDate.Month % MAX_TEMP_VAL));
 8002514:	7b7b      	ldrb	r3, [r7, #13]
 8002516:	4a1b      	ldr	r2, [pc, #108]	@ (8002584 <adjustTime+0x340>)
 8002518:	fba2 1203 	umull	r1, r2, r2, r3
 800251c:	0952      	lsrs	r2, r2, #5
 800251e:	2164      	movs	r1, #100	@ 0x64
 8002520:	fb01 f202 	mul.w	r2, r1, r2
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	4916      	ldr	r1, [pc, #88]	@ (8002588 <adjustTime+0x344>)
 8002530:	4618      	mov	r0, r3
 8002532:	f005 fbdd 	bl	8007cf0 <siprintf>
                    LCD_Send_Command(CUR_BEGIN_UPPER_FIFTH);
 8002536:	2084      	movs	r0, #132	@ 0x84
 8002538:	f000 faac 	bl	8002a94 <LCD_Send_Command>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 800253c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <adjustTime+0x312>
 8002544:	7a3b      	ldrb	r3, [r7, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fab2 	bl	8002ab0 <LCD_Send_Data>
 800254c:	7a7b      	ldrb	r3, [r7, #9]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 faae 	bl	8002ab0 <LCD_Send_Data>
                    break;
 8002554:	e0b1      	b.n	80026ba <adjustTime+0x476>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 8002556:	2020      	movs	r0, #32
 8002558:	f000 faaa 	bl	8002ab0 <LCD_Send_Data>
 800255c:	2020      	movs	r0, #32
 800255e:	f000 faa7 	bl	8002ab0 <LCD_Send_Data>
                    break;
 8002562:	e0aa      	b.n	80026ba <adjustTime+0x476>
 8002564:	080093c8 	.word	0x080093c8
 8002568:	080092c4 	.word	0x080092c4
 800256c:	200000de 	.word	0x200000de
 8002570:	200000dd 	.word	0x200000dd
 8002574:	2000008c 	.word	0x2000008c
 8002578:	200000df 	.word	0x200000df
 800257c:	080093e8 	.word	0x080093e8
 8002580:	aaaaaaab 	.word	0xaaaaaaab
 8002584:	51eb851f 	.word	0x51eb851f
 8002588:	080092b8 	.word	0x080092b8
 800258c:	88888889 	.word	0x88888889
                case 4U:
                    /* Set day */
                    if (prev_blue_ctr != blue_ctr) {
 8002590:	4b54      	ldr	r3, [pc, #336]	@ (80026e4 <adjustTime+0x4a0>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800259a:	429a      	cmp	r2, r3
 800259c:	d025      	beq.n	80025ea <adjustTime+0x3a6>
                        uint8_t max_days = getDaysInMonth(sDate.Month, sDate.Year);
 800259e:	7b7b      	ldrb	r3, [r7, #13]
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f943 	bl	8002830 <getDaysInMonth>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                        sDate.Date = (uint8_t)((((sDate.Date + 1U) % max_days) == 0U) ? max_days : ((sDate.Date + 1U) % max_days));
 80025b0:	7bbb      	ldrb	r3, [r7, #14]
 80025b2:	3301      	adds	r3, #1
 80025b4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80025b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80025bc:	fb01 f202 	mul.w	r2, r1, r2
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <adjustTime+0x398>
 80025c6:	7bbb      	ldrb	r3, [r7, #14]
 80025c8:	3301      	adds	r3, #1
 80025ca:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80025ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80025d2:	fb01 f202 	mul.w	r2, r1, r2
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e001      	b.n	80025e0 <adjustTime+0x39c>
 80025dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80025e0:	73bb      	strb	r3, [r7, #14]
                        prev_blue_ctr = blue_ctr;
 80025e2:	4b40      	ldr	r3, [pc, #256]	@ (80026e4 <adjustTime+0x4a0>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }
                    (void)sprintf(temp, "%02d", (sDate.Date % MAX_TEMP_VAL));
 80025ea:	7bbb      	ldrb	r3, [r7, #14]
 80025ec:	4a3e      	ldr	r2, [pc, #248]	@ (80026e8 <adjustTime+0x4a4>)
 80025ee:	fba2 1203 	umull	r1, r2, r2, r3
 80025f2:	0952      	lsrs	r2, r2, #5
 80025f4:	2164      	movs	r1, #100	@ 0x64
 80025f6:	fb01 f202 	mul.w	r2, r1, r2
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	4939      	ldr	r1, [pc, #228]	@ (80026ec <adjustTime+0x4a8>)
 8002606:	4618      	mov	r0, r3
 8002608:	f005 fb72 	bl	8007cf0 <siprintf>
                    LCD_Send_Command(CUR_BEGIN_UPPER_SECOND);
 800260c:	2081      	movs	r0, #129	@ 0x81
 800260e:	f000 fa41 	bl	8002a94 <LCD_Send_Command>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 8002612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <adjustTime+0x3e8>
 800261a:	7a3b      	ldrb	r3, [r7, #8]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fa47 	bl	8002ab0 <LCD_Send_Data>
 8002622:	7a7b      	ldrb	r3, [r7, #9]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fa43 	bl	8002ab0 <LCD_Send_Data>
                    break;
 800262a:	e046      	b.n	80026ba <adjustTime+0x476>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 800262c:	2020      	movs	r0, #32
 800262e:	f000 fa3f 	bl	8002ab0 <LCD_Send_Data>
 8002632:	2020      	movs	r0, #32
 8002634:	f000 fa3c 	bl	8002ab0 <LCD_Send_Data>
                    break;
 8002638:	e03f      	b.n	80026ba <adjustTime+0x476>
                case 5U:
                    /* Set year */
                    if (prev_blue_ctr != blue_ctr) {
 800263a:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <adjustTime+0x4a0>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002644:	429a      	cmp	r2, r3
 8002646:	d00f      	beq.n	8002668 <adjustTime+0x424>
                        sDate.Year = (uint8_t)((sDate.Year + 1U) % 100U);
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	4b26      	ldr	r3, [pc, #152]	@ (80026e8 <adjustTime+0x4a4>)
 800264e:	fba3 1302 	umull	r1, r3, r3, r2
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2164      	movs	r1, #100	@ 0x64
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	73fb      	strb	r3, [r7, #15]
                        prev_blue_ctr = blue_ctr;
 8002660:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <adjustTime+0x4a0>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    }
                    (void)sprintf(temp, "%02d", (sDate.Year % MAX_TEMP_VAL));
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	4a1f      	ldr	r2, [pc, #124]	@ (80026e8 <adjustTime+0x4a4>)
 800266c:	fba2 1203 	umull	r1, r2, r2, r3
 8002670:	0952      	lsrs	r2, r2, #5
 8002672:	2164      	movs	r1, #100	@ 0x64
 8002674:	fb01 f202 	mul.w	r2, r1, r2
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	491a      	ldr	r1, [pc, #104]	@ (80026ec <adjustTime+0x4a8>)
 8002684:	4618      	mov	r0, r3
 8002686:	f005 fb33 	bl	8007cf0 <siprintf>
                    LCD_Send_Command(CUR_BEGIN_UPPER_TENTH);
 800268a:	2089      	movs	r0, #137	@ 0x89
 800268c:	f000 fa02 	bl	8002a94 <LCD_Send_Command>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 8002690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <adjustTime+0x466>
 8002698:	7a3b      	ldrb	r3, [r7, #8]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fa08 	bl	8002ab0 <LCD_Send_Data>
 80026a0:	7a7b      	ldrb	r3, [r7, #9]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fa04 	bl	8002ab0 <LCD_Send_Data>
                    break;
 80026a8:	e007      	b.n	80026ba <adjustTime+0x476>
                    UPDATE_POSITION(flipper, temp[0], temp[1]);
 80026aa:	2020      	movs	r0, #32
 80026ac:	f000 fa00 	bl	8002ab0 <LCD_Send_Data>
 80026b0:	2020      	movs	r0, #32
 80026b2:	f000 f9fd 	bl	8002ab0 <LCD_Send_Data>
                    break;
 80026b6:	e000      	b.n	80026ba <adjustTime+0x476>
                default:
                    /* Handle invalid button press count */
                    break;
 80026b8:	bf00      	nop
            }

            flipper = (uint8_t)(~flipper);
 80026ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026be:	43db      	mvns	r3, r3
 80026c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            taskYIELD();
 80026c4:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <adjustTime+0x4ac>)
 80026c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	f3bf 8f6f 	isb	sy
            HAL_Delay(SHORT_TIME_DELAY);
 80026d4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80026d8:	f000 fa76 	bl	8002bc8 <HAL_Delay>
            DEBUG_PRINT("%d, %d %d\n", yellow_ctr, blue_ctr, green_ctr);
 80026dc:	e5eb      	b.n	80022b6 <adjustTime+0x72>
        }
        exitFunctionMode();
 80026de:	f000 f825 	bl	800272c <exitFunctionMode>
    while (true) {
 80026e2:	e5b3      	b.n	800224c <adjustTime+0x8>
 80026e4:	200000dd 	.word	0x200000dd
 80026e8:	51eb851f 	.word	0x51eb851f
 80026ec:	080092b8 	.word	0x080092b8
 80026f0:	e000ed04 	.word	0xe000ed04

080026f4 <enterFunctionMode>:
    }
}

void enterFunctionMode (void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
    taskENTER_CRITICAL();
 80026f8:	f004 fe74 	bl	80073e4 <vPortEnterCritical>

    blue_ctr = 0U;
 80026fc:	4b07      	ldr	r3, [pc, #28]	@ (800271c <enterFunctionMode+0x28>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
    green_ctr = 0U;
 8002702:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <enterFunctionMode+0x2c>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
    yellow_ctr = 0U;
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <enterFunctionMode+0x30>)
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
    function_mode = 1U;
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <enterFunctionMode+0x34>)
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]

    taskEXIT_CRITICAL();
 8002714:	f004 fe80 	bl	8007418 <vPortExitCritical>
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200000dd 	.word	0x200000dd
 8002720:	200000de 	.word	0x200000de
 8002724:	200000df 	.word	0x200000df
 8002728:	200000dc 	.word	0x200000dc

0800272c <exitFunctionMode>:

void exitFunctionMode (void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
    taskENTER_CRITICAL();
 8002730:	f004 fe58 	bl	80073e4 <vPortEnterCritical>

    blue_ctr = 0U;
 8002734:	4b07      	ldr	r3, [pc, #28]	@ (8002754 <exitFunctionMode+0x28>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
    green_ctr = 0U;
 800273a:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <exitFunctionMode+0x2c>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
    yellow_ctr = 0U;
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <exitFunctionMode+0x30>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
    function_mode = 0U;
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <exitFunctionMode+0x34>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]

    taskEXIT_CRITICAL();
 800274c:	f004 fe64 	bl	8007418 <vPortExitCritical>
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200000dd 	.word	0x200000dd
 8002758:	200000de 	.word	0x200000de
 800275c:	200000df 	.word	0x200000df
 8002760:	200000dc 	.word	0x200000dc

08002764 <stopwatchInit>:

void stopwatchInit (void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
    LCD_Send_Command(CLEAR_DISPLAY);
 8002768:	2001      	movs	r0, #1
 800276a:	f000 f993 	bl	8002a94 <LCD_Send_Command>
    LCD_Send_Command(CUR_BEGIN_UPPER_SECOND);
 800276e:	2081      	movs	r0, #129	@ 0x81
 8002770:	f000 f990 	bl	8002a94 <LCD_Send_Command>
    LCD_Send_Data_Upper('T');
 8002774:	2054      	movs	r0, #84	@ 0x54
 8002776:	f000 f9a9 	bl	8002acc <LCD_Send_Data_Upper>
    LCD_Send_Data_Upper('i');
 800277a:	2069      	movs	r0, #105	@ 0x69
 800277c:	f000 f9a6 	bl	8002acc <LCD_Send_Data_Upper>
    LCD_Send_Data_Upper('m');
 8002780:	206d      	movs	r0, #109	@ 0x6d
 8002782:	f000 f9a3 	bl	8002acc <LCD_Send_Data_Upper>
    LCD_Send_Data_Upper('e');
 8002786:	2065      	movs	r0, #101	@ 0x65
 8002788:	f000 f9a0 	bl	8002acc <LCD_Send_Data_Upper>
    LCD_Send_Data_Upper('r');
 800278c:	2072      	movs	r0, #114	@ 0x72
 800278e:	f000 f99d 	bl	8002acc <LCD_Send_Data_Upper>
    LCD_Send_Data_Lower('0');
 8002792:	2030      	movs	r0, #48	@ 0x30
 8002794:	f000 f9b8 	bl	8002b08 <LCD_Send_Data_Lower>
    LCD_Send_Data_Lower('0');
 8002798:	2030      	movs	r0, #48	@ 0x30
 800279a:	f000 f9b5 	bl	8002b08 <LCD_Send_Data_Lower>
    LCD_Send_Data_Lower(':');
 800279e:	203a      	movs	r0, #58	@ 0x3a
 80027a0:	f000 f9b2 	bl	8002b08 <LCD_Send_Data_Lower>
    LCD_Send_Data_Lower('0');
 80027a4:	2030      	movs	r0, #48	@ 0x30
 80027a6:	f000 f9af 	bl	8002b08 <LCD_Send_Data_Lower>
    LCD_Send_Data_Lower('0');
 80027aa:	2030      	movs	r0, #48	@ 0x30
 80027ac:	f000 f9ac 	bl	8002b08 <LCD_Send_Data_Lower>
    LCD_Send_Data_Lower(':');
 80027b0:	203a      	movs	r0, #58	@ 0x3a
 80027b2:	f000 f9a9 	bl	8002b08 <LCD_Send_Data_Lower>
    LCD_Send_Data_Lower('0');
 80027b6:	2030      	movs	r0, #48	@ 0x30
 80027b8:	f000 f9a6 	bl	8002b08 <LCD_Send_Data_Lower>
    LCD_Send_Data_Lower('0');
 80027bc:	2030      	movs	r0, #48	@ 0x30
 80027be:	f000 f9a3 	bl	8002b08 <LCD_Send_Data_Lower>
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <alarmInit>:

void alarmInit (void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
    LCD_Send_Command(CLEAR_DISPLAY);
 80027cc:	2001      	movs	r0, #1
 80027ce:	f000 f961 	bl	8002a94 <LCD_Send_Command>
    LCD_Send_Command(CUR_BEGIN_UPPER_SECOND);
 80027d2:	2081      	movs	r0, #129	@ 0x81
 80027d4:	f000 f95e 	bl	8002a94 <LCD_Send_Command>
    LCD_Send_Data_Upper('A');
 80027d8:	2041      	movs	r0, #65	@ 0x41
 80027da:	f000 f977 	bl	8002acc <LCD_Send_Data_Upper>
    LCD_Send_Data_Upper('l');
 80027de:	206c      	movs	r0, #108	@ 0x6c
 80027e0:	f000 f974 	bl	8002acc <LCD_Send_Data_Upper>
    LCD_Send_Data_Upper('a');
 80027e4:	2061      	movs	r0, #97	@ 0x61
 80027e6:	f000 f971 	bl	8002acc <LCD_Send_Data_Upper>
    LCD_Send_Data_Upper('r');
 80027ea:	2072      	movs	r0, #114	@ 0x72
 80027ec:	f000 f96e 	bl	8002acc <LCD_Send_Data_Upper>
    LCD_Send_Data_Upper('m');
 80027f0:	206d      	movs	r0, #109	@ 0x6d
 80027f2:	f000 f96b 	bl	8002acc <LCD_Send_Data_Upper>
    if (toggle_chime_function != 0U) {
 80027f6:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <alarmInit+0x64>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <alarmInit+0x4c>
		LCD_Send_Command(CUR_BEGIN_LOWER_SIXTEEN);
 8002800:	20cf      	movs	r0, #207	@ 0xcf
 8002802:	f000 f947 	bl	8002a94 <LCD_Send_Command>
		LCD_Send_Data(BELL_ASCII);
 8002806:	2007      	movs	r0, #7
 8002808:	f000 f952 	bl	8002ab0 <LCD_Send_Data>
		DEBUG_PRINT("%c", BELL_ASCII);
 800280c:	2007      	movs	r0, #7
 800280e:	f005 fa09 	bl	8007c24 <putchar>
	} else {
		LCD_Send_Command(CUR_BEGIN_LOWER_SIXTEEN);
		LCD_Send_Data(EMPTY);
		DEBUG_PRINT("%c", EMPTY);
	}
}
 8002812:	e008      	b.n	8002826 <alarmInit+0x5e>
		LCD_Send_Command(CUR_BEGIN_LOWER_SIXTEEN);
 8002814:	20cf      	movs	r0, #207	@ 0xcf
 8002816:	f000 f93d 	bl	8002a94 <LCD_Send_Command>
		LCD_Send_Data(EMPTY);
 800281a:	2020      	movs	r0, #32
 800281c:	f000 f948 	bl	8002ab0 <LCD_Send_Data>
		DEBUG_PRINT("%c", EMPTY);
 8002820:	2020      	movs	r0, #32
 8002822:	f005 f9ff 	bl	8007c24 <putchar>
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200000e0 	.word	0x200000e0

08002830 <getDaysInMonth>:

uint8_t getDaysInMonth (uint8_t month, uint8_t year)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	460a      	mov	r2, r1
 800283a:	71fb      	strb	r3, [r7, #7]
 800283c:	4613      	mov	r3, r2
 800283e:	71bb      	strb	r3, [r7, #6]
    uint8_t days;

    switch (month) {
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	bf8c      	ite	hi
 8002846:	2201      	movhi	r2, #1
 8002848:	2200      	movls	r2, #0
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	2a00      	cmp	r2, #0
 800284e:	d149      	bne.n	80028e4 <getDaysInMonth+0xb4>
 8002850:	2201      	movs	r2, #1
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	f241 52aa 	movw	r2, #5546	@ 0x15aa
 800285a:	401a      	ands	r2, r3
 800285c:	2a00      	cmp	r2, #0
 800285e:	bf14      	ite	ne
 8002860:	2201      	movne	r2, #1
 8002862:	2200      	moveq	r2, #0
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	2a00      	cmp	r2, #0
 8002868:	d112      	bne.n	8002890 <getDaysInMonth+0x60>
 800286a:	f403 6225 	and.w	r2, r3, #2640	@ 0xa50
 800286e:	2a00      	cmp	r2, #0
 8002870:	bf14      	ite	ne
 8002872:	2201      	movne	r2, #1
 8002874:	2200      	moveq	r2, #0
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	2a00      	cmp	r2, #0
 800287a:	d10c      	bne.n	8002896 <getDaysInMonth+0x66>
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <getDaysInMonth+0x6c>
 800288e:	e029      	b.n	80028e4 <getDaysInMonth+0xb4>
        case 1U: case 3U: case 5U: case 7U: case 8U: case 10U: case 12U:
            days = 31U;
 8002890:	231f      	movs	r3, #31
 8002892:	73fb      	strb	r3, [r7, #15]
            break;
 8002894:	e029      	b.n	80028ea <getDaysInMonth+0xba>
        case 4U: case 6U: case 9U: case 11U:
            days = 30U;
 8002896:	231e      	movs	r3, #30
 8002898:	73fb      	strb	r3, [r7, #15]
            break;
 800289a:	e026      	b.n	80028ea <getDaysInMonth+0xba>
        case 2U:
            /* Check for leap year */
            if (((year % 4U == 0U) && (year % 100U != 0U)) || (year % 400U == 0U)) {
 800289c:	79bb      	ldrb	r3, [r7, #6]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10b      	bne.n	80028c0 <getDaysInMonth+0x90>
 80028a8:	79bb      	ldrb	r3, [r7, #6]
 80028aa:	4a13      	ldr	r2, [pc, #76]	@ (80028f8 <getDaysInMonth+0xc8>)
 80028ac:	fba2 1203 	umull	r1, r2, r2, r3
 80028b0:	0952      	lsrs	r2, r2, #5
 80028b2:	2164      	movs	r1, #100	@ 0x64
 80028b4:	fb01 f202 	mul.w	r2, r1, r2
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <getDaysInMonth+0xa8>
 80028c0:	79ba      	ldrb	r2, [r7, #6]
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <getDaysInMonth+0xc8>)
 80028c4:	fba3 1302 	umull	r1, r3, r3, r2
 80028c8:	09db      	lsrs	r3, r3, #7
 80028ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <getDaysInMonth+0xae>
                days = 29U;
 80028d8:	231d      	movs	r3, #29
 80028da:	73fb      	strb	r3, [r7, #15]
            } else {
                days = 28U;
            }
            break;
 80028dc:	e005      	b.n	80028ea <getDaysInMonth+0xba>
                days = 28U;
 80028de:	231c      	movs	r3, #28
 80028e0:	73fb      	strb	r3, [r7, #15]
            break;
 80028e2:	e002      	b.n	80028ea <getDaysInMonth+0xba>
        default:
            days = 0U; /* Invalid month */
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]
            break;
 80028e8:	bf00      	nop
    }

    return days;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	51eb851f 	.word	0x51eb851f

080028fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002934 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002900:	f7fe feaa 	bl	8001658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002904:	480c      	ldr	r0, [pc, #48]	@ (8002938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002906:	490d      	ldr	r1, [pc, #52]	@ (800293c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800290c:	e002      	b.n	8002914 <LoopCopyDataInit>

0800290e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002912:	3304      	adds	r3, #4

08002914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002918:	d3f9      	bcc.n	800290e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291a:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800291c:	4c0a      	ldr	r4, [pc, #40]	@ (8002948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002920:	e001      	b.n	8002926 <LoopFillZerobss>

08002922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002924:	3204      	adds	r2, #4

08002926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002928:	d3fb      	bcc.n	8002922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800292a:	f005 fb27 	bl	8007f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800292e:	f7fd fe17 	bl	8000560 <main>
  bx  lr    
 8002932:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800293c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002940:	080094b0 	.word	0x080094b0
  ldr r2, =_sbss
 8002944:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002948:	200032c8 	.word	0x200032c8

0800294c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC_IRQHandler>

0800294e <LCD_Init>:


static uint8_t Line_Position = 0;

void LCD_Init (void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	af00      	add	r7, sp, #0
    HAL_Delay(20); // Wait for LCD to power up
 8002952:	2014      	movs	r0, #20
 8002954:	f000 f938 	bl	8002bc8 <HAL_Delay>

    LCD_Send_Command(FOUR_BIT_MODE); // Initialize in 4-bit mode
 8002958:	2002      	movs	r0, #2
 800295a:	f000 f89b 	bl	8002a94 <LCD_Send_Command>
	LCD_Send_Command(TWO_BY_FIVE_BY_SEVEN); // 2 lines, 5x7 matrix
 800295e:	2028      	movs	r0, #40	@ 0x28
 8002960:	f000 f898 	bl	8002a94 <LCD_Send_Command>
	LCD_Send_Command(DISPLAY_ON_CUR_OFF); // Display on, cursor off
 8002964:	200c      	movs	r0, #12
 8002966:	f000 f895 	bl	8002a94 <LCD_Send_Command>
	LCD_Send_Command(INCREMENT_CURSOR); // Increment cursor
 800296a:	2006      	movs	r0, #6
 800296c:	f000 f892 	bl	8002a94 <LCD_Send_Command>
	LCD_Send_Command(CLEAR_DISPLAY); // Clear display
 8002970:	2001      	movs	r0, #1
 8002972:	f000 f88f 	bl	8002a94 <LCD_Send_Command>
	HAL_Delay(2);
 8002976:	2002      	movs	r0, #2
 8002978:	f000 f926 	bl	8002bc8 <HAL_Delay>

	LCD_Send_Command(CUR_BEGIN_UPPER_SECOND); // Move cursor to the beginning
 800297c:	2081      	movs	r0, #129	@ 0x81
 800297e:	f000 f889 	bl	8002a94 <LCD_Send_Command>
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <LCD_Send>:

void LCD_Send (uint8_t cmd, GPIO_PinState mode)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	460a      	mov	r2, r1
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	4613      	mov	r3, r2
 8002996:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, mode); // RS = 0 for command, 1 for data
 8002998:	79bb      	ldrb	r3, [r7, #6]
 800299a:	461a      	mov	r2, r3
 800299c:	2101      	movs	r1, #1
 800299e:	483c      	ldr	r0, [pc, #240]	@ (8002a90 <LCD_Send+0x108>)
 80029a0:	f000 fd60 	bl	8003464 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // RW = 0 for write
 80029a4:	2200      	movs	r2, #0
 80029a6:	2102      	movs	r1, #2
 80029a8:	4839      	ldr	r0, [pc, #228]	@ (8002a90 <LCD_Send+0x108>)
 80029aa:	f000 fd5b 	bl	8003464 <HAL_GPIO_WritePin>

    // Send higher nibble
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, (cmd & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	111b      	asrs	r3, r3, #4
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	2108      	movs	r1, #8
 80029be:	4834      	ldr	r0, [pc, #208]	@ (8002a90 <LCD_Send+0x108>)
 80029c0:	f000 fd50 	bl	8003464 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (cmd & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	115b      	asrs	r3, r3, #5
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	2110      	movs	r1, #16
 80029d4:	482e      	ldr	r0, [pc, #184]	@ (8002a90 <LCD_Send+0x108>)
 80029d6:	f000 fd45 	bl	8003464 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (cmd & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	119b      	asrs	r3, r3, #6
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	2120      	movs	r1, #32
 80029ea:	4829      	ldr	r0, [pc, #164]	@ (8002a90 <LCD_Send+0x108>)
 80029ec:	f000 fd3a 	bl	8003464 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (cmd & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	09db      	lsrs	r3, r3, #7
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	2140      	movs	r1, #64	@ 0x40
 80029fa:	4825      	ldr	r0, [pc, #148]	@ (8002a90 <LCD_Send+0x108>)
 80029fc:	f000 fd32 	bl	8003464 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // E = 1
 8002a00:	2201      	movs	r2, #1
 8002a02:	2104      	movs	r1, #4
 8002a04:	4822      	ldr	r0, [pc, #136]	@ (8002a90 <LCD_Send+0x108>)
 8002a06:	f000 fd2d 	bl	8003464 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f000 f8dc 	bl	8002bc8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // E = 0
 8002a10:	2200      	movs	r2, #0
 8002a12:	2104      	movs	r1, #4
 8002a14:	481e      	ldr	r0, [pc, #120]	@ (8002a90 <LCD_Send+0x108>)
 8002a16:	f000 fd25 	bl	8003464 <HAL_GPIO_WritePin>

    // Send lower nibble
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, (cmd & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	2108      	movs	r1, #8
 8002a26:	481a      	ldr	r0, [pc, #104]	@ (8002a90 <LCD_Send+0x108>)
 8002a28:	f000 fd1c 	bl	8003464 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (cmd & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	105b      	asrs	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2110      	movs	r1, #16
 8002a3c:	4814      	ldr	r0, [pc, #80]	@ (8002a90 <LCD_Send+0x108>)
 8002a3e:	f000 fd11 	bl	8003464 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (cmd & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	109b      	asrs	r3, r3, #2
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2120      	movs	r1, #32
 8002a52:	480f      	ldr	r0, [pc, #60]	@ (8002a90 <LCD_Send+0x108>)
 8002a54:	f000 fd06 	bl	8003464 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (cmd & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	10db      	asrs	r3, r3, #3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	2140      	movs	r1, #64	@ 0x40
 8002a68:	4809      	ldr	r0, [pc, #36]	@ (8002a90 <LCD_Send+0x108>)
 8002a6a:	f000 fcfb 	bl	8003464 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // E = 1
 8002a6e:	2201      	movs	r2, #1
 8002a70:	2104      	movs	r1, #4
 8002a72:	4807      	ldr	r0, [pc, #28]	@ (8002a90 <LCD_Send+0x108>)
 8002a74:	f000 fcf6 	bl	8003464 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f000 f8a5 	bl	8002bc8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // E = 0
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2104      	movs	r1, #4
 8002a82:	4803      	ldr	r0, [pc, #12]	@ (8002a90 <LCD_Send+0x108>)
 8002a84:	f000 fcee 	bl	8003464 <HAL_GPIO_WritePin>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40020000 	.word	0x40020000

08002a94 <LCD_Send_Command>:

void LCD_Send_Command (uint8_t cmd)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
	LCD_Send(cmd, GPIO_PIN_RESET);
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff70 	bl	8002988 <LCD_Send>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <LCD_Send_Data>:

void LCD_Send_Data (uint8_t cmd)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
	LCD_Send(cmd, GPIO_PIN_SET);
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2101      	movs	r1, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff62 	bl	8002988 <LCD_Send>
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <LCD_Send_Data_Upper>:

void LCD_Send_Data_Upper (uint8_t cmd)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
	if (Line_Position) {
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <LCD_Send_Data_Upper+0x38>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <LCD_Send_Data_Upper+0x24>
		LCD_Send_Command(CUR_BEGIN_UPPER_SECOND);
 8002ade:	2081      	movs	r0, #129	@ 0x81
 8002ae0:	f7ff ffd8 	bl	8002a94 <LCD_Send_Command>
		Line_Position = ~Line_Position;
 8002ae4:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <LCD_Send_Data_Upper+0x38>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <LCD_Send_Data_Upper+0x38>)
 8002aee:	701a      	strb	r2, [r3, #0]
	}
	LCD_Send(cmd, GPIO_PIN_SET);
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	2101      	movs	r1, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff47 	bl	8002988 <LCD_Send>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000132 	.word	0x20000132

08002b08 <LCD_Send_Data_Lower>:

void LCD_Send_Data_Lower (uint8_t cmd)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
	if (!Line_Position) {
 8002b12:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <LCD_Send_Data_Lower+0x38>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d108      	bne.n	8002b2c <LCD_Send_Data_Lower+0x24>
		LCD_Send_Command(CUR_BEGIN_LOWER_SECOND);
 8002b1a:	20c1      	movs	r0, #193	@ 0xc1
 8002b1c:	f7ff ffba 	bl	8002a94 <LCD_Send_Command>
		Line_Position = ~Line_Position;
 8002b20:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <LCD_Send_Data_Lower+0x38>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b05      	ldr	r3, [pc, #20]	@ (8002b40 <LCD_Send_Data_Lower+0x38>)
 8002b2a:	701a      	strb	r2, [r3, #0]
	}
	LCD_Send(cmd, GPIO_PIN_SET);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff29 	bl	8002988 <LCD_Send>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000132 	.word	0x20000132

08002b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b48:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <HAL_Init+0x40>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b84 <HAL_Init+0x40>)
 8002b4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_Init+0x40>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <HAL_Init+0x40>)
 8002b5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b60:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <HAL_Init+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a07      	ldr	r2, [pc, #28]	@ (8002b84 <HAL_Init+0x40>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f000 f8fc 	bl	8002d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b72:	200f      	movs	r0, #15
 8002b74:	f7fe fafc 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b78:	f7fe fa9a 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023c00 	.word	0x40023c00

08002b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <HAL_IncTick+0x20>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <HAL_IncTick+0x24>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	4a04      	ldr	r2, [pc, #16]	@ (8002bac <HAL_IncTick+0x24>)
 8002b9a:	6013      	str	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000008 	.word	0x20000008
 8002bac:	20000134 	.word	0x20000134

08002bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <HAL_GetTick+0x14>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000134 	.word	0x20000134

08002bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd0:	f7ff ffee 	bl	8002bb0 <HAL_GetTick>
 8002bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d005      	beq.n	8002bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002be2:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <HAL_Delay+0x44>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bee:	bf00      	nop
 8002bf0:	f7ff ffde 	bl	8002bb0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d8f7      	bhi.n	8002bf0 <HAL_Delay+0x28>
  {
  }
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000008 	.word	0x20000008

08002c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c42:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	60d3      	str	r3, [r2, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c5c:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <__NVIC_GetPriorityGrouping+0x18>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	f003 0307 	and.w	r3, r3, #7
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	db0b      	blt.n	8002c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	4907      	ldr	r1, [pc, #28]	@ (8002cac <__NVIC_EnableIRQ+0x38>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2001      	movs	r0, #1
 8002c96:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db0a      	blt.n	8002cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	490c      	ldr	r1, [pc, #48]	@ (8002cfc <__NVIC_SetPriority+0x4c>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd8:	e00a      	b.n	8002cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4908      	ldr	r1, [pc, #32]	@ (8002d00 <__NVIC_SetPriority+0x50>)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	761a      	strb	r2, [r3, #24]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	@ 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f1c3 0307 	rsb	r3, r3, #7
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf28      	it	cs
 8002d22:	2304      	movcs	r3, #4
 8002d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d902      	bls.n	8002d34 <NVIC_EncodePriority+0x30>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3b03      	subs	r3, #3
 8002d32:	e000      	b.n	8002d36 <NVIC_EncodePriority+0x32>
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	401a      	ands	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43d9      	mvns	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	4313      	orrs	r3, r2
         );
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	@ 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ff4c 	bl	8002c10 <__NVIC_SetPriorityGrouping>
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d92:	f7ff ff61 	bl	8002c58 <__NVIC_GetPriorityGrouping>
 8002d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	6978      	ldr	r0, [r7, #20]
 8002d9e:	f7ff ffb1 	bl	8002d04 <NVIC_EncodePriority>
 8002da2:	4602      	mov	r2, r0
 8002da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff80 	bl	8002cb0 <__NVIC_SetPriority>
}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff54 	bl	8002c74 <__NVIC_EnableIRQ>
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002dde:	4b49      	ldr	r3, [pc, #292]	@ (8002f04 <HAL_FLASH_IRQHandler+0x130>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d020      	beq.n	8002e2c <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002dea:	4b47      	ldr	r3, [pc, #284]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d107      	bne.n	8002e04 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002df4:	4b44      	ldr	r3, [pc, #272]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8002dfa:	4b43      	ldr	r3, [pc, #268]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	e00b      	b.n	8002e1c <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002e04:	4b40      	ldr	r3, [pc, #256]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d103      	bne.n	8002e16 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8002e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	e002      	b.n	8002e1c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002e16:	4b3c      	ldr	r3, [pc, #240]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002e1c:	f000 f88a 	bl	8002f34 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f87d 	bl	8002f20 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e26:	4b38      	ldr	r3, [pc, #224]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002e2c:	4b35      	ldr	r3, [pc, #212]	@ (8002f04 <HAL_FLASH_IRQHandler+0x130>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d04a      	beq.n	8002ece <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e38:	4b32      	ldr	r3, [pc, #200]	@ (8002f04 <HAL_FLASH_IRQHandler+0x130>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002e3e:	4b32      	ldr	r3, [pc, #200]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d12d      	bne.n	8002ea4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002e48:	4b2f      	ldr	r3, [pc, #188]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e50:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8002e52:	4b2d      	ldr	r3, [pc, #180]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d015      	beq.n	8002e86 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f853 	bl	8002f0c <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8002e66:	4b28      	ldr	r3, [pc, #160]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	4a26      	ldr	r2, [pc, #152]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e6e:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8002e70:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002e76:	4b24      	ldr	r3, [pc, #144]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e78:	7a1b      	ldrb	r3, [r3, #8]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8ae 	bl	8002fe0 <FLASH_Erase_Sector>
 8002e84:	e023      	b.n	8002ece <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e92:	4b1d      	ldr	r3, [pc, #116]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002e98:	f000 f8ea 	bl	8003070 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f835 	bl	8002f0c <HAL_FLASH_EndOfOperationCallback>
 8002ea2:	e014      	b.n	8002ece <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002ea4:	4b18      	ldr	r3, [pc, #96]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d107      	bne.n	8002ebe <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002eae:	f000 f8df 	bl	8003070 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f828 	bl	8002f0c <HAL_FLASH_EndOfOperationCallback>
 8002ebc:	e004      	b.n	8002ec8 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002ebe:	4b12      	ldr	r3, [pc, #72]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f822 	bl	8002f0c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002ece:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <HAL_FLASH_IRQHandler+0x134>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d111      	bne.n	8002efc <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f04 <HAL_FLASH_IRQHandler+0x130>)
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	4a09      	ldr	r2, [pc, #36]	@ (8002f04 <HAL_FLASH_IRQHandler+0x130>)
 8002ede:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ee2:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002ee4:	4b07      	ldr	r3, [pc, #28]	@ (8002f04 <HAL_FLASH_IRQHandler+0x130>)
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	4a06      	ldr	r2, [pc, #24]	@ (8002f04 <HAL_FLASH_IRQHandler+0x130>)
 8002eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eee:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002ef0:	4b04      	ldr	r3, [pc, #16]	@ (8002f04 <HAL_FLASH_IRQHandler+0x130>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	4a03      	ldr	r2, [pc, #12]	@ (8002f04 <HAL_FLASH_IRQHandler+0x130>)
 8002ef6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002efa:	6113      	str	r3, [r2, #16]
  }
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023c00 	.word	0x40023c00
 8002f08:	20000138 	.word	0x20000138

08002f0c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002f38:	4b27      	ldr	r3, [pc, #156]	@ (8002fd8 <FLASH_SetErrorCode+0xa4>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f44:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <FLASH_SetErrorCode+0xa8>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f043 0310 	orr.w	r3, r3, #16
 8002f4c:	4a23      	ldr	r2, [pc, #140]	@ (8002fdc <FLASH_SetErrorCode+0xa8>)
 8002f4e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002f50:	4b21      	ldr	r3, [pc, #132]	@ (8002fd8 <FLASH_SetErrorCode+0xa4>)
 8002f52:	2210      	movs	r2, #16
 8002f54:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002f56:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <FLASH_SetErrorCode+0xa4>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f62:	4b1e      	ldr	r3, [pc, #120]	@ (8002fdc <FLASH_SetErrorCode+0xa8>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f043 0308 	orr.w	r3, r3, #8
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fdc <FLASH_SetErrorCode+0xa8>)
 8002f6c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <FLASH_SetErrorCode+0xa4>)
 8002f70:	2220      	movs	r2, #32
 8002f72:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002f74:	4b18      	ldr	r3, [pc, #96]	@ (8002fd8 <FLASH_SetErrorCode+0xa4>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002f80:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <FLASH_SetErrorCode+0xa8>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	4a14      	ldr	r2, [pc, #80]	@ (8002fdc <FLASH_SetErrorCode+0xa8>)
 8002f8a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002f8c:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <FLASH_SetErrorCode+0xa4>)
 8002f8e:	2240      	movs	r2, #64	@ 0x40
 8002f90:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002f92:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <FLASH_SetErrorCode+0xa4>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <FLASH_SetErrorCode+0xa8>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f043 0302 	orr.w	r3, r3, #2
 8002fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8002fdc <FLASH_SetErrorCode+0xa8>)
 8002fa8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002faa:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <FLASH_SetErrorCode+0xa4>)
 8002fac:	2280      	movs	r2, #128	@ 0x80
 8002fae:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002fb0:	4b09      	ldr	r3, [pc, #36]	@ (8002fd8 <FLASH_SetErrorCode+0xa4>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002fbc:	4b07      	ldr	r3, [pc, #28]	@ (8002fdc <FLASH_SetErrorCode+0xa8>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f043 0320 	orr.w	r3, r3, #32
 8002fc4:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <FLASH_SetErrorCode+0xa8>)
 8002fc6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <FLASH_SetErrorCode+0xa4>)
 8002fca:	2202      	movs	r2, #2
 8002fcc:	60da      	str	r2, [r3, #12]
  }
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40023c00 	.word	0x40023c00
 8002fdc:	20000138 	.word	0x20000138

08002fe0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e010      	b.n	800301e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d103      	bne.n	800300a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e009      	b.n	800301e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d103      	bne.n	8003018 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e002      	b.n	800301e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003018:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800301c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800301e:	4b13      	ldr	r3, [pc, #76]	@ (800306c <FLASH_Erase_Sector+0x8c>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	4a12      	ldr	r2, [pc, #72]	@ (800306c <FLASH_Erase_Sector+0x8c>)
 8003024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003028:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800302a:	4b10      	ldr	r3, [pc, #64]	@ (800306c <FLASH_Erase_Sector+0x8c>)
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	490f      	ldr	r1, [pc, #60]	@ (800306c <FLASH_Erase_Sector+0x8c>)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <FLASH_Erase_Sector+0x8c>)
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	4a0c      	ldr	r2, [pc, #48]	@ (800306c <FLASH_Erase_Sector+0x8c>)
 800303c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003040:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <FLASH_Erase_Sector+0x8c>)
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4313      	orrs	r3, r2
 800304c:	4a07      	ldr	r2, [pc, #28]	@ (800306c <FLASH_Erase_Sector+0x8c>)
 800304e:	f043 0302 	orr.w	r3, r3, #2
 8003052:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <FLASH_Erase_Sector+0x8c>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	4a04      	ldr	r2, [pc, #16]	@ (800306c <FLASH_Erase_Sector+0x8c>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305e:	6113      	str	r3, [r2, #16]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40023c00 	.word	0x40023c00

08003070 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003074:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003080:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1c      	ldr	r2, [pc, #112]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 8003086:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800308a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800308c:	4b1a      	ldr	r3, [pc, #104]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a19      	ldr	r2, [pc, #100]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 8003092:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a16      	ldr	r2, [pc, #88]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 800309e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a4:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a13      	ldr	r2, [pc, #76]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d017      	beq.n	80030ec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80030bc:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0d      	ldr	r2, [pc, #52]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030c6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a07      	ldr	r2, [pc, #28]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030de:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a04      	ldr	r2, [pc, #16]	@ (80030f8 <FLASH_FlushCaches+0x88>)
 80030e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ea:	6013      	str	r3, [r2, #0]
  }
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00

080030fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	@ 0x24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	e16b      	b.n	80033f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	429a      	cmp	r2, r3
 8003132:	f040 815a 	bne.w	80033ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d005      	beq.n	800314e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800314a:	2b02      	cmp	r3, #2
 800314c:	d130      	bne.n	80031b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	2203      	movs	r2, #3
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 0201 	and.w	r2, r3, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d017      	beq.n	80031ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2203      	movs	r2, #3
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d123      	bne.n	8003240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	08da      	lsrs	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3208      	adds	r2, #8
 8003200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	220f      	movs	r2, #15
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	08da      	lsrs	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3208      	adds	r2, #8
 800323a:	69b9      	ldr	r1, [r7, #24]
 800323c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0203 	and.w	r2, r3, #3
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80b4 	beq.w	80033ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b60      	ldr	r3, [pc, #384]	@ (8003408 <HAL_GPIO_Init+0x30c>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	4a5f      	ldr	r2, [pc, #380]	@ (8003408 <HAL_GPIO_Init+0x30c>)
 800328c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003290:	6453      	str	r3, [r2, #68]	@ 0x44
 8003292:	4b5d      	ldr	r3, [pc, #372]	@ (8003408 <HAL_GPIO_Init+0x30c>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800329e:	4a5b      	ldr	r2, [pc, #364]	@ (800340c <HAL_GPIO_Init+0x310>)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	220f      	movs	r2, #15
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a52      	ldr	r2, [pc, #328]	@ (8003410 <HAL_GPIO_Init+0x314>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d02b      	beq.n	8003322 <HAL_GPIO_Init+0x226>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a51      	ldr	r2, [pc, #324]	@ (8003414 <HAL_GPIO_Init+0x318>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d025      	beq.n	800331e <HAL_GPIO_Init+0x222>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a50      	ldr	r2, [pc, #320]	@ (8003418 <HAL_GPIO_Init+0x31c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01f      	beq.n	800331a <HAL_GPIO_Init+0x21e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4f      	ldr	r2, [pc, #316]	@ (800341c <HAL_GPIO_Init+0x320>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d019      	beq.n	8003316 <HAL_GPIO_Init+0x21a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003420 <HAL_GPIO_Init+0x324>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_GPIO_Init+0x216>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003424 <HAL_GPIO_Init+0x328>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00d      	beq.n	800330e <HAL_GPIO_Init+0x212>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003428 <HAL_GPIO_Init+0x32c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x20e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4b      	ldr	r2, [pc, #300]	@ (800342c <HAL_GPIO_Init+0x330>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_GPIO_Init+0x20a>
 8003302:	2307      	movs	r3, #7
 8003304:	e00e      	b.n	8003324 <HAL_GPIO_Init+0x228>
 8003306:	2308      	movs	r3, #8
 8003308:	e00c      	b.n	8003324 <HAL_GPIO_Init+0x228>
 800330a:	2306      	movs	r3, #6
 800330c:	e00a      	b.n	8003324 <HAL_GPIO_Init+0x228>
 800330e:	2305      	movs	r3, #5
 8003310:	e008      	b.n	8003324 <HAL_GPIO_Init+0x228>
 8003312:	2304      	movs	r3, #4
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x228>
 8003316:	2303      	movs	r3, #3
 8003318:	e004      	b.n	8003324 <HAL_GPIO_Init+0x228>
 800331a:	2302      	movs	r3, #2
 800331c:	e002      	b.n	8003324 <HAL_GPIO_Init+0x228>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_GPIO_Init+0x228>
 8003322:	2300      	movs	r3, #0
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	f002 0203 	and.w	r2, r2, #3
 800332a:	0092      	lsls	r2, r2, #2
 800332c:	4093      	lsls	r3, r2
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003334:	4935      	ldr	r1, [pc, #212]	@ (800340c <HAL_GPIO_Init+0x310>)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003342:	4b3b      	ldr	r3, [pc, #236]	@ (8003430 <HAL_GPIO_Init+0x334>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003366:	4a32      	ldr	r2, [pc, #200]	@ (8003430 <HAL_GPIO_Init+0x334>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800336c:	4b30      	ldr	r3, [pc, #192]	@ (8003430 <HAL_GPIO_Init+0x334>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003390:	4a27      	ldr	r2, [pc, #156]	@ (8003430 <HAL_GPIO_Init+0x334>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003396:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <HAL_GPIO_Init+0x334>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003430 <HAL_GPIO_Init+0x334>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <HAL_GPIO_Init+0x334>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e4:	4a12      	ldr	r2, [pc, #72]	@ (8003430 <HAL_GPIO_Init+0x334>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	f67f ae90 	bls.w	8003118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3724      	adds	r7, #36	@ 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	40013800 	.word	0x40013800
 8003410:	40020000 	.word	0x40020000
 8003414:	40020400 	.word	0x40020400
 8003418:	40020800 	.word	0x40020800
 800341c:	40020c00 	.word	0x40020c00
 8003420:	40021000 	.word	0x40021000
 8003424:	40021400 	.word	0x40021400
 8003428:	40021800 	.word	0x40021800
 800342c:	40021c00 	.word	0x40021c00
 8003430:	40013c00 	.word	0x40013c00

08003434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
 8003450:	e001      	b.n	8003456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003456:	7bfb      	ldrb	r3, [r7, #15]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
 8003470:	4613      	mov	r3, r2
 8003472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003474:	787b      	ldrb	r3, [r7, #1]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003480:	e003      	b.n	800348a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003482:	887b      	ldrh	r3, [r7, #2]
 8003484:	041a      	lsls	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	619a      	str	r2, [r3, #24]
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034a8:	887a      	ldrh	r2, [r7, #2]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4013      	ands	r3, r2
 80034ae:	041a      	lsls	r2, r3, #16
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43d9      	mvns	r1, r3
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	400b      	ands	r3, r1
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	619a      	str	r2, [r3, #24]
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034d6:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034e2:	4a05      	ldr	r2, [pc, #20]	@ (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f806 	bl	80034fc <HAL_GPIO_EXTI_Callback>
  }
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40013c00 	.word	0x40013c00

080034fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e267      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d075      	beq.n	800361e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003532:	4b88      	ldr	r3, [pc, #544]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b04      	cmp	r3, #4
 800353c:	d00c      	beq.n	8003558 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353e:	4b85      	ldr	r3, [pc, #532]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003546:	2b08      	cmp	r3, #8
 8003548:	d112      	bne.n	8003570 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354a:	4b82      	ldr	r3, [pc, #520]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003552:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003556:	d10b      	bne.n	8003570 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	4b7e      	ldr	r3, [pc, #504]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d05b      	beq.n	800361c <HAL_RCC_OscConfig+0x108>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d157      	bne.n	800361c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e242      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003578:	d106      	bne.n	8003588 <HAL_RCC_OscConfig+0x74>
 800357a:	4b76      	ldr	r3, [pc, #472]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a75      	ldr	r2, [pc, #468]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e01d      	b.n	80035c4 <HAL_RCC_OscConfig+0xb0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x98>
 8003592:	4b70      	ldr	r3, [pc, #448]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6f      	ldr	r2, [pc, #444]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b6d      	ldr	r3, [pc, #436]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0xb0>
 80035ac:	4b69      	ldr	r3, [pc, #420]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a68      	ldr	r2, [pc, #416]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b66      	ldr	r3, [pc, #408]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a65      	ldr	r2, [pc, #404]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7ff faf0 	bl	8002bb0 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7ff faec 	bl	8002bb0 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e207      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0xc0>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7ff fadc 	bl	8002bb0 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7ff fad8 	bl	8002bb0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	@ 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e1f3      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	4b51      	ldr	r3, [pc, #324]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0xe8>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d063      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800362a:	4b4a      	ldr	r3, [pc, #296]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003636:	4b47      	ldr	r3, [pc, #284]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800363e:	2b08      	cmp	r3, #8
 8003640:	d11c      	bne.n	800367c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003642:	4b44      	ldr	r3, [pc, #272]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	4b41      	ldr	r3, [pc, #260]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x152>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1c7      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003666:	4b3b      	ldr	r3, [pc, #236]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4937      	ldr	r1, [pc, #220]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	e03a      	b.n	80036f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	4b34      	ldr	r3, [pc, #208]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7ff fa91 	bl	8002bb0 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7ff fa8d 	bl	8002bb0 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e1a8      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4925      	ldr	r1, [pc, #148]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
 80036c4:	e015      	b.n	80036f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c6:	4b24      	ldr	r3, [pc, #144]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7ff fa70 	bl	8002bb0 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d4:	f7ff fa6c 	bl	8002bb0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e187      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d036      	beq.n	800376c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d016      	beq.n	8003734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003706:	4b15      	ldr	r3, [pc, #84]	@ (800375c <HAL_RCC_OscConfig+0x248>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7ff fa50 	bl	8002bb0 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003714:	f7ff fa4c 	bl	8002bb0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e167      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <HAL_RCC_OscConfig+0x240>)
 8003728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x200>
 8003732:	e01b      	b.n	800376c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003734:	4b09      	ldr	r3, [pc, #36]	@ (800375c <HAL_RCC_OscConfig+0x248>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373a:	f7ff fa39 	bl	8002bb0 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	e00e      	b.n	8003760 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003742:	f7ff fa35 	bl	8002bb0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d907      	bls.n	8003760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e150      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
 8003754:	40023800 	.word	0x40023800
 8003758:	42470000 	.word	0x42470000
 800375c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	4b88      	ldr	r3, [pc, #544]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ea      	bne.n	8003742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8097 	beq.w	80038a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b81      	ldr	r3, [pc, #516]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10f      	bne.n	80037aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	4b7d      	ldr	r3, [pc, #500]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	4a7c      	ldr	r2, [pc, #496]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	@ 0x40
 800379a:	4b7a      	ldr	r3, [pc, #488]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037aa:	4b77      	ldr	r3, [pc, #476]	@ (8003988 <HAL_RCC_OscConfig+0x474>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d118      	bne.n	80037e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b6:	4b74      	ldr	r3, [pc, #464]	@ (8003988 <HAL_RCC_OscConfig+0x474>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a73      	ldr	r2, [pc, #460]	@ (8003988 <HAL_RCC_OscConfig+0x474>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c2:	f7ff f9f5 	bl	8002bb0 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ca:	f7ff f9f1 	bl	8002bb0 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e10c      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003988 <HAL_RCC_OscConfig+0x474>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d106      	bne.n	80037fe <HAL_RCC_OscConfig+0x2ea>
 80037f0:	4b64      	ldr	r3, [pc, #400]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f4:	4a63      	ldr	r2, [pc, #396]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fc:	e01c      	b.n	8003838 <HAL_RCC_OscConfig+0x324>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b05      	cmp	r3, #5
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0x30c>
 8003806:	4b5f      	ldr	r3, [pc, #380]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380a:	4a5e      	ldr	r2, [pc, #376]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6713      	str	r3, [r2, #112]	@ 0x70
 8003812:	4b5c      	ldr	r3, [pc, #368]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003816:	4a5b      	ldr	r2, [pc, #364]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	6713      	str	r3, [r2, #112]	@ 0x70
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0x324>
 8003820:	4b58      	ldr	r3, [pc, #352]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003824:	4a57      	ldr	r2, [pc, #348]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	6713      	str	r3, [r2, #112]	@ 0x70
 800382c:	4b55      	ldr	r3, [pc, #340]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003830:	4a54      	ldr	r2, [pc, #336]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003832:	f023 0304 	bic.w	r3, r3, #4
 8003836:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7ff f9b6 	bl	8002bb0 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	e00a      	b.n	800385e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7ff f9b2 	bl	8002bb0 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e0cb      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	4b49      	ldr	r3, [pc, #292]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ee      	beq.n	8003848 <HAL_RCC_OscConfig+0x334>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386c:	f7ff f9a0 	bl	8002bb0 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7ff f99c 	bl	8002bb0 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0b5      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	4b3e      	ldr	r3, [pc, #248]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ee      	bne.n	8003874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4b39      	ldr	r3, [pc, #228]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	4a38      	ldr	r2, [pc, #224]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80a1 	beq.w	80039f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b2:	4b34      	ldr	r3, [pc, #208]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d05c      	beq.n	8003978 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d141      	bne.n	800394a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b31      	ldr	r3, [pc, #196]	@ (800398c <HAL_RCC_OscConfig+0x478>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7ff f970 	bl	8002bb0 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7ff f96c 	bl	8002bb0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e087      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	4b27      	ldr	r3, [pc, #156]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	491b      	ldr	r1, [pc, #108]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391c:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <HAL_RCC_OscConfig+0x478>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003922:	f7ff f945 	bl	8002bb0 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392a:	f7ff f941 	bl	8002bb0 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e05c      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393c:	4b11      	ldr	r3, [pc, #68]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x416>
 8003948:	e054      	b.n	80039f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394a:	4b10      	ldr	r3, [pc, #64]	@ (800398c <HAL_RCC_OscConfig+0x478>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7ff f92e 	bl	8002bb0 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7ff f92a 	bl	8002bb0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e045      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <HAL_RCC_OscConfig+0x470>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x444>
 8003976:	e03d      	b.n	80039f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e038      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
 8003984:	40023800 	.word	0x40023800
 8003988:	40007000 	.word	0x40007000
 800398c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003990:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <HAL_RCC_OscConfig+0x4ec>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d028      	beq.n	80039f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d121      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d11a      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039c0:	4013      	ands	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d111      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	3b01      	subs	r3, #1
 80039da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800

08003a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0cc      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a18:	4b68      	ldr	r3, [pc, #416]	@ (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d90c      	bls.n	8003a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b65      	ldr	r3, [pc, #404]	@ (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b63      	ldr	r3, [pc, #396]	@ (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0b8      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a58:	4b59      	ldr	r3, [pc, #356]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a58      	ldr	r2, [pc, #352]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a70:	4b53      	ldr	r3, [pc, #332]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a52      	ldr	r2, [pc, #328]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a7c:	4b50      	ldr	r3, [pc, #320]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	494d      	ldr	r1, [pc, #308]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d044      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	4b47      	ldr	r3, [pc, #284]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d119      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e07f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e06f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e067      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae2:	4b37      	ldr	r3, [pc, #220]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f023 0203 	bic.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4934      	ldr	r1, [pc, #208]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af4:	f7ff f85c 	bl	8002bb0 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afc:	f7ff f858 	bl	8002bb0 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e04f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 020c 	and.w	r2, r3, #12
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d1eb      	bne.n	8003afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b24:	4b25      	ldr	r3, [pc, #148]	@ (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d20c      	bcs.n	8003b4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b22      	ldr	r3, [pc, #136]	@ (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b20      	ldr	r3, [pc, #128]	@ (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e032      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b58:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4916      	ldr	r1, [pc, #88]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b76:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	490e      	ldr	r1, [pc, #56]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b8a:	f000 f821 	bl	8003bd0 <HAL_RCC_GetSysClockFreq>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	490a      	ldr	r1, [pc, #40]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	5ccb      	ldrb	r3, [r1, r3]
 8003b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba2:	4a09      	ldr	r2, [pc, #36]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ba6:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd fae0 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023c00 	.word	0x40023c00
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	08009454 	.word	0x08009454
 8003bc8:	20000000 	.word	0x20000000
 8003bcc:	20000004 	.word	0x20000004

08003bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd4:	b090      	sub	sp, #64	@ 0x40
 8003bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be8:	4b59      	ldr	r3, [pc, #356]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d00d      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	f200 80a1 	bhi.w	8003d3c <HAL_RCC_GetSysClockFreq+0x16c>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x34>
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d003      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c02:	e09b      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c04:	4b53      	ldr	r3, [pc, #332]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c08:	e09b      	b.n	8003d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c0a:	4b53      	ldr	r3, [pc, #332]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c0e:	e098      	b.n	8003d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c10:	4b4f      	ldr	r3, [pc, #316]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1a:	4b4d      	ldr	r3, [pc, #308]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d028      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c26:	4b4a      	ldr	r3, [pc, #296]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	623b      	str	r3, [r7, #32]
 8003c30:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4b47      	ldr	r3, [pc, #284]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c3c:	fb03 f201 	mul.w	r2, r3, r1
 8003c40:	2300      	movs	r3, #0
 8003c42:	fb00 f303 	mul.w	r3, r0, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	4a43      	ldr	r2, [pc, #268]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c4a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c50:	460a      	mov	r2, r1
 8003c52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c56:	4413      	add	r3, r2
 8003c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	61fa      	str	r2, [r7, #28]
 8003c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c6a:	f7fc fb01 	bl	8000270 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4613      	mov	r3, r2
 8003c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c76:	e053      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c78:	4b35      	ldr	r3, [pc, #212]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	2200      	movs	r2, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	617a      	str	r2, [r7, #20]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c8a:	f04f 0b00 	mov.w	fp, #0
 8003c8e:	4652      	mov	r2, sl
 8003c90:	465b      	mov	r3, fp
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f04f 0100 	mov.w	r1, #0
 8003c9a:	0159      	lsls	r1, r3, #5
 8003c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca0:	0150      	lsls	r0, r2, #5
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	ebb2 080a 	subs.w	r8, r2, sl
 8003caa:	eb63 090b 	sbc.w	r9, r3, fp
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cc2:	ebb2 0408 	subs.w	r4, r2, r8
 8003cc6:	eb63 0509 	sbc.w	r5, r3, r9
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	00eb      	lsls	r3, r5, #3
 8003cd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cd8:	00e2      	lsls	r2, r4, #3
 8003cda:	4614      	mov	r4, r2
 8003cdc:	461d      	mov	r5, r3
 8003cde:	eb14 030a 	adds.w	r3, r4, sl
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	eb45 030b 	adc.w	r3, r5, fp
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	028b      	lsls	r3, r1, #10
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d00:	4621      	mov	r1, r4
 8003d02:	028a      	lsls	r2, r1, #10
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	60fa      	str	r2, [r7, #12]
 8003d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d14:	f7fc faac 	bl	8000270 <__aeabi_uldivmod>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d20:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003d30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d3a:	e002      	b.n	8003d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3740      	adds	r7, #64	@ 0x40
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	00f42400 	.word	0x00f42400
 8003d58:	017d7840 	.word	0x017d7840

08003d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d60:	4b03      	ldr	r3, [pc, #12]	@ (8003d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000000 	.word	0x20000000

08003d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d78:	f7ff fff0 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b05      	ldr	r3, [pc, #20]	@ (8003d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	0a9b      	lsrs	r3, r3, #10
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4903      	ldr	r1, [pc, #12]	@ (8003d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	08009464 	.word	0x08009464

08003d9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	220f      	movs	r2, #15
 8003daa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dac:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0203 	and.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003db8:	4b0f      	ldr	r3, [pc, #60]	@ (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dd0:	4b09      	ldr	r3, [pc, #36]	@ (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	08db      	lsrs	r3, r3, #3
 8003dd6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dde:	4b07      	ldr	r3, [pc, #28]	@ (8003dfc <HAL_RCC_GetClockConfig+0x60>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0207 	and.w	r2, r3, #7
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	601a      	str	r2, [r3, #0]
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40023c00 	.word	0x40023c00

08003e00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d035      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e28:	4b62      	ldr	r3, [pc, #392]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e2e:	f7fe febf 	bl	8002bb0 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e36:	f7fe febb 	bl	8002bb0 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e0b0      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e48:	4b5b      	ldr	r3, [pc, #364]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	019a      	lsls	r2, r3, #6
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	071b      	lsls	r3, r3, #28
 8003e60:	4955      	ldr	r1, [pc, #340]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e68:	4b52      	ldr	r3, [pc, #328]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e6e:	f7fe fe9f 	bl	8002bb0 <HAL_GetTick>
 8003e72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e76:	f7fe fe9b 	bl	8002bb0 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e090      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e88:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8083 	beq.w	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	4b44      	ldr	r3, [pc, #272]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	4a43      	ldr	r2, [pc, #268]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb2:	4b41      	ldr	r3, [pc, #260]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eca:	f7fe fe71 	bl	8002bb0 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed2:	f7fe fe6d 	bl	8002bb0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e062      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003ee4:	4b35      	ldr	r3, [pc, #212]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ef0:	4b31      	ldr	r3, [pc, #196]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ef8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02f      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d028      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f18:	4b29      	ldr	r3, [pc, #164]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f1e:	4b28      	ldr	r3, [pc, #160]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f24:	4a24      	ldr	r2, [pc, #144]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f2a:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d114      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f36:	f7fe fe3b 	bl	8002bb0 <HAL_GetTick>
 8003f3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fe fe37 	bl	8002bb0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e02a      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f54:	4b18      	ldr	r3, [pc, #96]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ee      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f6c:	d10d      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f6e:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f82:	490d      	ldr	r1, [pc, #52]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]
 8003f88:	e005      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f90:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f94:	6093      	str	r3, [r2, #8]
 8003f96:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa2:	4905      	ldr	r1, [pc, #20]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	42470068 	.word	0x42470068
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	42470e40 	.word	0x42470e40

08003fc4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e073      	b.n	80040c2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	7f5b      	ldrb	r3, [r3, #29]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd f88e 	bl	800110c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b10      	cmp	r3, #16
 8004002:	d055      	beq.n	80040b0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	22ca      	movs	r2, #202	@ 0xca
 800400a:	625a      	str	r2, [r3, #36]	@ 0x24
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2253      	movs	r2, #83	@ 0x53
 8004012:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fbdd 	bl	80047d4 <RTC_EnterInitMode>
 800401a:	4603      	mov	r3, r0
 800401c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d12c      	bne.n	800407e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004036:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6899      	ldr	r1, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68d2      	ldr	r2, [r2, #12]
 800405e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6919      	ldr	r1, [r3, #16]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	041a      	lsls	r2, r3, #16
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fbe4 	bl	8004842 <RTC_ExitInitMode>
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d110      	bne.n	80040a6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	22ff      	movs	r2, #255	@ 0xff
 80040ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80040ae:	e001      	b.n	80040b4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040ca:	b590      	push	{r4, r7, lr}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	7f1b      	ldrb	r3, [r3, #28]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_RTC_SetTime+0x1c>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e087      	b.n	80041f6 <HAL_RTC_SetTime+0x12c>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2202      	movs	r2, #2
 80040f0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d126      	bne.n	8004146 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d102      	bne.n	800410c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fbbb 	bl	800488c <RTC_ByteToBcd2>
 8004116:	4603      	mov	r3, r0
 8004118:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fbb4 	bl	800488c <RTC_ByteToBcd2>
 8004124:	4603      	mov	r3, r0
 8004126:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004128:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	789b      	ldrb	r3, [r3, #2]
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fbac 	bl	800488c <RTC_ByteToBcd2>
 8004134:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004136:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	78db      	ldrb	r3, [r3, #3]
 800413e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e018      	b.n	8004178 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2200      	movs	r2, #0
 8004158:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004166:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800416c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	78db      	ldrb	r3, [r3, #3]
 8004172:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	22ca      	movs	r2, #202	@ 0xca
 800417e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2253      	movs	r2, #83	@ 0x53
 8004186:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fb23 	bl	80047d4 <RTC_EnterInitMode>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d120      	bne.n	80041da <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80041a2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80041a6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6899      	ldr	r1, [r3, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fb36 	bl	8004842 <RTC_ExitInitMode>
 80041d6:	4603      	mov	r3, r0
 80041d8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	22ff      	movs	r2, #255	@ 0xff
 80041ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]

  return status;
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd90      	pop	{r4, r7, pc}

080041fe <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004230:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004234:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800425e:	b2da      	uxtb	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	0d9b      	lsrs	r3, r3, #22
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d11a      	bne.n	80042b0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fb22 	bl	80048c8 <RTC_Bcd2ToByte>
 8004284:	4603      	mov	r3, r0
 8004286:	461a      	mov	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fb19 	bl	80048c8 <RTC_Bcd2ToByte>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	789b      	ldrb	r3, [r3, #2]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fb10 	bl	80048c8 <RTC_Bcd2ToByte>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042ba:	b590      	push	{r4, r7, lr}
 80042bc:	b087      	sub	sp, #28
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	7f1b      	ldrb	r3, [r3, #28]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_RTC_SetDate+0x1c>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e071      	b.n	80043ba <HAL_RTC_SetDate+0x100>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2202      	movs	r2, #2
 80042e0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10e      	bne.n	8004306 <HAL_RTC_SetDate+0x4c>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	785b      	ldrb	r3, [r3, #1]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	f023 0310 	bic.w	r3, r3, #16
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	330a      	adds	r3, #10
 8004300:	b2da      	uxtb	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d11c      	bne.n	8004346 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	78db      	ldrb	r3, [r3, #3]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fabb 	bl	800488c <RTC_ByteToBcd2>
 8004316:	4603      	mov	r3, r0
 8004318:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	785b      	ldrb	r3, [r3, #1]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fab4 	bl	800488c <RTC_ByteToBcd2>
 8004324:	4603      	mov	r3, r0
 8004326:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004328:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	789b      	ldrb	r3, [r3, #2]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 faac 	bl	800488c <RTC_ByteToBcd2>
 8004334:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004336:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	e00e      	b.n	8004364 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	78db      	ldrb	r3, [r3, #3]
 800434a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	785b      	ldrb	r3, [r3, #1]
 8004350:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004352:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004358:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	22ca      	movs	r2, #202	@ 0xca
 800436a:	625a      	str	r2, [r3, #36]	@ 0x24
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2253      	movs	r2, #83	@ 0x53
 8004372:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fa2d 	bl	80047d4 <RTC_EnterInitMode>
 800437a:	4603      	mov	r3, r0
 800437c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10c      	bne.n	800439e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800438e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004392:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fa54 	bl	8004842 <RTC_ExitInitMode>
 800439a:	4603      	mov	r3, r0
 800439c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	22ff      	movs	r2, #255	@ 0xff
 80043b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]

  return status;
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd90      	pop	{r4, r7, pc}

080043c2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80043e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	0a1b      	lsrs	r3, r3, #8
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	0b5b      	lsrs	r3, r3, #13
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	b2da      	uxtb	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d11a      	bne.n	8004456 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	78db      	ldrb	r3, [r3, #3]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fa4f 	bl	80048c8 <RTC_Bcd2ToByte>
 800442a:	4603      	mov	r3, r0
 800442c:	461a      	mov	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fa46 	bl	80048c8 <RTC_Bcd2ToByte>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	789b      	ldrb	r3, [r3, #2]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fa3d 	bl	80048c8 <RTC_Bcd2ToByte>
 800444e:	4603      	mov	r3, r0
 8004450:	461a      	mov	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b089      	sub	sp, #36	@ 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800446c:	4b9b      	ldr	r3, [pc, #620]	@ (80046dc <HAL_RTC_SetAlarm_IT+0x27c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a9b      	ldr	r2, [pc, #620]	@ (80046e0 <HAL_RTC_SetAlarm_IT+0x280>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	0adb      	lsrs	r3, r3, #11
 8004478:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800447c:	fb02 f303 	mul.w	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	7f1b      	ldrb	r3, [r3, #28]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_RTC_SetAlarm_IT+0x36>
 8004492:	2302      	movs	r3, #2
 8004494:	e11e      	b.n	80046d4 <HAL_RTC_SetAlarm_IT+0x274>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2202      	movs	r2, #2
 80044a0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d137      	bne.n	8004518 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2200      	movs	r2, #0
 80044ba:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f9e3 	bl	800488c <RTC_ByteToBcd2>
 80044c6:	4603      	mov	r3, r0
 80044c8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	785b      	ldrb	r3, [r3, #1]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f9dc 	bl	800488c <RTC_ByteToBcd2>
 80044d4:	4603      	mov	r3, r0
 80044d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80044d8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	789b      	ldrb	r3, [r3, #2]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f9d4 	bl	800488c <RTC_ByteToBcd2>
 80044e4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	78db      	ldrb	r3, [r3, #3]
 80044ee:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80044f0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f9c6 	bl	800488c <RTC_ByteToBcd2>
 8004500:	4603      	mov	r3, r0
 8004502:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004504:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800450c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004512:	4313      	orrs	r3, r2
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	e023      	b.n	8004560 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d102      	bne.n	800452c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2200      	movs	r2, #0
 800452a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	785b      	ldrb	r3, [r3, #1]
 8004536:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004538:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800453e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	78db      	ldrb	r3, [r3, #3]
 8004544:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004546:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800454e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004550:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004556:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800455c:	4313      	orrs	r3, r2
 800455e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	22ca      	movs	r2, #202	@ 0xca
 8004572:	625a      	str	r2, [r3, #36]	@ 0x24
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2253      	movs	r2, #83	@ 0x53
 800457a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004584:	d142      	bne.n	800460c <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004594:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80045a6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	22ff      	movs	r2, #255	@ 0xff
 80045ba:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2203      	movs	r2, #3
 80045c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e083      	b.n	80046d4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0e6      	beq.n	80045a8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004608:	609a      	str	r2, [r3, #8]
 800460a:	e04c      	b.n	80046a6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800461a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	b2da      	uxtb	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800462c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800462e:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <HAL_RTC_SetAlarm_IT+0x27c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2b      	ldr	r2, [pc, #172]	@ (80046e0 <HAL_RTC_SetAlarm_IT+0x280>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	0adb      	lsrs	r3, r3, #11
 800463a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3b01      	subs	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	22ff      	movs	r2, #255	@ 0xff
 8004656:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2203      	movs	r2, #3
 800465c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e035      	b.n	80046d4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0e6      	beq.n	8004644 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004694:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046a4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80046a6:	4b0f      	ldr	r3, [pc, #60]	@ (80046e4 <HAL_RTC_SetAlarm_IT+0x284>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a0e      	ldr	r2, [pc, #56]	@ (80046e4 <HAL_RTC_SetAlarm_IT+0x284>)
 80046ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80046b2:	4b0c      	ldr	r3, [pc, #48]	@ (80046e4 <HAL_RTC_SetAlarm_IT+0x284>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	4a0b      	ldr	r2, [pc, #44]	@ (80046e4 <HAL_RTC_SetAlarm_IT+0x284>)
 80046b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046bc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	22ff      	movs	r2, #255	@ 0xff
 80046c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3724      	adds	r7, #36	@ 0x24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd90      	pop	{r4, r7, pc}
 80046dc:	20000000 	.word	0x20000000
 80046e0:	10624dd3 	.word	0x10624dd3
 80046e4:	40013c00 	.word	0x40013c00

080046e8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80046f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004770 <HAL_RTC_AlarmIRQHandler+0x88>)
 80046f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046f6:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d012      	beq.n	800472c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00b      	beq.n	800472c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004724:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f824 	bl	8004774 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d012      	beq.n	8004760 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00b      	beq.n	8004760 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004758:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f8d2 	bl	8004904 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	775a      	strb	r2, [r3, #29]
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40013c00 	.word	0x40013c00

08004774 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0d      	ldr	r2, [pc, #52]	@ (80047d0 <HAL_RTC_WaitForSynchro+0x48>)
 800479a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800479c:	f7fe fa08 	bl	8002bb0 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047a2:	e009      	b.n	80047b8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047a4:	f7fe fa04 	bl	8002bb0 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047b2:	d901      	bls.n	80047b8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e007      	b.n	80047c8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0ee      	beq.n	80047a4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	00017f5f 	.word	0x00017f5f

080047d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d122      	bne.n	8004838 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004800:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004802:	f7fe f9d5 	bl	8002bb0 <HAL_GetTick>
 8004806:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004808:	e00c      	b.n	8004824 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800480a:	f7fe f9d1 	bl	8002bb0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004818:	d904      	bls.n	8004824 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2204      	movs	r2, #4
 800481e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <RTC_EnterInitMode+0x64>
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d1e8      	bne.n	800480a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800485c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff ff8b 	bl	8004788 <HAL_RTC_WaitForSynchro>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2204      	movs	r2, #4
 800487c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004882:	7bfb      	ldrb	r3, [r7, #15]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800489a:	e005      	b.n	80048a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	3b0a      	subs	r3, #10
 80048a6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	2b09      	cmp	r3, #9
 80048ac:	d8f6      	bhi.n	800489c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	b2db      	uxtb	r3, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	4413      	add	r3, r2
 80048f6:	b2db      	uxtb	r3, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e041      	b.n	80049ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f839 	bl	80049b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f000 f9c0 	bl	8004cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d001      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e04e      	b.n	8004a82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a23      	ldr	r2, [pc, #140]	@ (8004a90 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d022      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0x80>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0e:	d01d      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0x80>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1f      	ldr	r2, [pc, #124]	@ (8004a94 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d018      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0x80>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a98 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d013      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0x80>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1c      	ldr	r2, [pc, #112]	@ (8004a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00e      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0x80>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d009      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a19      	ldr	r2, [pc, #100]	@ (8004aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0x80>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a18      	ldr	r2, [pc, #96]	@ (8004aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d111      	bne.n	8004a70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b06      	cmp	r3, #6
 8004a5c:	d010      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6e:	e007      	b.n	8004a80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800
 8004a9c:	40000c00 	.word	0x40000c00
 8004aa0:	40010400 	.word	0x40010400
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40001800 	.word	0x40001800

08004aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d020      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01b      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0202 	mvn.w	r2, #2
 8004ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f8d2 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f8c4 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f8d5 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d020      	beq.n	8004b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0204 	mvn.w	r2, #4
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2202      	movs	r2, #2
 8004b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8ac 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f89e 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8af 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d020      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0208 	mvn.w	r2, #8
 8004b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f886 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f878 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f889 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d020      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01b      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0210 	mvn.w	r2, #16
 8004bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2208      	movs	r2, #8
 8004bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f860 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 8004be0:	e005      	b.n	8004bee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f852 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f863 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0201 	mvn.w	r2, #1
 8004c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fa34 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f906 	bl	8004e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f834 	bl	8004cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0220 	mvn.w	r2, #32
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8d8 	bl	8004e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a46      	ldr	r2, [pc, #280]	@ (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfa:	d00f      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a43      	ldr	r2, [pc, #268]	@ (8004e0c <TIM_Base_SetConfig+0x130>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a42      	ldr	r2, [pc, #264]	@ (8004e10 <TIM_Base_SetConfig+0x134>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a41      	ldr	r2, [pc, #260]	@ (8004e14 <TIM_Base_SetConfig+0x138>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a40      	ldr	r2, [pc, #256]	@ (8004e18 <TIM_Base_SetConfig+0x13c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d108      	bne.n	8004d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a35      	ldr	r2, [pc, #212]	@ (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d02b      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3c:	d027      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a32      	ldr	r2, [pc, #200]	@ (8004e0c <TIM_Base_SetConfig+0x130>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d023      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a31      	ldr	r2, [pc, #196]	@ (8004e10 <TIM_Base_SetConfig+0x134>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d01f      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a30      	ldr	r2, [pc, #192]	@ (8004e14 <TIM_Base_SetConfig+0x138>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01b      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2f      	ldr	r2, [pc, #188]	@ (8004e18 <TIM_Base_SetConfig+0x13c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d017      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2e      	ldr	r2, [pc, #184]	@ (8004e1c <TIM_Base_SetConfig+0x140>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	@ (8004e20 <TIM_Base_SetConfig+0x144>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00f      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2c      	ldr	r2, [pc, #176]	@ (8004e24 <TIM_Base_SetConfig+0x148>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00b      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2b      	ldr	r2, [pc, #172]	@ (8004e28 <TIM_Base_SetConfig+0x14c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2a      	ldr	r2, [pc, #168]	@ (8004e2c <TIM_Base_SetConfig+0x150>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d003      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a29      	ldr	r2, [pc, #164]	@ (8004e30 <TIM_Base_SetConfig+0x154>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d108      	bne.n	8004da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a10      	ldr	r2, [pc, #64]	@ (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_Base_SetConfig+0xf8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a12      	ldr	r2, [pc, #72]	@ (8004e18 <TIM_Base_SetConfig+0x13c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d103      	bne.n	8004ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d105      	bne.n	8004dfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f023 0201 	bic.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	611a      	str	r2, [r3, #16]
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40010400 	.word	0x40010400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800
 8004e28:	40001800 	.word	0x40001800
 8004e2c:	40001c00 	.word	0x40001c00
 8004e30:	40002000 	.word	0x40002000

08004e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f103 0208 	add.w	r2, r3, #8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
 8004e78:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f103 0208 	add.w	r2, r3, #8
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	611a      	str	r2, [r3, #16]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f103 0208 	add.w	r2, r3, #8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	615a      	str	r2, [r3, #20]

    /* Initialize the remaining fields of xListEnd when it is a proper ListItem_t */
    #if ( configUSE_MINI_LIST_ITEM == 0 )
    {
        pxList->xListEnd.pvOwner = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	619a      	str	r2, [r3, #24]
        pxList->xListEnd.pxContainer = NULL;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	61da      	str	r2, [r3, #28]
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	615a      	str	r2, [r3, #20]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	e9c7 2302 	strd	r2, r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	bf08      	it	eq
 8004ee6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004eea:	d103      	bne.n	8004ef4 <vListInsert+0x2c>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e010      	b.n	8004f16 <vListInsert+0x4e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e002      	b.n	8004f02 <vListInsert+0x3a>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f0e:	4290      	cmp	r0, r2
 8004f10:	eb71 0303 	sbcs.w	r3, r1, r3
 8004f14:	d2f2      	bcs.n	8004efc <vListInsert+0x34>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	60da      	str	r2, [r3, #12]
    pxNewListItem->pxPrevious = pxIterator;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	60da      	str	r2, [r3, #12]
    pxIterator->pxNext = pxNewListItem;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	615a      	str	r2, [r3, #20]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	68d2      	ldr	r2, [r2, #12]
 8004f64:	60da      	str	r2, [r3, #12]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6892      	ldr	r2, [r2, #8]
 8004f6e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d103      	bne.n	8004f82 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	615a      	str	r2, [r3, #20]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004fac:	2301      	movs	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d052      	beq.n	8005060 <xQueueGenericReset+0xbe>
        ( pxQueue->uxLength >= 1U ) &&
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    if( ( pxQueue != NULL ) &&
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d04e      	beq.n	8005060 <xQueueGenericReset+0xbe>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fca:	2100      	movs	r1, #0
 8004fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d000      	beq.n	8004fd6 <xQueueGenericReset+0x34>
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d141      	bne.n	8005060 <xQueueGenericReset+0xbe>
    {
        taskENTER_CRITICAL();
 8004fdc:	f002 fa02 	bl	80073e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	6d89      	ldr	r1, [r1, #88]	@ 0x58
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	651a      	str	r2, [r3, #80]	@ 0x50
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500c:	3b01      	subs	r3, #1
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	6d89      	ldr	r1, [r1, #88]	@ 0x58
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	441a      	add	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	22ff      	movs	r2, #255	@ 0xff
 8005020:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            pxQueue->cTxLock = queueUNLOCKED;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	22ff      	movs	r2, #255	@ 0xff
 8005028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

            if( xNewQueue == pdFALSE )
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <xQueueGenericReset+0xa4>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00f      	beq.n	800505a <xQueueGenericReset+0xb8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	3310      	adds	r3, #16
 800503e:	4618      	mov	r0, r3
 8005040:	f001 f860 	bl	8006104 <xTaskRemoveFromEventList>
 8005044:	e009      	b.n	800505a <xQueueGenericReset+0xb8>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	3310      	adds	r3, #16
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff ff06 	bl	8004e5c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	3330      	adds	r3, #48	@ 0x30
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff01 	bl	8004e5c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800505a:	f002 f9dd 	bl	8007418 <vPortExitCritical>
 800505e:	e001      	b.n	8005064 <xQueueGenericReset+0xc2>
    }
    else
    {
        xReturn = pdFAIL;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8005064:	68fb      	ldr	r3, [r7, #12]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800506e:	b580      	push	{r7, lr}
 8005070:	b088      	sub	sp, #32
 8005072:	af02      	add	r7, sp, #8
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d01e      	beq.n	80050c4 <xQueueGenericCreateStatic+0x56>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01b      	beq.n	80050c4 <xQueueGenericCreateStatic+0x56>
            ( pxStaticQueue != NULL ) &&
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <xQueueGenericCreateStatic+0x2a>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d015      	beq.n	80050c4 <xQueueGenericCreateStatic+0x56>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d102      	bne.n	80050a4 <xQueueGenericCreateStatic+0x36>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10f      	bne.n	80050c4 <xQueueGenericCreateStatic+0x56>
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f805 	bl	80050ce <prvInitialiseNewQueue>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 80050c4:	697b      	ldr	r3, [r7, #20]
    }
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e002      	b.n	80050f0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	655a      	str	r2, [r3, #84]	@ 0x54
    pxNewQueue->uxItemSize = uxItemSize;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	659a      	str	r2, [r3, #88]	@ 0x58
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050fc:	2101      	movs	r1, #1
 80050fe:	69b8      	ldr	r0, [r7, #24]
 8005100:	f7ff ff4f 	bl	8004fa2 <xQueueGenericReset>
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2200      	movs	r2, #0
 8005108:	661a      	str	r2, [r3, #96]	@ 0x60
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08c      	sub	sp, #48	@ 0x30
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005122:	2300      	movs	r3, #0
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800512a:	f002 f95b 	bl	80073e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d014      	beq.n	8005164 <xQueueReceive+0x50>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800513e:	f000 f8ed 	bl	800531c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	1e5a      	subs	r2, r3, #1
 8005146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005148:	651a      	str	r2, [r3, #80]	@ 0x50

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <xQueueReceive+0x48>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005154:	3310      	adds	r3, #16
 8005156:	4618      	mov	r0, r3
 8005158:	f000 ffd4 	bl	8006104 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800515c:	f002 f95c 	bl	8007418 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8005160:	2301      	movs	r3, #1
 8005162:	e06b      	b.n	800523c <xQueueReceive+0x128>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005168:	4313      	orrs	r3, r2
 800516a:	d103      	bne.n	8005174 <xQueueReceive+0x60>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800516c:	f002 f954 	bl	8007418 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8005170:	2300      	movs	r3, #0
 8005172:	e063      	b.n	800523c <xQueueReceive+0x128>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <xQueueReceive+0x74>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800517a:	f107 0310 	add.w	r3, r7, #16
 800517e:	4618      	mov	r0, r3
 8005180:	f001 f880 	bl	8006284 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005188:	f002 f946 	bl	8007418 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800518c:	f000 fc4c 	bl	8005a28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005190:	f002 f928 	bl	80073e4 <vPortEnterCritical>
 8005194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005196:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800519a:	b25b      	sxtb	r3, r3
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d103      	bne.n	80051aa <xQueueReceive+0x96>
 80051a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80051aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80051b0:	b25b      	sxtb	r3, r3
 80051b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b6:	d103      	bne.n	80051c0 <xQueueReceive+0xac>
 80051b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80051c0:	f002 f92a 	bl	8007418 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051c4:	463a      	mov	r2, r7
 80051c6:	f107 0310 	add.w	r3, r7, #16
 80051ca:	4611      	mov	r1, r2
 80051cc:	4618      	mov	r0, r3
 80051ce:	f001 f871 	bl	80062b4 <xTaskCheckForTimeOut>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d124      	bne.n	8005222 <xQueueReceive+0x10e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051da:	f000 f924 	bl	8005426 <prvIsQueueEmpty>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d018      	beq.n	8005216 <xQueueReceive+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80051ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ee:	4608      	mov	r0, r1
 80051f0:	f000 ff34 	bl	800605c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80051f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051f6:	f000 f8b7 	bl	8005368 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80051fa:	f000 fc71 	bl	8005ae0 <xTaskResumeAll>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d192      	bne.n	800512a <xQueueReceive+0x16>
                {
                    taskYIELD_WITHIN_API();
 8005204:	4b0f      	ldr	r3, [pc, #60]	@ (8005244 <xQueueReceive+0x130>)
 8005206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	e789      	b.n	800512a <xQueueReceive+0x16>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005218:	f000 f8a6 	bl	8005368 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800521c:	f000 fc60 	bl	8005ae0 <xTaskResumeAll>
 8005220:	e783      	b.n	800512a <xQueueReceive+0x16>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005224:	f000 f8a0 	bl	8005368 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005228:	f000 fc5a 	bl	8005ae0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800522c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800522e:	f000 f8fa 	bl	8005426 <prvIsQueueEmpty>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	f43f af78 	beq.w	800512a <xQueueReceive+0x16>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800523a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3730      	adds	r7, #48	@ 0x30
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d14d      	bne.n	800530a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f001 f9b4 	bl	80065e0 <xTaskPriorityDisinherit>
 8005278:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	e043      	b.n	800530a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d119      	bne.n	80052bc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6858      	ldr	r0, [r3, #4]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005290:	461a      	mov	r2, r3
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	f002 fe99 	bl	8007fca <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a0:	441a      	add	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d32b      	bcc.n	800530a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	e026      	b.n	800530a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	68d8      	ldr	r0, [r3, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c4:	461a      	mov	r2, r3
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	f002 fe7f 	bl	8007fca <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d4:	425b      	negs	r3, r3
 80052d6:	441a      	add	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d207      	bcs.n	80052f8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f0:	425b      	negs	r3, r3
 80052f2:	441a      	add	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d105      	bne.n	800530a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	3b01      	subs	r3, #1
 8005308:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	651a      	str	r2, [r3, #80]	@ 0x50

    return xReturn;
 8005312:	697b      	ldr	r3, [r7, #20]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	2b00      	cmp	r3, #0
 800532c:	d018      	beq.n	8005360 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005336:	441a      	add	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	429a      	cmp	r2, r3
 8005346:	d303      	bcc.n	8005350 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68d9      	ldr	r1, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005358:	461a      	mov	r2, r3
 800535a:	6838      	ldr	r0, [r7, #0]
 800535c:	f002 fe35 	bl	8007fca <memcpy>
    }
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005370:	f002 f838 	bl	80073e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800537a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800537c:	e01e      	b.n	80053bc <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005382:	2b00      	cmp	r3, #0
 8005384:	d008      	beq.n	8005398 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f89a 	bl	80054c0 <prvNotifyQueueSetContainer>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 8005392:	f001 f80b 	bl	80063ac <vTaskMissedYield>
 8005396:	e00d      	b.n	80053b4 <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539c:	2b00      	cmp	r3, #0
 800539e:	d012      	beq.n	80053c6 <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3330      	adds	r3, #48	@ 0x30
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fead 	bl	8006104 <xTaskRemoveFromEventList>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 80053b0:	f000 fffc 	bl	80063ac <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80053bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	dcdc      	bgt.n	800537e <prvUnlockQueue+0x16>
 80053c4:	e000      	b.n	80053c8 <prvUnlockQueue+0x60>
                        break;
 80053c6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	22ff      	movs	r2, #255	@ 0xff
 80053cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    }
    taskEXIT_CRITICAL();
 80053d0:	f002 f822 	bl	8007418 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80053d4:	f002 f806 	bl	80073e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80053de:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80053e0:	e011      	b.n	8005406 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d012      	beq.n	8005410 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3310      	adds	r3, #16
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fe88 	bl	8006104 <xTaskRemoveFromEventList>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 80053fa:	f000 ffd7 	bl	80063ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	3b01      	subs	r3, #1
 8005402:	b2db      	uxtb	r3, r3
 8005404:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800540a:	2b00      	cmp	r3, #0
 800540c:	dce9      	bgt.n	80053e2 <prvUnlockQueue+0x7a>
 800540e:	e000      	b.n	8005412 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8005410:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	22ff      	movs	r2, #255	@ 0xff
 8005416:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }
    taskEXIT_CRITICAL();
 800541a:	f001 fffd 	bl	8007418 <vPortExitCritical>
}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800542e:	f001 ffd9 	bl	80073e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	e001      	b.n	8005444 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005444:	f001 ffe8 	bl	8007418 <vPortExitCritical>

    return xReturn;
 8005448:	68fb      	ldr	r3, [r7, #12]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005452:	b580      	push	{r7, lr}
 8005454:	b088      	sub	sp, #32
 8005456:	af02      	add	r7, sp, #8
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	e9c7 2300 	strd	r2, r3, [r7]
        Queue_t * const pxQueue = xQueue;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005462:	f001 ffbf 	bl	80073e4 <vPortEnterCritical>
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800546c:	b25b      	sxtb	r3, r3
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d103      	bne.n	800547c <vQueueWaitForMessageRestricted+0x2a>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005482:	b25b      	sxtb	r3, r3
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d103      	bne.n	8005492 <vQueueWaitForMessageRestricted+0x40>
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005492:	f001 ffc1 	bl	8007418 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <vQueueWaitForMessageRestricted+0x60>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ac:	4608      	mov	r0, r1
 80054ae:	f000 fded 	bl	800608c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80054b2:	6978      	ldr	r0, [r7, #20]
 80054b4:	f7ff ff58 	bl	8005368 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054cc:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054da:	429a      	cmp	r2, r3
 80054dc:	d22d      	bcs.n	800553a <prvNotifyQueueSetContainer+0x7a>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054e4:	73fb      	strb	r3, [r7, #15]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	2200      	movs	r2, #0
 80054ea:	4619      	mov	r1, r3
 80054ec:	6938      	ldr	r0, [r7, #16]
 80054ee:	f7ff feab 	bl	8005248 <prvCopyDataToQueue>
 80054f2:	6178      	str	r0, [r7, #20]

            if( cTxLock == queueUNLOCKED )
 80054f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d10e      	bne.n	800551c <prvNotifyQueueSetContainer+0x5c>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	2b00      	cmp	r3, #0
 8005504:	d019      	beq.n	800553a <prvNotifyQueueSetContainer+0x7a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	3330      	adds	r3, #48	@ 0x30
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fdfa 	bl	8006104 <xTaskRemoveFromEventList>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d011      	beq.n	800553a <prvNotifyQueueSetContainer+0x7a>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8005516:	2301      	movs	r3, #1
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e00e      	b.n	800553a <prvNotifyQueueSetContainer+0x7a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 800551c:	f000 fc08 	bl	8005d30 <uxTaskGetNumberOfTasks>
 8005520:	60b8      	str	r0, [r7, #8]
 8005522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	429a      	cmp	r2, r3
 800552a:	d906      	bls.n	800553a <prvNotifyQueueSetContainer+0x7a>
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	3301      	adds	r3, #1
 8005530:	b2db      	uxtb	r3, r3
 8005532:	b25a      	sxtb	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800553a:	697b      	ldr	r3, [r7, #20]
    }
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	@ 0x28
 8005548:	af04      	add	r7, sp, #16
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
            configASSERT( xSize == sizeof( TCB_t ) );
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01f      	beq.n	8005598 <prvCreateStaticTask+0x54>
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01c      	beq.n	8005598 <prvCreateStaticTask+0x54>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 800555e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005560:	617b      	str	r3, [r7, #20]
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005562:	2258      	movs	r2, #88	@ 0x58
 8005564:	2100      	movs	r1, #0
 8005566:	6978      	ldr	r0, [r7, #20]
 8005568:	f002 fcba 	bl	8007ee0 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005570:	63da      	str	r2, [r3, #60]	@ 0x3c

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800557a:	2300      	movs	r3, #0
 800557c:	9303      	str	r3, [sp, #12]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	9302      	str	r3, [sp, #8]
 8005582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f88f 	bl	80056b4 <prvInitialiseNewTask>
 8005596:	e001      	b.n	800559c <prvCreateStaticTask+0x58>
        }
        else
        {
            pxNewTCB = NULL;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
        }

        return pxNewTCB;
 800559c:	697b      	ldr	r3, [r7, #20]
    }
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b08a      	sub	sp, #40	@ 0x28
 80055aa:	af04      	add	r7, sp, #16
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
 80055b2:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 80055b8:	f107 0310 	add.w	r3, r7, #16
 80055bc:	9303      	str	r3, [sp, #12]
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	9302      	str	r3, [sp, #8]
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f7ff ffb7 	bl	8005544 <prvCreateStaticTask>
 80055d6:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80055de:	6978      	ldr	r0, [r7, #20]
 80055e0:	f000 f8e2 	bl	80057a8 <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 80055e4:	693b      	ldr	r3, [r7, #16]
    }
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b08a      	sub	sp, #40	@ 0x28
 80055f2:	af04      	add	r7, sp, #16
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4618      	mov	r0, r3
 8005602:	f002 f89b 	bl	800773c <pvPortMalloc>
 8005606:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d013      	beq.n	8005636 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800560e:	2058      	movs	r0, #88	@ 0x58
 8005610:	f002 f894 	bl	800773c <pvPortMalloc>
 8005614:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800561c:	2258      	movs	r2, #88	@ 0x58
 800561e:	2100      	movs	r1, #0
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f002 fc5d 	bl	8007ee0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800562c:	e005      	b.n	800563a <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800562e:	6938      	ldr	r0, [r7, #16]
 8005630:	f002 f932 	bl	8007898 <vPortFree>
 8005634:	e001      	b.n	800563a <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d011      	beq.n	8005664 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005648:	2300      	movs	r3, #0
 800564a:	9303      	str	r3, [sp, #12]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	9302      	str	r3, [sp, #8]
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f828 	bl	80056b4 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8005664:	697b      	ldr	r3, [r7, #20]
    }
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800566e:	b580      	push	{r7, lr}
 8005670:	b088      	sub	sp, #32
 8005672:	af02      	add	r7, sp, #8
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
 800567a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7ff ffaf 	bl	80055ee <prvCreateTask>
 8005690:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8005698:	6938      	ldr	r0, [r7, #16]
 800569a:	f000 f885 	bl	80057a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800569e:	2301      	movs	r3, #1
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e002      	b.n	80056aa <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056a4:	f04f 33ff 	mov.w	r3, #4294967295
 80056a8:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80056aa:	697b      	ldr	r3, [r7, #20]
    }
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80056b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	461a      	mov	r2, r3
 80056ce:	21a5      	movs	r1, #165	@ 0xa5
 80056d0:	f002 fc06 	bl	8007ee0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056de:	3b01      	subs	r3, #1
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f023 0307 	bic.w	r3, r3, #7
 80056ec:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01e      	beq.n	8005732 <prvInitialiseNewTask+0x7e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e012      	b.n	8005720 <prvInitialiseNewTask+0x6c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	4413      	add	r3, r2
 8005700:	7819      	ldrb	r1, [r3, #0]
 8005702:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4413      	add	r3, r2
 8005708:	3340      	adds	r3, #64	@ 0x40
 800570a:	460a      	mov	r2, r1
 800570c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <prvInitialiseNewTask+0x74>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	3301      	adds	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d9e9      	bls.n	80056fa <prvInitialiseNewTask+0x46>
 8005726:	e000      	b.n	800572a <prvInitialiseNewTask+0x76>
            {
                break;
 8005728:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	2b04      	cmp	r3, #4
 8005736:	d901      	bls.n	800573c <prvInitialiseNewTask+0x88>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005738:	2304      	movs	r3, #4
 800573a:	633b      	str	r3, [r7, #48]	@ 0x30
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800573c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005740:	639a      	str	r2, [r3, #56]	@ 0x38
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005746:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574a:	3308      	adds	r3, #8
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fbae 	bl	8004eae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	3320      	adds	r3, #32
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fba9 	bl	8004eae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005760:	619a      	str	r2, [r3, #24]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	2200      	movs	r2, #0
 8005766:	461c      	mov	r4, r3
 8005768:	4615      	mov	r5, r2
 800576a:	2300      	movs	r3, #0
 800576c:	f1d4 0805 	rsbs	r8, r4, #5
 8005770:	eb63 0905 	sbc.w	r9, r3, r5
 8005774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005776:	e9c3 8908 	strd	r8, r9, [r3, #32]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	6938      	ldr	r0, [r7, #16]
 8005786:	f001 fd7d 	bl	8007284 <pxPortInitialiseStack>
 800578a:	4602      	mov	r2, r0
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8005790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005798:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800579a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800579c:	bf00      	nop
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080057a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80057b0:	f001 fe18 	bl	80073e4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80057b4:	4b32      	ldr	r3, [pc, #200]	@ (8005880 <prvAddNewTaskToReadyList+0xd8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	4a31      	ldr	r2, [pc, #196]	@ (8005880 <prvAddNewTaskToReadyList+0xd8>)
 80057bc:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80057be:	4b31      	ldr	r3, [pc, #196]	@ (8005884 <prvAddNewTaskToReadyList+0xdc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80057c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005884 <prvAddNewTaskToReadyList+0xdc>)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005880 <prvAddNewTaskToReadyList+0xd8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d110      	bne.n	80057f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80057d4:	f000 fe5c 	bl	8006490 <prvInitialiseTaskLists>
 80057d8:	e00d      	b.n	80057f6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80057da:	4b2b      	ldr	r3, [pc, #172]	@ (8005888 <prvAddNewTaskToReadyList+0xe0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057e2:	4b28      	ldr	r3, [pc, #160]	@ (8005884 <prvAddNewTaskToReadyList+0xdc>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d802      	bhi.n	80057f6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80057f0:	4a24      	ldr	r2, [pc, #144]	@ (8005884 <prvAddNewTaskToReadyList+0xdc>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80057f6:	4b25      	ldr	r3, [pc, #148]	@ (800588c <prvAddNewTaskToReadyList+0xe4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	4a23      	ldr	r2, [pc, #140]	@ (800588c <prvAddNewTaskToReadyList+0xe4>)
 80057fe:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005804:	4b22      	ldr	r3, [pc, #136]	@ (8005890 <prvAddNewTaskToReadyList+0xe8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d903      	bls.n	8005814 <prvAddNewTaskToReadyList+0x6c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	4a1f      	ldr	r2, [pc, #124]	@ (8005890 <prvAddNewTaskToReadyList+0xe8>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005818:	4a1e      	ldr	r2, [pc, #120]	@ (8005894 <prvAddNewTaskToReadyList+0xec>)
 800581a:	015b      	lsls	r3, r3, #5
 800581c:	4413      	add	r3, r2
 800581e:	3304      	adds	r3, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	611a      	str	r2, [r3, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	615a      	str	r2, [r3, #20]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	3208      	adds	r2, #8
 800583a:	609a      	str	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f103 0208 	add.w	r2, r3, #8
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	60da      	str	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584a:	015b      	lsls	r3, r3, #5
 800584c:	4a11      	ldr	r2, [pc, #68]	@ (8005894 <prvAddNewTaskToReadyList+0xec>)
 800584e:	441a      	add	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	61da      	str	r2, [r3, #28]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005858:	4a0e      	ldr	r2, [pc, #56]	@ (8005894 <prvAddNewTaskToReadyList+0xec>)
 800585a:	015b      	lsls	r3, r3, #5
 800585c:	4413      	add	r3, r2
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005864:	3201      	adds	r2, #1
 8005866:	490b      	ldr	r1, [pc, #44]	@ (8005894 <prvAddNewTaskToReadyList+0xec>)
 8005868:	015b      	lsls	r3, r3, #5
 800586a:	440b      	add	r3, r1
 800586c:	601a      	str	r2, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800586e:	f001 fdd3 	bl	8007418 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8005872:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <prvAddNewTaskToReadyList+0xe0>)
 8005874:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200002b0 	.word	0x200002b0
 8005884:	20000158 	.word	0x20000158
 8005888:	200002c4 	.word	0x200002c4
 800588c:	200002d8 	.word	0x200002d8
 8005890:	200002c0 	.word	0x200002c0
 8005894:	20000160 	.word	0x20000160

08005898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	e9c7 0100 	strd	r0, r1, [r7]
        BaseType_t xAlreadyYielded = pdFALSE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80058a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	d009      	beq.n	80058c2 <vTaskDelay+0x2a>
        {
            vTaskSuspendAll();
 80058ae:	f000 f8bb 	bl	8005a28 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058b2:	2200      	movs	r2, #0
 80058b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058b8:	f001 f910 	bl	8006adc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80058bc:	f000 f910 	bl	8005ae0 <xTaskResumeAll>
 80058c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d107      	bne.n	80058d8 <vTaskDelay+0x40>
        {
            taskYIELD_WITHIN_API();
 80058c8:	4b05      	ldr	r3, [pc, #20]	@ (80058e0 <vTaskDelay+0x48>)
 80058ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08c      	sub	sp, #48	@ 0x30
 80058e8:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 80058ea:	2301      	movs	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	e013      	b.n	8005920 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80058f8:	4a2b      	ldr	r2, [pc, #172]	@ (80059a8 <prvCreateIdleTasks+0xc4>)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	4413      	add	r3, r2
 80058fe:	7819      	ldrb	r1, [r3, #0]
 8005900:	f107 020c 	add.w	r2, r7, #12
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4413      	add	r3, r2
 8005908:	460a      	mov	r2, r1
 800590a:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800590c:	f107 020c 	add.w	r2, r7, #12
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	4413      	add	r3, r2
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d006      	beq.n	8005928 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	3301      	adds	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b03      	cmp	r3, #3
 8005924:	dde8      	ble.n	80058f8 <prvCreateIdleTasks+0x14>
 8005926:	e000      	b.n	800592a <prvCreateIdleTasks+0x46>
        {
            break;
 8005928:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	e030      	b.n	8005992 <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8005930:	4b1e      	ldr	r3, [pc, #120]	@ (80059ac <prvCreateIdleTasks+0xc8>)
 8005932:	613b      	str	r3, [r7, #16]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8005934:	2300      	movs	r3, #0
 8005936:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 800593c:	463a      	mov	r2, r7
 800593e:	1d39      	adds	r1, r7, #4
 8005940:	f107 0308 	add.w	r3, r7, #8
 8005944:	4618      	mov	r0, r3
 8005946:	f001 f957 	bl	8006bf8 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 800594a:	6838      	ldr	r0, [r7, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	f107 010c 	add.w	r1, r7, #12
 8005954:	9202      	str	r2, [sp, #8]
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	2300      	movs	r3, #0
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	2300      	movs	r3, #0
 800595e:	4602      	mov	r2, r0
 8005960:	6938      	ldr	r0, [r7, #16]
 8005962:	f7ff fe20 	bl	80055a6 <xTaskCreateStatic>
 8005966:	4602      	mov	r2, r0
 8005968:	4911      	ldr	r1, [pc, #68]	@ (80059b0 <prvCreateIdleTasks+0xcc>)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8005970:	4a0f      	ldr	r2, [pc, #60]	@ (80059b0 <prvCreateIdleTasks+0xcc>)
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 800597c:	2301      	movs	r3, #1
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e001      	b.n	8005986 <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d006      	beq.n	800599a <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	3301      	adds	r3, #1
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	ddcb      	ble.n	8005930 <prvCreateIdleTasks+0x4c>
 8005998:	e000      	b.n	800599c <prvCreateIdleTasks+0xb8>
        {
            break;
 800599a:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800599c:	69fb      	ldr	r3, [r7, #28]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	080093f4 	.word	0x080093f4
 80059ac:	080063c5 	.word	0x080063c5
 80059b0:	200002e8 	.word	0x200002e8

080059b4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80059ba:	f7ff ff93 	bl	80058e4 <prvCreateIdleTasks>
 80059be:	6078      	str	r0, [r7, #4]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d102      	bne.n	80059cc <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80059c6:	f001 f94b 	bl	8006c60 <xTimerCreateTimerTask>
 80059ca:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d11c      	bne.n	8005a0c <vTaskStartScheduler+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80059d2:	f04f 0305 	mov.w	r3, #5
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	603b      	str	r3, [r7, #0]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80059e4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80059e6:	490c      	ldr	r1, [pc, #48]	@ (8005a18 <vTaskStartScheduler+0x64>)
 80059e8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ec:	f04f 33ff 	mov.w	r3, #4294967295
 80059f0:	e9c1 2300 	strd	r2, r3, [r1]
        xSchedulerRunning = pdTRUE;
 80059f4:	4b09      	ldr	r3, [pc, #36]	@ (8005a1c <vTaskStartScheduler+0x68>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059fa:	4909      	ldr	r1, [pc, #36]	@ (8005a20 <vTaskStartScheduler+0x6c>)
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	e9c1 2300 	strd	r2, r3, [r1]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8005a08:	f001 fcb4 	bl	8007374 <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005a0c:	4b05      	ldr	r3, [pc, #20]	@ (8005a24 <vTaskStartScheduler+0x70>)
 8005a0e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	200002e0 	.word	0x200002e0
 8005a1c:	200002c4 	.word	0x200002c4
 8005a20:	200002b8 	.word	0x200002b8
 8005a24:	2000000c 	.word	0x2000000c

08005a28 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8005a2c:	4b04      	ldr	r3, [pc, #16]	@ (8005a40 <vTaskSuspendAll+0x18>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3301      	adds	r3, #1
 8005a32:	4a03      	ldr	r2, [pc, #12]	@ (8005a40 <vTaskSuspendAll+0x18>)
 8005a34:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8005a36:	bf00      	nop
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	200002ec 	.word	0x200002ec

08005a44 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8005a44:	b4b0      	push	{r4, r5, r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	607b      	str	r3, [r7, #4]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8005a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005acc <prvGetExpectedIdleTime+0x88>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	607b      	str	r3, [r7, #4]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad0 <prvGetExpectedIdleTime+0x8c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <prvGetExpectedIdleTime+0x2e>
        {
            xReturn = 0;
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005a70:	e023      	b.n	8005aba <prvGetExpectedIdleTime+0x76>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1U )
 8005a72:	4b18      	ldr	r3, [pc, #96]	@ (8005ad4 <prvGetExpectedIdleTime+0x90>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d906      	bls.n	8005a88 <prvGetExpectedIdleTime+0x44>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	f04f 0300 	mov.w	r3, #0
 8005a82:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005a86:	e018      	b.n	8005aba <prvGetExpectedIdleTime+0x76>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d006      	beq.n	8005a9c <prvGetExpectedIdleTime+0x58>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005a9a:	e00e      	b.n	8005aba <prvGetExpectedIdleTime+0x76>
        }
        else
        {
            xReturn = xNextTaskUnblockTime;
 8005a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <prvGetExpectedIdleTime+0x94>)
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	e9c7 2302 	strd	r2, r3, [r7, #8]
            xReturn -= xTickCount;
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005adc <prvGetExpectedIdleTime+0x98>)
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ab0:	1a84      	subs	r4, r0, r2
 8005ab2:	eb61 0503 	sbc.w	r5, r1, r3
 8005ab6:	e9c7 4502 	strd	r4, r5, [r7, #8]
        }

        return xReturn;
 8005aba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bcb0      	pop	{r4, r5, r7}
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	200002c0 	.word	0x200002c0
 8005ad0:	20000158 	.word	0x20000158
 8005ad4:	20000160 	.word	0x20000160
 8005ad8:	200002e0 	.word	0x200002e0
 8005adc:	200002b8 	.word	0x200002b8

08005ae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ae0:	b5b0      	push	{r4, r5, r7, lr}
 8005ae2:	b08a      	sub	sp, #40	@ 0x28
 8005ae4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xAlreadyYielded = pdFALSE;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8005aee:	f001 fc79 	bl	80073e4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8005af6:	4b67      	ldr	r3, [pc, #412]	@ (8005c94 <xTaskResumeAll+0x1b4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	4a65      	ldr	r2, [pc, #404]	@ (8005c94 <xTaskResumeAll+0x1b4>)
 8005afe:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005b00:	4b64      	ldr	r3, [pc, #400]	@ (8005c94 <xTaskResumeAll+0x1b4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f040 80be 	bne.w	8005c86 <xTaskResumeAll+0x1a6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b0a:	4b63      	ldr	r3, [pc, #396]	@ (8005c98 <xTaskResumeAll+0x1b8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 80b9 	beq.w	8005c86 <xTaskResumeAll+0x1a6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b14:	e084      	b.n	8005c20 <xTaskResumeAll+0x140>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005b16:	4b61      	ldr	r3, [pc, #388]	@ (8005c9c <xTaskResumeAll+0x1bc>)
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b2a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005b36:	609a      	str	r2, [r3, #8]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	3320      	adds	r3, #32
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d103      	bne.n	8005b4c <xTaskResumeAll+0x6c>
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	605a      	str	r2, [r3, #4]
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	2200      	movs	r2, #0
 8005b50:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	1e5a      	subs	r2, r3, #1
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b68:	6952      	ldr	r2, [r2, #20]
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b72:	6912      	ldr	r2, [r2, #16]
 8005b74:	609a      	str	r2, [r3, #8]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d103      	bne.n	8005b8a <xTaskResumeAll+0xaa>
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	61da      	str	r2, [r3, #28]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	1e5a      	subs	r2, r3, #1
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b9e:	4b40      	ldr	r3, [pc, #256]	@ (8005ca0 <xTaskResumeAll+0x1c0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d903      	bls.n	8005bae <xTaskResumeAll+0xce>
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005baa:	4a3d      	ldr	r2, [pc, #244]	@ (8005ca0 <xTaskResumeAll+0x1c0>)
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb2:	4a3c      	ldr	r2, [pc, #240]	@ (8005ca4 <xTaskResumeAll+0x1c4>)
 8005bb4:	015b      	lsls	r3, r3, #5
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3304      	adds	r3, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	607b      	str	r3, [r7, #4]
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	611a      	str	r2, [r3, #16]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	615a      	str	r2, [r3, #20]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd2:	3208      	adds	r2, #8
 8005bd4:	609a      	str	r2, [r3, #8]
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	f103 0208 	add.w	r2, r3, #8
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60da      	str	r2, [r3, #12]
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be4:	015b      	lsls	r3, r3, #5
 8005be6:	4a2f      	ldr	r2, [pc, #188]	@ (8005ca4 <xTaskResumeAll+0x1c4>)
 8005be8:	441a      	add	r2, r3
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	61da      	str	r2, [r3, #28]
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca4 <xTaskResumeAll+0x1c4>)
 8005bf4:	015b      	lsls	r3, r3, #5
 8005bf6:	4413      	add	r3, r2
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfe:	3201      	adds	r2, #1
 8005c00:	4928      	ldr	r1, [pc, #160]	@ (8005ca4 <xTaskResumeAll+0x1c4>)
 8005c02:	015b      	lsls	r3, r3, #5
 8005c04:	440b      	add	r3, r1
 8005c06:	601a      	str	r2, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c0c:	4b26      	ldr	r3, [pc, #152]	@ (8005ca8 <xTaskResumeAll+0x1c8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d904      	bls.n	8005c20 <xTaskResumeAll+0x140>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8005c16:	4a25      	ldr	r2, [pc, #148]	@ (8005cac <xTaskResumeAll+0x1cc>)
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c20:	4b1e      	ldr	r3, [pc, #120]	@ (8005c9c <xTaskResumeAll+0x1bc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f47f af76 	bne.w	8005b16 <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <xTaskResumeAll+0x154>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8005c30:	f000 fcb6 	bl	80065a0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c34:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb0 <xTaskResumeAll+0x1d0>)
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	e9c7 2306 	strd	r2, r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8005c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	d01b      	beq.n	8005c7e <xTaskResumeAll+0x19e>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8005c46:	f000 f8c9 	bl	8005ddc <xTaskIncrementTick>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d004      	beq.n	8005c5a <xTaskResumeAll+0x17a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8005c50:	4a16      	ldr	r2, [pc, #88]	@ (8005cac <xTaskResumeAll+0x1cc>)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2101      	movs	r1, #1
 8005c56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8005c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c5e:	1e54      	subs	r4, r2, #1
 8005c60:	f143 35ff 	adc.w	r5, r3, #4294967295
 8005c64:	e9c7 4506 	strd	r4, r5, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8005c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	d1ea      	bne.n	8005c46 <xTaskResumeAll+0x166>

                            xPendedTicks = 0;
 8005c70:	490f      	ldr	r1, [pc, #60]	@ (8005cb0 <xTaskResumeAll+0x1d0>)
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	f04f 0300 	mov.w	r3, #0
 8005c7a:	e9c1 2300 	strd	r2, r3, [r1]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8005c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8005cac <xTaskResumeAll+0x1cc>)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005c86:	f001 fbc7 	bl	8007418 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8005c8a:	697b      	ldr	r3, [r7, #20]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3728      	adds	r7, #40	@ 0x28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bdb0      	pop	{r4, r5, r7, pc}
 8005c94:	200002ec 	.word	0x200002ec
 8005c98:	200002b0 	.word	0x200002b0
 8005c9c:	20000248 	.word	0x20000248
 8005ca0:	200002c0 	.word	0x200002c0
 8005ca4:	20000160 	.word	0x20000160
 8005ca8:	20000158 	.word	0x20000158
 8005cac:	200002d0 	.word	0x200002d0
 8005cb0:	200002c8 	.word	0x200002c8

08005cb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
 8005cba:	f001 fb93 	bl	80073e4 <vPortEnterCritical>
    {
        xTicks = xTickCount;
 8005cbe:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <xTaskGetTickCount+0x28>)
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	e9c7 2300 	strd	r2, r3, [r7]
    }
    portTICK_TYPE_EXIT_CRITICAL();
 8005cc8:	f001 fba6 	bl	8007418 <vPortExitCritical>

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8005ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200002b8 	.word	0x200002b8

08005ce0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b089      	sub	sp, #36	@ 0x24
 8005ce4:	af00      	add	r7, sp, #0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8005ce6:	f3ef 8211 	mrs	r2, BASEPRI
 8005cea:	f04f 0305 	mov.w	r3, #5
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	60ba      	str	r2, [r7, #8]
 8005cfc:	607b      	str	r3, [r7, #4]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005d00:	61fb      	str	r3, [r7, #28]
    {
        xReturn = xTickCount;
 8005d02:	4b0a      	ldr	r3, [pc, #40]	@ (8005d2c <xTaskGetTickCountFromISR+0x4c>)
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8005d16:	bf00      	nop
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
 8005d18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	3724      	adds	r7, #36	@ 0x24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	200002b8 	.word	0x200002b8

08005d30 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8005d34:	4b03      	ldr	r3, [pc, #12]	@ (8005d44 <uxTaskGetNumberOfTasks+0x14>)
 8005d36:	681b      	ldr	r3, [r3, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	200002b0 	.word	0x200002b0

08005d48 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 8005d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	b087      	sub	sp, #28
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	e9c7 0102 	strd	r0, r1, [r7, #8]
        traceENTER_vTaskStepTick( xTicksToJump );

        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        xUpdatedTickCount = xTickCount + xTicksToJump;
 8005d54:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd0 <vTaskStepTick+0x88>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d5e:	1886      	adds	r6, r0, r2
 8005d60:	603e      	str	r6, [r7, #0]
 8005d62:	eb41 0303 	adc.w	r3, r1, r3
 8005d66:	607b      	str	r3, [r7, #4]
 8005d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        configASSERT( xUpdatedTickCount <= xNextTaskUnblockTime );

        if( xUpdatedTickCount == xNextTaskUnblockTime )
 8005d70:	4b18      	ldr	r3, [pc, #96]	@ (8005dd4 <vTaskStepTick+0x8c>)
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d7a:	4299      	cmp	r1, r3
 8005d7c:	bf08      	it	eq
 8005d7e:	4290      	cmpeq	r0, r2
 8005d80:	d115      	bne.n	8005dae <vTaskStepTick+0x66>
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
            configASSERT( xTicksToJump != ( TickType_t ) 0 );

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 8005d82:	f001 fb2f 	bl	80073e4 <vPortEnterCritical>
            {
                xPendedTicks++;
 8005d86:	4b14      	ldr	r3, [pc, #80]	@ (8005dd8 <vTaskStepTick+0x90>)
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f112 0a01 	adds.w	sl, r2, #1
 8005d90:	f143 0b00 	adc.w	fp, r3, #0
 8005d94:	4b10      	ldr	r3, [pc, #64]	@ (8005dd8 <vTaskStepTick+0x90>)
 8005d96:	e9c3 ab00 	strd	sl, fp, [r3]
            }
            taskEXIT_CRITICAL();
 8005d9a:	f001 fb3d 	bl	8007418 <vPortExitCritical>
            xTicksToJump--;
 8005d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005da2:	f112 38ff 	adds.w	r8, r2, #4294967295
 8005da6:	f143 39ff 	adc.w	r9, r3, #4294967295
 8005daa:	e9c7 8902 	strd	r8, r9, [r7, #8]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 8005dae:	4b08      	ldr	r3, [pc, #32]	@ (8005dd0 <vTaskStepTick+0x88>)
 8005db0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005db8:	1884      	adds	r4, r0, r2
 8005dba:	eb41 0503 	adc.w	r5, r1, r3
 8005dbe:	4b04      	ldr	r3, [pc, #16]	@ (8005dd0 <vTaskStepTick+0x88>)
 8005dc0:	e9c3 4500 	strd	r4, r5, [r3]

        traceINCREASE_TICK_COUNT( xTicksToJump );
        traceRETURN_vTaskStepTick();
    }
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	bf00      	nop
 8005dd0:	200002b8 	.word	0x200002b8
 8005dd4:	200002e0 	.word	0x200002e0
 8005dd8:	200002c8 	.word	0x200002c8

08005ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ddc:	b5b0      	push	{r4, r5, r7, lr}
 8005dde:	b08c      	sub	sp, #48	@ 0x30
 8005de0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005de6:	4b6f      	ldr	r3, [pc, #444]	@ (8005fa4 <xTaskIncrementTick+0x1c8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f040 80cb 	bne.w	8005f86 <xTaskIncrementTick+0x1aa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005df0:	4b6d      	ldr	r3, [pc, #436]	@ (8005fa8 <xTaskIncrementTick+0x1cc>)
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	1c54      	adds	r4, r2, #1
 8005df8:	f143 0500 	adc.w	r5, r3, #0
 8005dfc:	e9c7 4508 	strd	r4, r5, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005e00:	4969      	ldr	r1, [pc, #420]	@ (8005fa8 <xTaskIncrementTick+0x1cc>)
 8005e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e06:	e9c1 2300 	strd	r2, r3, [r1]

        if( xConstTickCount == ( TickType_t ) 0U )
 8005e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	d110      	bne.n	8005e34 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8005e12:	4b66      	ldr	r3, [pc, #408]	@ (8005fac <xTaskIncrementTick+0x1d0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	4b65      	ldr	r3, [pc, #404]	@ (8005fb0 <xTaskIncrementTick+0x1d4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a63      	ldr	r2, [pc, #396]	@ (8005fac <xTaskIncrementTick+0x1d0>)
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	4a63      	ldr	r2, [pc, #396]	@ (8005fb0 <xTaskIncrementTick+0x1d4>)
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	4b63      	ldr	r3, [pc, #396]	@ (8005fb4 <xTaskIncrementTick+0x1d8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	4a61      	ldr	r2, [pc, #388]	@ (8005fb4 <xTaskIncrementTick+0x1d8>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	f000 fbb6 	bl	80065a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005e34:	4b60      	ldr	r3, [pc, #384]	@ (8005fb8 <xTaskIncrementTick+0x1dc>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e3e:	4290      	cmp	r0, r2
 8005e40:	eb71 0303 	sbcs.w	r3, r1, r3
 8005e44:	f0c0 80a8 	bcc.w	8005f98 <xTaskIncrementTick+0x1bc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e48:	4b58      	ldr	r3, [pc, #352]	@ (8005fac <xTaskIncrementTick+0x1d0>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8005e52:	4959      	ldr	r1, [pc, #356]	@ (8005fb8 <xTaskIncrementTick+0x1dc>)
 8005e54:	f04f 32ff 	mov.w	r2, #4294967295
 8005e58:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5c:	e9c1 2300 	strd	r2, r3, [r1]
                    break;
 8005e60:	e09a      	b.n	8005f98 <xTaskIncrementTick+0x1bc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e62:	4b52      	ldr	r3, [pc, #328]	@ (8005fac <xTaskIncrementTick+0x1d0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005e72:	e9c7 2304 	strd	r2, r3, [r7, #16]

                    if( xConstTickCount < xItemValue )
 8005e76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e7e:	4290      	cmp	r0, r2
 8005e80:	eb71 0303 	sbcs.w	r3, r1, r3
 8005e84:	d205      	bcs.n	8005e92 <xTaskIncrementTick+0xb6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005e86:	494c      	ldr	r1, [pc, #304]	@ (8005fb8 <xTaskIncrementTick+0x1dc>)
 8005e88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e8c:	e9c1 2300 	strd	r2, r3, [r1]
                        break;
 8005e90:	e082      	b.n	8005f98 <xTaskIncrementTick+0x1bc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	6952      	ldr	r2, [r2, #20]
 8005ea0:	60da      	str	r2, [r3, #12]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	6912      	ldr	r2, [r2, #16]
 8005eaa:	609a      	str	r2, [r3, #8]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d103      	bne.n	8005ec0 <xTaskIncrementTick+0xe4>
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	605a      	str	r2, [r3, #4]
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	61da      	str	r2, [r3, #28]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	1e5a      	subs	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01e      	beq.n	8005f16 <xTaskIncrementTick+0x13a>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ee6:	60da      	str	r2, [r3, #12]
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005ef0:	609a      	str	r2, [r3, #8]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	3320      	adds	r3, #32
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d103      	bne.n	8005f06 <xTaskIncrementTick+0x12a>
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	605a      	str	r2, [r3, #4]
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	1e5a      	subs	r2, r3, #1
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f1a:	4b28      	ldr	r3, [pc, #160]	@ (8005fbc <xTaskIncrementTick+0x1e0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d903      	bls.n	8005f2a <xTaskIncrementTick+0x14e>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f26:	4a25      	ldr	r2, [pc, #148]	@ (8005fbc <xTaskIncrementTick+0x1e0>)
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	4a24      	ldr	r2, [pc, #144]	@ (8005fc0 <xTaskIncrementTick+0x1e4>)
 8005f30:	015b      	lsls	r3, r3, #5
 8005f32:	4413      	add	r3, r2
 8005f34:	3304      	adds	r3, #4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	607b      	str	r3, [r7, #4]
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	611a      	str	r2, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	615a      	str	r2, [r3, #20]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	3208      	adds	r2, #8
 8005f50:	609a      	str	r2, [r3, #8]
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f103 0208 	add.w	r2, r3, #8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60da      	str	r2, [r3, #12]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f60:	015b      	lsls	r3, r3, #5
 8005f62:	4a17      	ldr	r2, [pc, #92]	@ (8005fc0 <xTaskIncrementTick+0x1e4>)
 8005f64:	441a      	add	r2, r3
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	61da      	str	r2, [r3, #28]
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6e:	4a14      	ldr	r2, [pc, #80]	@ (8005fc0 <xTaskIncrementTick+0x1e4>)
 8005f70:	015b      	lsls	r3, r3, #5
 8005f72:	4413      	add	r3, r2
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7a:	3201      	adds	r2, #1
 8005f7c:	4910      	ldr	r1, [pc, #64]	@ (8005fc0 <xTaskIncrementTick+0x1e4>)
 8005f7e:	015b      	lsls	r3, r3, #5
 8005f80:	440b      	add	r3, r1
 8005f82:	601a      	str	r2, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f84:	e760      	b.n	8005e48 <xTaskIncrementTick+0x6c>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8005f86:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc4 <xTaskIncrementTick+0x1e8>)
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	1c50      	adds	r0, r2, #1
 8005f8e:	f143 0100 	adc.w	r1, r3, #0
 8005f92:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc4 <xTaskIncrementTick+0x1e8>)
 8005f94:	e9c3 0100 	strd	r0, r1, [r3]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8005f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3730      	adds	r7, #48	@ 0x30
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	200002ec 	.word	0x200002ec
 8005fa8:	200002b8 	.word	0x200002b8
 8005fac:	20000240 	.word	0x20000240
 8005fb0:	20000244 	.word	0x20000244
 8005fb4:	200002d4 	.word	0x200002d4
 8005fb8:	200002e0 	.word	0x200002e0
 8005fbc:	200002c0 	.word	0x200002c0
 8005fc0:	20000160 	.word	0x20000160
 8005fc4:	200002c8 	.word	0x200002c8

08005fc8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8005fce:	4b1e      	ldr	r3, [pc, #120]	@ (8006048 <vTaskSwitchContext+0x80>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800604c <vTaskSwitchContext+0x84>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8005fdc:	e02e      	b.n	800603c <vTaskSwitchContext+0x74>
            xYieldPendings[ 0 ] = pdFALSE;
 8005fde:	4b1b      	ldr	r3, [pc, #108]	@ (800604c <vTaskSwitchContext+0x84>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8005fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8006050 <vTaskSwitchContext+0x88>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	e002      	b.n	8005ff2 <vTaskSwitchContext+0x2a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	607b      	str	r3, [r7, #4]
 8005ff2:	4a18      	ldr	r2, [pc, #96]	@ (8006054 <vTaskSwitchContext+0x8c>)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	015b      	lsls	r3, r3, #5
 8005ff8:	4413      	add	r3, r2
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f5      	beq.n	8005fec <vTaskSwitchContext+0x24>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	015b      	lsls	r3, r3, #5
 8006004:	4a13      	ldr	r2, [pc, #76]	@ (8006054 <vTaskSwitchContext+0x8c>)
 8006006:	4413      	add	r3, r2
 8006008:	603b      	str	r3, [r7, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	605a      	str	r2, [r3, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	429a      	cmp	r2, r3
 800601e:	d103      	bne.n	8006028 <vTaskSwitchContext+0x60>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	605a      	str	r2, [r3, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	4a0a      	ldr	r2, [pc, #40]	@ (8006058 <vTaskSwitchContext+0x90>)
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	4a07      	ldr	r2, [pc, #28]	@ (8006050 <vTaskSwitchContext+0x88>)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8006038:	4b07      	ldr	r3, [pc, #28]	@ (8006058 <vTaskSwitchContext+0x90>)
 800603a:	681b      	ldr	r3, [r3, #0]
    }
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	200002ec 	.word	0x200002ec
 800604c:	200002d0 	.word	0x200002d0
 8006050:	200002c0 	.word	0x200002c0
 8006054:	20000160 	.word	0x20000160
 8006058:	20000158 	.word	0x20000158

0800605c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	e9c7 2300 	strd	r2, r3, [r7]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006068:	4b07      	ldr	r3, [pc, #28]	@ (8006088 <vTaskPlaceOnEventList+0x2c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3320      	adds	r3, #32
 800606e:	4619      	mov	r1, r3
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7fe ff29 	bl	8004ec8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006076:	2201      	movs	r2, #1
 8006078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800607c:	f000 fd2e 	bl	8006adc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20000158 	.word	0x20000158

0800608c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	e9c7 2300 	strd	r2, r3, [r7]

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	4b18      	ldr	r3, [pc, #96]	@ (8006100 <vTaskPlaceOnEventListRestricted+0x74>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80060a6:	4b16      	ldr	r3, [pc, #88]	@ (8006100 <vTaskPlaceOnEventListRestricted+0x74>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	68d2      	ldr	r2, [r2, #12]
 80060ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060b0:	4b13      	ldr	r3, [pc, #76]	@ (8006100 <vTaskPlaceOnEventListRestricted+0x74>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	3220      	adds	r2, #32
 80060ba:	609a      	str	r2, [r3, #8]
 80060bc:	4b10      	ldr	r3, [pc, #64]	@ (8006100 <vTaskPlaceOnEventListRestricted+0x74>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f103 0220 	add.w	r2, r3, #32
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	60da      	str	r2, [r3, #12]
 80060c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006100 <vTaskPlaceOnEventListRestricted+0x74>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <vTaskPlaceOnEventListRestricted+0x60>
        {
            xTicksToWait = portMAX_DELAY;
 80060e0:	f04f 32ff 	mov.w	r2, #4294967295
 80060e4:	f04f 33ff 	mov.w	r3, #4294967295
 80060e8:	e9c7 2300 	strd	r2, r3, [r7]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060f2:	f000 fcf3 	bl	8006adc <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000158 	.word	0x20000158

08006104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006122:	60da      	str	r2, [r3, #12]
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800612c:	609a      	str	r2, [r3, #8]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	3320      	adds	r3, #32
 8006136:	429a      	cmp	r2, r3
 8006138:	d103      	bne.n	8006142 <xTaskRemoveFromEventList+0x3e>
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	605a      	str	r2, [r3, #4]
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	2200      	movs	r2, #0
 8006146:	635a      	str	r2, [r3, #52]	@ 0x34
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	1e5a      	subs	r2, r3, #1
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006152:	4b46      	ldr	r3, [pc, #280]	@ (800626c <xTaskRemoveFromEventList+0x168>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d158      	bne.n	800620c <xTaskRemoveFromEventList+0x108>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	6952      	ldr	r2, [r2, #20]
 8006168:	60da      	str	r2, [r3, #12]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	6912      	ldr	r2, [r2, #16]
 8006172:	609a      	str	r2, [r3, #8]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	3308      	adds	r3, #8
 800617c:	429a      	cmp	r2, r3
 800617e:	d103      	bne.n	8006188 <xTaskRemoveFromEventList+0x84>
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	605a      	str	r2, [r3, #4]
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2200      	movs	r2, #0
 800618c:	61da      	str	r2, [r3, #28]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	1e5a      	subs	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800619c:	4b34      	ldr	r3, [pc, #208]	@ (8006270 <xTaskRemoveFromEventList+0x16c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d903      	bls.n	80061ac <xTaskRemoveFromEventList+0xa8>
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a8:	4a31      	ldr	r2, [pc, #196]	@ (8006270 <xTaskRemoveFromEventList+0x16c>)
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b0:	4a30      	ldr	r2, [pc, #192]	@ (8006274 <xTaskRemoveFromEventList+0x170>)
 80061b2:	015b      	lsls	r3, r3, #5
 80061b4:	4413      	add	r3, r2
 80061b6:	3304      	adds	r3, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	611a      	str	r2, [r3, #16]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	615a      	str	r2, [r3, #20]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	3208      	adds	r2, #8
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f103 0208 	add.w	r2, r3, #8
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	60da      	str	r2, [r3, #12]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	015b      	lsls	r3, r3, #5
 80061e4:	4a23      	ldr	r2, [pc, #140]	@ (8006274 <xTaskRemoveFromEventList+0x170>)
 80061e6:	441a      	add	r2, r3
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	61da      	str	r2, [r3, #28]
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f0:	4a20      	ldr	r2, [pc, #128]	@ (8006274 <xTaskRemoveFromEventList+0x170>)
 80061f2:	015b      	lsls	r3, r3, #5
 80061f4:	4413      	add	r3, r2
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	3201      	adds	r2, #1
 80061fe:	491d      	ldr	r1, [pc, #116]	@ (8006274 <xTaskRemoveFromEventList+0x170>)
 8006200:	015b      	lsls	r3, r3, #5
 8006202:	440b      	add	r3, r1
 8006204:	601a      	str	r2, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 8006206:	f000 f9cb 	bl	80065a0 <prvResetNextTaskUnblockTime>
 800620a:	e01b      	b.n	8006244 <xTaskRemoveFromEventList+0x140>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800620c:	4b1a      	ldr	r3, [pc, #104]	@ (8006278 <xTaskRemoveFromEventList+0x174>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	629a      	str	r2, [r3, #40]	@ 0x28
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	3220      	adds	r2, #32
 8006228:	609a      	str	r2, [r3, #8]
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f103 0220 	add.w	r2, r3, #32
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	60da      	str	r2, [r3, #12]
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	4a10      	ldr	r2, [pc, #64]	@ (8006278 <xTaskRemoveFromEventList+0x174>)
 8006238:	635a      	str	r2, [r3, #52]	@ 0x34
 800623a:	4b0f      	ldr	r3, [pc, #60]	@ (8006278 <xTaskRemoveFromEventList+0x174>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3301      	adds	r3, #1
 8006240:	4a0d      	ldr	r2, [pc, #52]	@ (8006278 <xTaskRemoveFromEventList+0x174>)
 8006242:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006248:	4b0c      	ldr	r3, [pc, #48]	@ (800627c <xTaskRemoveFromEventList+0x178>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624e:	429a      	cmp	r2, r3
 8006250:	d905      	bls.n	800625e <xTaskRemoveFromEventList+0x15a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8006252:	2301      	movs	r3, #1
 8006254:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8006256:	4b0a      	ldr	r3, [pc, #40]	@ (8006280 <xTaskRemoveFromEventList+0x17c>)
 8006258:	2201      	movs	r2, #1
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	e001      	b.n	8006262 <xTaskRemoveFromEventList+0x15e>
        }
        else
        {
            xReturn = pdFALSE;
 800625e:	2300      	movs	r3, #0
 8006260:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8006262:	69fb      	ldr	r3, [r7, #28]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	200002ec 	.word	0x200002ec
 8006270:	200002c0 	.word	0x200002c0
 8006274:	20000160 	.word	0x20000160
 8006278:	20000248 	.word	0x20000248
 800627c:	20000158 	.word	0x20000158
 8006280:	200002d0 	.word	0x200002d0

08006284 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800628c:	4b07      	ldr	r3, [pc, #28]	@ (80062ac <vTaskInternalSetTimeOutState+0x28>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006294:	4b06      	ldr	r3, [pc, #24]	@ (80062b0 <vTaskInternalSetTimeOutState+0x2c>)
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	e9c1 2302 	strd	r2, r3, [r1, #8]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	200002d4 	.word	0x200002d4
 80062b0:	200002b8 	.word	0x200002b8

080062b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80062b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80062b8:	b088      	sub	sp, #32
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80062c0:	f001 f890 	bl	80073e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80062c4:	4b36      	ldr	r3, [pc, #216]	@ (80063a0 <xTaskCheckForTimeOut+0xec>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80062d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80062d8:	ebb0 0802 	subs.w	r8, r0, r2
 80062dc:	eb61 0903 	sbc.w	r9, r1, r3
 80062e0:	e9c7 8902 	strd	r8, r9, [r7, #8]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80062e4:	4b2f      	ldr	r3, [pc, #188]	@ (80063a4 <xTaskCheckForTimeOut+0xf0>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <xTaskCheckForTimeOut+0x4c>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 80062f0:	4b2c      	ldr	r3, [pc, #176]	@ (80063a4 <xTaskCheckForTimeOut+0xf0>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
                xReturn = pdTRUE;
 80062fa:	2301      	movs	r3, #1
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	e047      	b.n	8006390 <xTaskCheckForTimeOut+0xdc>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	bf08      	it	eq
 800630c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8006310:	d102      	bne.n	8006318 <xTaskCheckForTimeOut+0x64>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006312:	2300      	movs	r3, #0
 8006314:	61fb      	str	r3, [r7, #28]
 8006316:	e03b      	b.n	8006390 <xTaskCheckForTimeOut+0xdc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	4b22      	ldr	r3, [pc, #136]	@ (80063a8 <xTaskCheckForTimeOut+0xf4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d012      	beq.n	800634a <xTaskCheckForTimeOut+0x96>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800632a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800632e:	4290      	cmp	r0, r2
 8006330:	eb71 0303 	sbcs.w	r3, r1, r3
 8006334:	d309      	bcc.n	800634a <xTaskCheckForTimeOut+0x96>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006336:	2301      	movs	r3, #1
 8006338:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	e9c1 2300 	strd	r2, r3, [r1]
 8006348:	e022      	b.n	8006390 <xTaskCheckForTimeOut+0xdc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006354:	4290      	cmp	r0, r2
 8006356:	eb71 0303 	sbcs.w	r3, r1, r3
 800635a:	d210      	bcs.n	800637e <xTaskCheckForTimeOut+0xca>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006366:	1a84      	subs	r4, r0, r2
 8006368:	eb61 0503 	sbc.w	r5, r1, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	e9c3 4500 	strd	r4, r5, [r3]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff ff86 	bl	8006284 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006378:	2300      	movs	r3, #0
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	e008      	b.n	8006390 <xTaskCheckForTimeOut+0xdc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	e9c1 2300 	strd	r2, r3, [r1]
            xReturn = pdTRUE;
 800638c:	2301      	movs	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006390:	f001 f842 	bl	8007418 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8006394:	69fb      	ldr	r3, [r7, #28]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3720      	adds	r7, #32
 800639a:	46bd      	mov	sp, r7
 800639c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80063a0:	200002b8 	.word	0x200002b8
 80063a4:	20000158 	.word	0x20000158
 80063a8:	200002d4 	.word	0x200002d4

080063ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80063b0:	4b03      	ldr	r3, [pc, #12]	@ (80063c0 <vTaskMissedYield+0x14>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80063b6:	bf00      	nop
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	200002d0 	.word	0x200002d0

080063c4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80063cc:	f000 f89c 	bl	8006508 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80063d0:	4b12      	ldr	r3, [pc, #72]	@ (800641c <prvIdleTask+0x58>)
 80063d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 80063e0:	f7ff fb30 	bl	8005a44 <prvGetExpectedIdleTime>
 80063e4:	e9c7 0102 	strd	r0, r1, [r7, #8]

            if( xExpectedIdleTime >= ( TickType_t ) configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80063e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063ec:	2a02      	cmp	r2, #2
 80063ee:	f173 0300 	sbcs.w	r3, r3, #0
 80063f2:	d3eb      	bcc.n	80063cc <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 80063f4:	f7ff fb18 	bl	8005a28 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 80063f8:	f7ff fb24 	bl	8005a44 <prvGetExpectedIdleTime>
 80063fc:	e9c7 0102 	strd	r0, r1, [r7, #8]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= ( TickType_t ) configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8006400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006404:	2a02      	cmp	r2, #2
 8006406:	f173 0300 	sbcs.w	r3, r3, #0
 800640a:	d303      	bcc.n	8006414 <prvIdleTask+0x50>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800640c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006410:	f001 f874 	bl	80074fc <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 8006414:	f7ff fb64 	bl	8005ae0 <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 8006418:	e7d8      	b.n	80063cc <prvIdleTask+0x8>
 800641a:	bf00      	nop
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = configNUMBER_OF_CORES;
 8006426:	2301      	movs	r3, #1
 8006428:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 800642a:	2301      	movs	r3, #1
 800642c:	71fb      	strb	r3, [r7, #7]

        traceENTER_eTaskConfirmSleepModeStatus();

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0U )
 800642e:	4b13      	ldr	r3, [pc, #76]	@ (800647c <eTaskConfirmSleepModeStatus+0x5c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 8006436:	2300      	movs	r3, #0
 8006438:	71fb      	strb	r3, [r7, #7]
 800643a:	e018      	b.n	800646e <eTaskConfirmSleepModeStatus+0x4e>
        }
        else if( xYieldPendings[ portGET_CORE_ID() ] != pdFALSE )
 800643c:	4b10      	ldr	r3, [pc, #64]	@ (8006480 <eTaskConfirmSleepModeStatus+0x60>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 8006444:	2300      	movs	r3, #0
 8006446:	71fb      	strb	r3, [r7, #7]
 8006448:	e011      	b.n	800646e <eTaskConfirmSleepModeStatus+0x4e>
        }
        else if( xPendedTicks != 0U )
 800644a:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <eTaskConfirmSleepModeStatus+0x64>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	4313      	orrs	r3, r2
 8006452:	d002      	beq.n	800645a <eTaskConfirmSleepModeStatus+0x3a>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 8006454:	2300      	movs	r3, #0
 8006456:	71fb      	strb	r3, [r7, #7]
 8006458:	e009      	b.n	800646e <eTaskConfirmSleepModeStatus+0x4e>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800645a:	4b0b      	ldr	r3, [pc, #44]	@ (8006488 <eTaskConfirmSleepModeStatus+0x68>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <eTaskConfirmSleepModeStatus+0x6c>)
 8006460:	6819      	ldr	r1, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	1acb      	subs	r3, r1, r3
 8006466:	429a      	cmp	r2, r3
 8006468:	d101      	bne.n	800646e <eTaskConfirmSleepModeStatus+0x4e>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 800646a:	2302      	movs	r3, #2
 800646c:	71fb      	strb	r3, [r7, #7]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_eTaskConfirmSleepModeStatus( eReturn );

        return eReturn;
 800646e:	79fb      	ldrb	r3, [r7, #7]
    }
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20000248 	.word	0x20000248
 8006480:	200002d0 	.word	0x200002d0
 8006484:	200002c8 	.word	0x200002c8
 8006488:	20000290 	.word	0x20000290
 800648c:	200002b0 	.word	0x200002b0

08006490 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006496:	2300      	movs	r3, #0
 8006498:	607b      	str	r3, [r7, #4]
 800649a:	e009      	b.n	80064b0 <prvInitialiseTaskLists+0x20>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	015b      	lsls	r3, r3, #5
 80064a0:	4a11      	ldr	r2, [pc, #68]	@ (80064e8 <prvInitialiseTaskLists+0x58>)
 80064a2:	4413      	add	r3, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe fcd9 	bl	8004e5c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3301      	adds	r3, #1
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d9f2      	bls.n	800649c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80064b6:	480d      	ldr	r0, [pc, #52]	@ (80064ec <prvInitialiseTaskLists+0x5c>)
 80064b8:	f7fe fcd0 	bl	8004e5c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80064bc:	480c      	ldr	r0, [pc, #48]	@ (80064f0 <prvInitialiseTaskLists+0x60>)
 80064be:	f7fe fccd 	bl	8004e5c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80064c2:	480c      	ldr	r0, [pc, #48]	@ (80064f4 <prvInitialiseTaskLists+0x64>)
 80064c4:	f7fe fcca 	bl	8004e5c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80064c8:	480b      	ldr	r0, [pc, #44]	@ (80064f8 <prvInitialiseTaskLists+0x68>)
 80064ca:	f7fe fcc7 	bl	8004e5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80064ce:	480b      	ldr	r0, [pc, #44]	@ (80064fc <prvInitialiseTaskLists+0x6c>)
 80064d0:	f7fe fcc4 	bl	8004e5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80064d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006500 <prvInitialiseTaskLists+0x70>)
 80064d6:	4a05      	ldr	r2, [pc, #20]	@ (80064ec <prvInitialiseTaskLists+0x5c>)
 80064d8:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064da:	4b0a      	ldr	r3, [pc, #40]	@ (8006504 <prvInitialiseTaskLists+0x74>)
 80064dc:	4a04      	ldr	r2, [pc, #16]	@ (80064f0 <prvInitialiseTaskLists+0x60>)
 80064de:	601a      	str	r2, [r3, #0]
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20000160 	.word	0x20000160
 80064ec:	20000200 	.word	0x20000200
 80064f0:	20000220 	.word	0x20000220
 80064f4:	20000248 	.word	0x20000248
 80064f8:	20000268 	.word	0x20000268
 80064fc:	20000290 	.word	0x20000290
 8006500:	20000240 	.word	0x20000240
 8006504:	20000244 	.word	0x20000244

08006508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800650e:	e019      	b.n	8006544 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8006510:	f000 ff68 	bl	80073e4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006514:	4b10      	ldr	r3, [pc, #64]	@ (8006558 <prvCheckTasksWaitingTermination+0x50>)
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3308      	adds	r3, #8
 8006520:	4618      	mov	r0, r3
 8006522:	f7fe fd14 	bl	8004f4e <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8006526:	4b0d      	ldr	r3, [pc, #52]	@ (800655c <prvCheckTasksWaitingTermination+0x54>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3b01      	subs	r3, #1
 800652c:	4a0b      	ldr	r2, [pc, #44]	@ (800655c <prvCheckTasksWaitingTermination+0x54>)
 800652e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8006530:	4b0b      	ldr	r3, [pc, #44]	@ (8006560 <prvCheckTasksWaitingTermination+0x58>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3b01      	subs	r3, #1
 8006536:	4a0a      	ldr	r2, [pc, #40]	@ (8006560 <prvCheckTasksWaitingTermination+0x58>)
 8006538:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800653a:	f000 ff6d 	bl	8007418 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f810 	bl	8006564 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006544:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <prvCheckTasksWaitingTermination+0x58>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e1      	bne.n	8006510 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000268 	.word	0x20000268
 800655c:	200002b0 	.word	0x200002b0
 8006560:	20000288 	.word	0x20000288

08006564 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8006572:	2b00      	cmp	r3, #0
 8006574:	d108      	bne.n	8006588 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657a:	4618      	mov	r0, r3
 800657c:	f001 f98c 	bl	8007898 <vPortFree>
                vPortFree( pxTCB );
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 f989 	bl	8007898 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006586:	e007      	b.n	8006598 <prvDeleteTCB+0x34>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800658e:	2b01      	cmp	r3, #1
 8006590:	d102      	bne.n	8006598 <prvDeleteTCB+0x34>
                vPortFree( pxTCB );
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 f980 	bl	8007898 <vPortFree>
    }
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a4:	4b0c      	ldr	r3, [pc, #48]	@ (80065d8 <prvResetNextTaskUnblockTime+0x38>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d107      	bne.n	80065be <prvResetNextTaskUnblockTime+0x1e>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80065ae:	490b      	ldr	r1, [pc, #44]	@ (80065dc <prvResetNextTaskUnblockTime+0x3c>)
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295
 80065b4:	f04f 33ff 	mov.w	r3, #4294967295
 80065b8:	e9c1 2300 	strd	r2, r3, [r1]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80065bc:	e007      	b.n	80065ce <prvResetNextTaskUnblockTime+0x2e>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065be:	4b06      	ldr	r3, [pc, #24]	@ (80065d8 <prvResetNextTaskUnblockTime+0x38>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	4904      	ldr	r1, [pc, #16]	@ (80065dc <prvResetNextTaskUnblockTime+0x3c>)
 80065ca:	e9c1 2300 	strd	r2, r3, [r1]
}
 80065ce:	bf00      	nop
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	20000240 	.word	0x20000240
 80065dc:	200002e0 	.word	0x200002e0

080065e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80065e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80065e4:	b086      	sub	sp, #24
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d05d      	beq.n	80066b4 <xTaskPriorityDisinherit+0xd4>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065fc:	1e5a      	subs	r2, r3, #1
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660a:	429a      	cmp	r2, r3
 800660c:	d052      	beq.n	80066b4 <xTaskPriorityDisinherit+0xd4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006612:	2b00      	cmp	r3, #0
 8006614:	d14e      	bne.n	80066b4 <xTaskPriorityDisinherit+0xd4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	3308      	adds	r3, #8
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe fc97 	bl	8004f4e <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662c:	2200      	movs	r2, #0
 800662e:	461c      	mov	r4, r3
 8006630:	4615      	mov	r5, r2
 8006632:	2300      	movs	r3, #0
 8006634:	f1d4 0805 	rsbs	r8, r4, #5
 8006638:	eb63 0905 	sbc.w	r9, r3, r5
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	e9c3 8908 	strd	r8, r9, [r3, #32]
                    prvAddTaskToReadyList( pxTCB );
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006646:	4b1e      	ldr	r3, [pc, #120]	@ (80066c0 <xTaskPriorityDisinherit+0xe0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d903      	bls.n	8006656 <xTaskPriorityDisinherit+0x76>
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006652:	4a1b      	ldr	r2, [pc, #108]	@ (80066c0 <xTaskPriorityDisinherit+0xe0>)
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800665a:	4a1a      	ldr	r2, [pc, #104]	@ (80066c4 <xTaskPriorityDisinherit+0xe4>)
 800665c:	015b      	lsls	r3, r3, #5
 800665e:	4413      	add	r3, r2
 8006660:	3304      	adds	r3, #4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	611a      	str	r2, [r3, #16]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	615a      	str	r2, [r3, #20]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	3208      	adds	r2, #8
 800667c:	609a      	str	r2, [r3, #8]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f103 0208 	add.w	r2, r3, #8
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	60da      	str	r2, [r3, #12]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668c:	015b      	lsls	r3, r3, #5
 800668e:	4a0d      	ldr	r2, [pc, #52]	@ (80066c4 <xTaskPriorityDisinherit+0xe4>)
 8006690:	441a      	add	r2, r3
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	61da      	str	r2, [r3, #28]
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669a:	4a0a      	ldr	r2, [pc, #40]	@ (80066c4 <xTaskPriorityDisinherit+0xe4>)
 800669c:	015b      	lsls	r3, r3, #5
 800669e:	4413      	add	r3, r2
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a6:	3201      	adds	r2, #1
 80066a8:	4906      	ldr	r1, [pc, #24]	@ (80066c4 <xTaskPriorityDisinherit+0xe4>)
 80066aa:	015b      	lsls	r3, r3, #5
 80066ac:	440b      	add	r3, r1
 80066ae:	601a      	str	r2, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 80066b4:	697b      	ldr	r3, [r7, #20]
    }
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80066c0:	200002c0 	.word	0x200002c0
 80066c4:	20000160 	.word	0x20000160

080066c8 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	e9c7 2300 	strd	r2, r3, [r7]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80066da:	f7ff f9a5 	bl	8005a28 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 80066de:	f000 fe81 	bl	80073e4 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 80066e2:	4b2e      	ldr	r3, [pc, #184]	@ (800679c <ulTaskGenericNotifyTake+0xd4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	3214      	adds	r2, #20
 80066ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10c      	bne.n	800670c <ulTaskGenericNotifyTake+0x44>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80066f2:	4b2a      	ldr	r3, [pc, #168]	@ (800679c <ulTaskGenericNotifyTake+0xd4>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4413      	add	r3, r2
 80066fa:	3354      	adds	r3, #84	@ 0x54
 80066fc:	2201      	movs	r2, #1
 80066fe:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8006700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006704:	4313      	orrs	r3, r2
 8006706:	d001      	beq.n	800670c <ulTaskGenericNotifyTake+0x44>
                    {
                        xShouldBlock = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800670c:	f000 fe84 	bl	8007418 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d104      	bne.n	8006720 <ulTaskGenericNotifyTake+0x58>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006716:	2201      	movs	r2, #1
 8006718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800671c:	f000 f9de 	bl	8006adc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8006720:	f7ff f9de 	bl	8005ae0 <xTaskResumeAll>
 8006724:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d10a      	bne.n	8006742 <ulTaskGenericNotifyTake+0x7a>
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d107      	bne.n	8006742 <ulTaskGenericNotifyTake+0x7a>
        {
            taskYIELD_WITHIN_API();
 8006732:	4b1b      	ldr	r3, [pc, #108]	@ (80067a0 <ulTaskGenericNotifyTake+0xd8>)
 8006734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8006742:	f000 fe4f 	bl	80073e4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8006746:	4b15      	ldr	r3, [pc, #84]	@ (800679c <ulTaskGenericNotifyTake+0xd4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	3214      	adds	r2, #20
 800674e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006752:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d012      	beq.n	8006780 <ulTaskGenericNotifyTake+0xb8>
            {
                if( xClearCountOnExit != pdFALSE )
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <ulTaskGenericNotifyTake+0xa8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8006760:	4b0e      	ldr	r3, [pc, #56]	@ (800679c <ulTaskGenericNotifyTake+0xd4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	3214      	adds	r2, #20
 8006768:	2100      	movs	r1, #0
 800676a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800676e:	e007      	b.n	8006780 <ulTaskGenericNotifyTake+0xb8>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8006770:	4b0a      	ldr	r3, [pc, #40]	@ (800679c <ulTaskGenericNotifyTake+0xd4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	1e51      	subs	r1, r2, #1
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	3214      	adds	r2, #20
 800677c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8006780:	4b06      	ldr	r3, [pc, #24]	@ (800679c <ulTaskGenericNotifyTake+0xd4>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	3354      	adds	r3, #84	@ 0x54
 800678a:	2200      	movs	r2, #0
 800678c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800678e:	f000 fe43 	bl	8007418 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8006792:	697b      	ldr	r3, [r7, #20]
    }
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000158 	.word	0x20000158
 80067a0:	e000ed04 	.word	0xe000ed04

080067a4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	@ 0x28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80067b2:	2301      	movs	r3, #1
 80067b4:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 80067ba:	f000 fe13 	bl	80073e4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d006      	beq.n	80067d2 <xTaskGenericNotify+0x2e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	3214      	adds	r2, #20
 80067ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80067d2:	6a3a      	ldr	r2, [r7, #32]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4413      	add	r3, r2
 80067d8:	3354      	adds	r3, #84	@ 0x54
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80067de:	6a3a      	ldr	r2, [r7, #32]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4413      	add	r3, r2
 80067e4:	3354      	adds	r3, #84	@ 0x54
 80067e6:	2202      	movs	r2, #2
 80067e8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d83b      	bhi.n	8006868 <xTaskGenericNotify+0xc4>
 80067f0:	a201      	add	r2, pc, #4	@ (adr r2, 80067f8 <xTaskGenericNotify+0x54>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	08006869 	.word	0x08006869
 80067fc:	0800680d 	.word	0x0800680d
 8006800:	08006829 	.word	0x08006829
 8006804:	08006841 	.word	0x08006841
 8006808:	0800684f 	.word	0x0800684f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	3214      	adds	r2, #20
 8006812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	ea42 0103 	orr.w	r1, r2, r3
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	3214      	adds	r2, #20
 8006822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006826:	e020      	b.n	800686a <xTaskGenericNotify+0xc6>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	3214      	adds	r2, #20
 800682e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006832:	1c59      	adds	r1, r3, #1
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	3214      	adds	r2, #20
 800683a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800683e:	e014      	b.n	800686a <xTaskGenericNotify+0xc6>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	3214      	adds	r2, #20
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800684c:	e00d      	b.n	800686a <xTaskGenericNotify+0xc6>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800684e:	7ffb      	ldrb	r3, [r7, #31]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d006      	beq.n	8006862 <xTaskGenericNotify+0xbe>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	3214      	adds	r2, #20
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006860:	e003      	b.n	800686a <xTaskGenericNotify+0xc6>
                        xReturn = pdFAIL;
 8006862:	2300      	movs	r3, #0
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8006866:	e000      	b.n	800686a <xTaskGenericNotify+0xc6>
                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );

                    break;
 8006868:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800686a:	7ffb      	ldrb	r3, [r7, #31]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d157      	bne.n	8006920 <xTaskGenericNotify+0x17c>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	6a3a      	ldr	r2, [r7, #32]
 800687c:	6952      	ldr	r2, [r2, #20]
 800687e:	60da      	str	r2, [r3, #12]
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	6a3a      	ldr	r2, [r7, #32]
 8006886:	6912      	ldr	r2, [r2, #16]
 8006888:	609a      	str	r2, [r3, #8]
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	3308      	adds	r3, #8
 8006892:	429a      	cmp	r2, r3
 8006894:	d103      	bne.n	800689e <xTaskGenericNotify+0xfa>
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	2200      	movs	r2, #0
 80068a2:	61da      	str	r2, [r3, #28]
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	1e5a      	subs	r2, r3, #1
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006930 <xTaskGenericNotify+0x18c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d903      	bls.n	80068c2 <xTaskGenericNotify+0x11e>
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068be:	4a1c      	ldr	r2, [pc, #112]	@ (8006930 <xTaskGenericNotify+0x18c>)
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006934 <xTaskGenericNotify+0x190>)
 80068c8:	015b      	lsls	r3, r3, #5
 80068ca:	4413      	add	r3, r2
 80068cc:	3304      	adds	r3, #4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	611a      	str	r2, [r3, #16]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	615a      	str	r2, [r3, #20]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	6a3a      	ldr	r2, [r7, #32]
 80068e6:	3208      	adds	r2, #8
 80068e8:	609a      	str	r2, [r3, #8]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	f103 0208 	add.w	r2, r3, #8
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	60da      	str	r2, [r3, #12]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f8:	015b      	lsls	r3, r3, #5
 80068fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006934 <xTaskGenericNotify+0x190>)
 80068fc:	441a      	add	r2, r3
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	61da      	str	r2, [r3, #28]
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006906:	4a0b      	ldr	r2, [pc, #44]	@ (8006934 <xTaskGenericNotify+0x190>)
 8006908:	015b      	lsls	r3, r3, #5
 800690a:	4413      	add	r3, r2
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	3201      	adds	r2, #1
 8006914:	4907      	ldr	r1, [pc, #28]	@ (8006934 <xTaskGenericNotify+0x190>)
 8006916:	015b      	lsls	r3, r3, #5
 8006918:	440b      	add	r3, r1
 800691a:	601a      	str	r2, [r3, #0]
                     * the tick count equals xNextTaskUnblockTime.  However if
                     * tickless idling is used it might be more important to enter
                     * sleep mode at the earliest possible time - so reset
                     * xNextTaskUnblockTime here to ensure it is updated at the
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
 800691c:	f7ff fe40 	bl	80065a0 <prvResetNextTaskUnblockTime>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006920:	f000 fd7a 	bl	8007418 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006926:	4618      	mov	r0, r3
 8006928:	3728      	adds	r7, #40	@ 0x28
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	200002c0 	.word	0x200002c0
 8006934:	20000160 	.word	0x20000160

08006938 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006938:	b480      	push	{r7}
 800693a:	b08f      	sub	sp, #60	@ 0x3c
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8006948:	f3ef 8211 	mrs	r2, BASEPRI
 800694c:	f04f 0305 	mov.w	r3, #5
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	61fa      	str	r2, [r7, #28]
 800695e:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8006960:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8006962:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	4413      	add	r3, r2
 800696a:	3354      	adds	r3, #84	@ 0x54
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4413      	add	r3, r2
 8006978:	3354      	adds	r3, #84	@ 0x54
 800697a:	2202      	movs	r2, #2
 800697c:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800697e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	3214      	adds	r2, #20
 8006984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006988:	1c59      	adds	r1, r3, #1
 800698a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	3214      	adds	r2, #20
 8006990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006994:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006998:	2b01      	cmp	r3, #1
 800699a:	f040 8087 	bne.w	8006aac <vTaskGenericNotifyGiveFromISR+0x174>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800699e:	4b49      	ldr	r3, [pc, #292]	@ (8006ac4 <vTaskGenericNotifyGiveFromISR+0x18c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d156      	bne.n	8006a54 <vTaskGenericNotifyGiveFromISR+0x11c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80069a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80069ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069b2:	6952      	ldr	r2, [r2, #20]
 80069b4:	60da      	str	r2, [r3, #12]
 80069b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069bc:	6912      	ldr	r2, [r2, #16]
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c6:	3308      	adds	r3, #8
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d103      	bne.n	80069d4 <vTaskGenericNotifyGiveFromISR+0x9c>
 80069cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ce:	695a      	ldr	r2, [r3, #20]
 80069d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d2:	605a      	str	r2, [r3, #4]
 80069d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d6:	2200      	movs	r2, #0
 80069d8:	61da      	str	r2, [r3, #28]
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	1e5a      	subs	r2, r3, #1
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80069e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069e8:	4b37      	ldr	r3, [pc, #220]	@ (8006ac8 <vTaskGenericNotifyGiveFromISR+0x190>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d903      	bls.n	80069f8 <vTaskGenericNotifyGiveFromISR+0xc0>
 80069f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f4:	4a34      	ldr	r2, [pc, #208]	@ (8006ac8 <vTaskGenericNotifyGiveFromISR+0x190>)
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fc:	4a33      	ldr	r2, [pc, #204]	@ (8006acc <vTaskGenericNotifyGiveFromISR+0x194>)
 80069fe:	015b      	lsls	r3, r3, #5
 8006a00:	4413      	add	r3, r2
 8006a02:	3304      	adds	r3, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	623b      	str	r3, [r7, #32]
 8006a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a0a:	6a3a      	ldr	r2, [r7, #32]
 8006a0c:	611a      	str	r2, [r3, #16]
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a14:	615a      	str	r2, [r3, #20]
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a1c:	3208      	adds	r2, #8
 8006a1e:	609a      	str	r2, [r3, #8]
 8006a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a22:	f103 0208 	add.w	r2, r3, #8
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	60da      	str	r2, [r3, #12]
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2e:	015b      	lsls	r3, r3, #5
 8006a30:	4a26      	ldr	r2, [pc, #152]	@ (8006acc <vTaskGenericNotifyGiveFromISR+0x194>)
 8006a32:	441a      	add	r2, r3
 8006a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a36:	61da      	str	r2, [r3, #28]
 8006a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3c:	4a23      	ldr	r2, [pc, #140]	@ (8006acc <vTaskGenericNotifyGiveFromISR+0x194>)
 8006a3e:	015b      	lsls	r3, r3, #5
 8006a40:	4413      	add	r3, r2
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a48:	3201      	adds	r2, #1
 8006a4a:	4920      	ldr	r1, [pc, #128]	@ (8006acc <vTaskGenericNotifyGiveFromISR+0x194>)
 8006a4c:	015b      	lsls	r3, r3, #5
 8006a4e:	440b      	add	r3, r1
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e01b      	b.n	8006a8c <vTaskGenericNotifyGiveFromISR+0x154>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006a54:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad0 <vTaskGenericNotifyGiveFromISR+0x198>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a6e:	3220      	adds	r2, #32
 8006a70:	609a      	str	r2, [r3, #8]
 8006a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a74:	f103 0220 	add.w	r2, r3, #32
 8006a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7a:	60da      	str	r2, [r3, #12]
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7e:	4a14      	ldr	r2, [pc, #80]	@ (8006ad0 <vTaskGenericNotifyGiveFromISR+0x198>)
 8006a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8006a82:	4b13      	ldr	r3, [pc, #76]	@ (8006ad0 <vTaskGenericNotifyGiveFromISR+0x198>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	4a11      	ldr	r2, [pc, #68]	@ (8006ad0 <vTaskGenericNotifyGiveFromISR+0x198>)
 8006a8a:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a90:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <vTaskGenericNotifyGiveFromISR+0x19c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d908      	bls.n	8006aac <vTaskGenericNotifyGiveFromISR+0x174>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <vTaskGenericNotifyGiveFromISR+0x16e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad8 <vTaskGenericNotifyGiveFromISR+0x1a0>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aae:	617b      	str	r3, [r7, #20]
    __asm volatile
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f383 8811 	msr	BASEPRI, r3
}
 8006ab6:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8006ab8:	bf00      	nop
 8006aba:	373c      	adds	r7, #60	@ 0x3c
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	200002ec 	.word	0x200002ec
 8006ac8:	200002c0 	.word	0x200002c0
 8006acc:	20000160 	.word	0x20000160
 8006ad0:	20000248 	.word	0x20000248
 8006ad4:	20000158 	.word	0x20000158
 8006ad8:	200002d0 	.word	0x200002d0

08006adc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006adc:	b5b0      	push	{r4, r5, r7, lr}
 8006ade:	b08c      	sub	sp, #48	@ 0x30
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8006be0 <prvAddCurrentTaskToDelayedList+0x104>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    List_t * const pxDelayedList = pxDelayedTaskList;
 8006af2:	4b3c      	ldr	r3, [pc, #240]	@ (8006be4 <prvAddCurrentTaskToDelayedList+0x108>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	627b      	str	r3, [r7, #36]	@ 0x24
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8006af8:	4b3b      	ldr	r3, [pc, #236]	@ (8006be8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	623b      	str	r3, [r7, #32]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted flag is
         * reset to pdFALSE so it can be detected as having been set to pdTRUE
         * when the task leaves the Blocked state. */
        pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 8006afe:	4b3b      	ldr	r3, [pc, #236]	@ (8006bec <prvAddCurrentTaskToDelayedList+0x110>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b08:	4b38      	ldr	r3, [pc, #224]	@ (8006bec <prvAddCurrentTaskToDelayedList+0x110>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe fa1d 	bl	8004f4e <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	bf08      	it	eq
 8006b1e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8006b22:	d125      	bne.n	8006b70 <prvAddCurrentTaskToDelayedList+0x94>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d022      	beq.n	8006b70 <prvAddCurrentTaskToDelayedList+0x94>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b2a:	4b31      	ldr	r3, [pc, #196]	@ (8006bf0 <prvAddCurrentTaskToDelayedList+0x114>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	4b2e      	ldr	r3, [pc, #184]	@ (8006bec <prvAddCurrentTaskToDelayedList+0x110>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	611a      	str	r2, [r3, #16]
 8006b38:	4b2c      	ldr	r3, [pc, #176]	@ (8006bec <prvAddCurrentTaskToDelayedList+0x110>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	68d2      	ldr	r2, [r2, #12]
 8006b40:	615a      	str	r2, [r3, #20]
 8006b42:	4b2a      	ldr	r3, [pc, #168]	@ (8006bec <prvAddCurrentTaskToDelayedList+0x110>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	3208      	adds	r2, #8
 8006b4c:	609a      	str	r2, [r3, #8]
 8006b4e:	4b27      	ldr	r3, [pc, #156]	@ (8006bec <prvAddCurrentTaskToDelayedList+0x110>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f103 0208 	add.w	r2, r3, #8
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	60da      	str	r2, [r3, #12]
 8006b5a:	4b24      	ldr	r3, [pc, #144]	@ (8006bec <prvAddCurrentTaskToDelayedList+0x110>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a24      	ldr	r2, [pc, #144]	@ (8006bf0 <prvAddCurrentTaskToDelayedList+0x114>)
 8006b60:	61da      	str	r2, [r3, #28]
 8006b62:	4b23      	ldr	r3, [pc, #140]	@ (8006bf0 <prvAddCurrentTaskToDelayedList+0x114>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3301      	adds	r3, #1
 8006b68:	4a21      	ldr	r2, [pc, #132]	@ (8006bf0 <prvAddCurrentTaskToDelayedList+0x114>)
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006b6e:	e033      	b.n	8006bd8 <prvAddCurrentTaskToDelayedList+0xfc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006b70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b78:	1884      	adds	r4, r0, r2
 8006b7a:	eb41 0503 	adc.w	r5, r1, r3
 8006b7e:	e9c7 4504 	strd	r4, r5, [r7, #16]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b82:	4b1a      	ldr	r3, [pc, #104]	@ (8006bec <prvAddCurrentTaskToDelayedList+0x110>)
 8006b84:	6819      	ldr	r1, [r3, #0]
 8006b86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
            if( xTimeToWake < xConstTickCount )
 8006b8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b96:	4290      	cmp	r0, r2
 8006b98:	eb71 0303 	sbcs.w	r3, r1, r3
 8006b9c:	d207      	bcs.n	8006bae <prvAddCurrentTaskToDelayedList+0xd2>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006b9e:	4b13      	ldr	r3, [pc, #76]	@ (8006bec <prvAddCurrentTaskToDelayedList+0x110>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6a38      	ldr	r0, [r7, #32]
 8006ba8:	f7fe f98e 	bl	8004ec8 <vListInsert>
}
 8006bac:	e014      	b.n	8006bd8 <prvAddCurrentTaskToDelayedList+0xfc>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006bae:	4b0f      	ldr	r3, [pc, #60]	@ (8006bec <prvAddCurrentTaskToDelayedList+0x110>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bb8:	f7fe f986 	bl	8004ec8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <prvAddCurrentTaskToDelayedList+0x118>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006bc6:	4290      	cmp	r0, r2
 8006bc8:	eb71 0303 	sbcs.w	r3, r1, r3
 8006bcc:	d204      	bcs.n	8006bd8 <prvAddCurrentTaskToDelayedList+0xfc>
                    xNextTaskUnblockTime = xTimeToWake;
 8006bce:	4909      	ldr	r1, [pc, #36]	@ (8006bf4 <prvAddCurrentTaskToDelayedList+0x118>)
 8006bd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006bd4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006bd8:	bf00      	nop
 8006bda:	3730      	adds	r7, #48	@ 0x30
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bdb0      	pop	{r4, r5, r7, pc}
 8006be0:	200002b8 	.word	0x200002b8
 8006be4:	20000240 	.word	0x20000240
 8006be8:	20000244 	.word	0x20000244
 8006bec:	20000158 	.word	0x20000158
 8006bf0:	20000290 	.word	0x20000290
 8006bf4:	200002e0 	.word	0x200002e0

08006bf8 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4a07      	ldr	r2, [pc, #28]	@ (8006c24 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c08:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	4a06      	ldr	r2, [pc, #24]	@ (8006c28 <vApplicationGetIdleTaskMemory+0x30>)
 8006c0e:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2280      	movs	r2, #128	@ 0x80
 8006c14:	601a      	str	r2, [r3, #0]
    }
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	200002f0 	.word	0x200002f0
 8006c28:	20000348 	.word	0x20000348

08006c2c <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4a07      	ldr	r2, [pc, #28]	@ (8006c58 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c3c:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4a06      	ldr	r2, [pc, #24]	@ (8006c5c <vApplicationGetTimerTaskMemory+0x30>)
 8006c42:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2280      	movs	r2, #128	@ 0x80
 8006c48:	601a      	str	r2, [r3, #0]
    }
 8006c4a:	bf00      	nop
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	20000548 	.word	0x20000548
 8006c5c:	200005a0 	.word	0x200005a0

08006c60 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006c6a:	f000 fad7 	bl	800721c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006c6e:	4b15      	ldr	r3, [pc, #84]	@ (8006cc4 <xTimerCreateTimerTask+0x64>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d020      	beq.n	8006cb8 <xTimerCreateTimerTask+0x58>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	607b      	str	r3, [r7, #4]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8006c7e:	463a      	mov	r2, r7
 8006c80:	1d39      	adds	r1, r7, #4
 8006c82:	f107 0308 	add.w	r3, r7, #8
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff ffd0 	bl	8006c2c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	9202      	str	r2, [sp, #8]
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	2304      	movs	r3, #4
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	460a      	mov	r2, r1
 8006c9e:	490a      	ldr	r1, [pc, #40]	@ (8006cc8 <xTimerCreateTimerTask+0x68>)
 8006ca0:	480a      	ldr	r0, [pc, #40]	@ (8006ccc <xTimerCreateTimerTask+0x6c>)
 8006ca2:	f7fe fc80 	bl	80055a6 <xTaskCreateStatic>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4a09      	ldr	r2, [pc, #36]	@ (8006cd0 <xTimerCreateTimerTask+0x70>)
 8006caa:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8006cac:	4b08      	ldr	r3, [pc, #32]	@ (8006cd0 <xTimerCreateTimerTask+0x70>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]

        configASSERT( xReturn );

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
    }
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200007e8 	.word	0x200007e8
 8006cc8:	080093fc 	.word	0x080093fc
 8006ccc:	08006dad 	.word	0x08006dad
 8006cd0:	200007ec 	.word	0x200007ec

08006cd4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006cd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af04      	add	r7, sp, #16
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	e9c7 2300 	strd	r2, r3, [r7]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006ce2:	e00d      	b.n	8006d00 <prvReloadTimer+0x2c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cee:	1884      	adds	r4, r0, r2
 8006cf0:	eb41 0503 	adc.w	r5, r1, r3
 8006cf4:	e9c7 4500 	strd	r4, r5, [r7]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d0a:	eb10 0802 	adds.w	r8, r0, r2
 8006d0e:	eb41 0903 	adc.w	r9, r1, r3
 8006d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d1e:	e9cd 2300 	strd	r2, r3, [sp]
 8006d22:	4642      	mov	r2, r8
 8006d24:	464b      	mov	r3, r9
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 f906 	bl	8006f38 <prvInsertTimerInActiveList>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1d8      	bne.n	8006ce4 <prvReloadTimer+0x10>
        }
    }
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08006d40 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006d4a:	e9c7 2300 	strd	r2, r3, [r7]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d4e:	4b16      	ldr	r3, [pc, #88]	@ (8006da8 <prvProcessExpiredTimer+0x68>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe f8f6 	bl	8004f4e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <prvProcessExpiredTimer+0x44>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	e9cd 2300 	strd	r2, r3, [sp]
 8006d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d7c:	6978      	ldr	r0, [r7, #20]
 8006d7e:	f7ff ffa9 	bl	8006cd4 <prvReloadTimer>
 8006d82:	e008      	b.n	8006d96 <prvProcessExpiredTimer+0x56>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d8a:	f023 0301 	bic.w	r3, r3, #1
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9a:	6978      	ldr	r0, [r7, #20]
 8006d9c:	4798      	blx	r3
    }
 8006d9e:	bf00      	nop
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	200007e0 	.word	0x200007e0

08006dac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006db4:	f107 030c 	add.w	r3, r7, #12
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 f869 	bl	8006e90 <prvGetNextExpireTime>
 8006dbe:	e9c7 0104 	strd	r0, r1, [r7, #16]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006dca:	f000 f805 	bl	8006dd8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006dce:	f000 f909 	bl	8006fe4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dd2:	bf00      	nop
 8006dd4:	e7ee      	b.n	8006db4 <prvTimerTask+0x8>
	...

08006dd8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dda:	b08b      	sub	sp, #44	@ 0x2c
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006de4:	f7fe fe20 	bl	8005a28 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006de8:	f107 0314 	add.w	r3, r7, #20
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 f87b 	bl	8006ee8 <prvSampleTimeNow>
 8006df2:	e9c7 0106 	strd	r0, r1, [r7, #24]

            if( xTimerListsWereSwitched == pdFALSE )
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d13d      	bne.n	8006e78 <prvProcessTimerOrBlockTask+0xa0>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d110      	bne.n	8006e24 <prvProcessTimerOrBlockTask+0x4c>
 8006e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006e0a:	4290      	cmp	r0, r2
 8006e0c:	eb71 0303 	sbcs.w	r3, r1, r3
 8006e10:	d308      	bcc.n	8006e24 <prvProcessTimerOrBlockTask+0x4c>
                {
                    ( void ) xTaskResumeAll();
 8006e12:	f7fe fe65 	bl	8005ae0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e1e:	f7ff ff8f 	bl	8006d40 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006e22:	e02b      	b.n	8006e7c <prvProcessTimerOrBlockTask+0xa4>
                    if( xListWasEmpty != pdFALSE )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d008      	beq.n	8006e3c <prvProcessTimerOrBlockTask+0x64>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e2a:	4b16      	ldr	r3, [pc, #88]	@ (8006e84 <prvProcessTimerOrBlockTask+0xac>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <prvProcessTimerOrBlockTask+0x60>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <prvProcessTimerOrBlockTask+0x62>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	607b      	str	r3, [r7, #4]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e3c:	4b12      	ldr	r3, [pc, #72]	@ (8006e88 <prvProcessTimerOrBlockTask+0xb0>)
 8006e3e:	681e      	ldr	r6, [r3, #0]
 8006e40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e48:	1a84      	subs	r4, r0, r2
 8006e4a:	eb61 0503 	sbc.w	r5, r1, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	4622      	mov	r2, r4
 8006e54:	462b      	mov	r3, r5
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7fe fafb 	bl	8005452 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006e5c:	f7fe fe40 	bl	8005ae0 <xTaskResumeAll>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <prvProcessTimerOrBlockTask+0xa4>
                        taskYIELD_WITHIN_API();
 8006e66:	4b09      	ldr	r3, [pc, #36]	@ (8006e8c <prvProcessTimerOrBlockTask+0xb4>)
 8006e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	f3bf 8f6f 	isb	sy
    }
 8006e76:	e001      	b.n	8006e7c <prvProcessTimerOrBlockTask+0xa4>
                ( void ) xTaskResumeAll();
 8006e78:	f7fe fe32 	bl	8005ae0 <xTaskResumeAll>
    }
 8006e7c:	bf00      	nop
 8006e7e:	3724      	adds	r7, #36	@ 0x24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e84:	200007e4 	.word	0x200007e4
 8006e88:	200007e8 	.word	0x200007e8
 8006e8c:	e000ed04 	.word	0xe000ed04

08006e90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e98:	4b12      	ldr	r3, [pc, #72]	@ (8006ee4 <prvGetNextExpireTime+0x54>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <prvGetNextExpireTime+0x16>
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	e000      	b.n	8006ea8 <prvGetNextExpireTime+0x18>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d107      	bne.n	8006ec4 <prvGetNextExpireTime+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee4 <prvGetNextExpireTime+0x54>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8006ec2:	e005      	b.n	8006ed0 <prvGetNextExpireTime+0x40>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	f04f 0300 	mov.w	r3, #0
 8006ecc:	e9c7 2302 	strd	r2, r3, [r7, #8]
        }

        return xNextExpireTime;
 8006ed0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	200007e0 	.word	0x200007e0

08006ee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8006ef0:	f7fe fee0 	bl	8005cb4 <xTaskGetTickCount>
 8006ef4:	e9c7 0102 	strd	r0, r1, [r7, #8]

        if( xTimeNow < xLastTime )
 8006ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f34 <prvSampleTimeNow+0x4c>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f02:	4290      	cmp	r0, r2
 8006f04:	eb71 0303 	sbcs.w	r3, r1, r3
 8006f08:	d205      	bcs.n	8006f16 <prvSampleTimeNow+0x2e>
        {
            prvSwitchTimerLists();
 8006f0a:	f000 f95d 	bl	80071c8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e002      	b.n	8006f1c <prvSampleTimeNow+0x34>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006f1c:	4905      	ldr	r1, [pc, #20]	@ (8006f34 <prvSampleTimeNow+0x4c>)
 8006f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f22:	e9c1 2300 	strd	r2, r3, [r1]

        return xTimeNow;
 8006f26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	200007f0 	.word	0x200007f0

08006f38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006f38:	b5b0      	push	{r4, r5, r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f48:	68f9      	ldr	r1, [r7, #12]
 8006f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	619a      	str	r2, [r3, #24]

        if( xNextExpiryTime <= xTimeNow )
 8006f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006f60:	4290      	cmp	r0, r2
 8006f62:	eb71 0303 	sbcs.w	r3, r1, r3
 8006f66:	d319      	bcc.n	8006f9c <prvInsertTimerInActiveList+0x64>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8006f68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006f6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006f70:	1a84      	subs	r4, r0, r2
 8006f72:	eb61 0503 	sbc.w	r5, r1, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f7c:	4294      	cmp	r4, r2
 8006f7e:	eb75 0303 	sbcs.w	r3, r5, r3
 8006f82:	d302      	bcc.n	8006f8a <prvInsertTimerInActiveList+0x52>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006f84:	2301      	movs	r3, #1
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	e023      	b.n	8006fd2 <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f8a:	4b14      	ldr	r3, [pc, #80]	@ (8006fdc <prvInsertTimerInActiveList+0xa4>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3308      	adds	r3, #8
 8006f92:	4619      	mov	r1, r3
 8006f94:	4610      	mov	r0, r2
 8006f96:	f7fd ff97 	bl	8004ec8 <vListInsert>
 8006f9a:	e01a      	b.n	8006fd2 <prvInsertTimerInActiveList+0x9a>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006fa0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006fa4:	4290      	cmp	r0, r2
 8006fa6:	eb71 0303 	sbcs.w	r3, r1, r3
 8006faa:	d20a      	bcs.n	8006fc2 <prvInsertTimerInActiveList+0x8a>
 8006fac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006fb4:	4290      	cmp	r0, r2
 8006fb6:	eb71 0303 	sbcs.w	r3, r1, r3
 8006fba:	d302      	bcc.n	8006fc2 <prvInsertTimerInActiveList+0x8a>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e007      	b.n	8006fd2 <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fc2:	4b07      	ldr	r3, [pc, #28]	@ (8006fe0 <prvInsertTimerInActiveList+0xa8>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3308      	adds	r3, #8
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fd ff7b 	bl	8004ec8 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006fd2:	697b      	ldr	r3, [r7, #20]
    }
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bdb0      	pop	{r4, r5, r7, pc}
 8006fdc:	200007e4 	.word	0x200007e4
 8006fe0:	200007e0 	.word	0x200007e0

08006fe4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe8:	b090      	sub	sp, #64	@ 0x40
 8006fea:	af04      	add	r7, sp, #16
        DaemonTaskMessage_t xMessage = { 0 };
 8006fec:	f107 0308 	add.w	r3, r7, #8
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	605a      	str	r2, [r3, #4]
 8006ff6:	609a      	str	r2, [r3, #8]
 8006ff8:	60da      	str	r2, [r3, #12]
 8006ffa:	611a      	str	r2, [r3, #16]
 8006ffc:	615a      	str	r2, [r3, #20]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8006ffe:	e0cd      	b.n	800719c <prvProcessReceivedCommands+0x1b8>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	da0b      	bge.n	800701e <prvProcessReceivedCommands+0x3a>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007006:	f107 0308 	add.w	r3, r7, #8
 800700a:	3308      	adds	r3, #8
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800700e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007014:	6850      	ldr	r0, [r2, #4]
 8007016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007018:	6892      	ldr	r2, [r2, #8]
 800701a:	4611      	mov	r1, r2
 800701c:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f2c0 80bb 	blt.w	800719c <prvProcessReceivedCommands+0x1b8>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800702a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <prvProcessReceivedCommands+0x58>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	3308      	adds	r3, #8
 8007036:	4618      	mov	r0, r3
 8007038:	f7fd ff89 	bl	8004f4e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800703c:	1d3b      	adds	r3, r7, #4
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff ff52 	bl	8006ee8 <prvSampleTimeNow>
 8007044:	e9c7 0108 	strd	r0, r1, [r7, #32]

                switch( xMessage.xMessageID )
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	3b01      	subs	r3, #1
 800704c:	2b08      	cmp	r3, #8
 800704e:	f200 80a2 	bhi.w	8007196 <prvProcessReceivedCommands+0x1b2>
 8007052:	a201      	add	r2, pc, #4	@ (adr r2, 8007058 <prvProcessReceivedCommands+0x74>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	0800707d 	.word	0x0800707d
 800705c:	0800707d 	.word	0x0800707d
 8007060:	0800710f 	.word	0x0800710f
 8007064:	08007123 	.word	0x08007123
 8007068:	0800716d 	.word	0x0800716d
 800706c:	0800707d 	.word	0x0800707d
 8007070:	0800707d 	.word	0x0800707d
 8007074:	0800710f 	.word	0x0800710f
 8007078:	08007123 	.word	0x08007123
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	b2da      	uxtb	r2, r3
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800708e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007098:	1884      	adds	r4, r0, r2
 800709a:	eb41 0503 	adc.w	r5, r1, r3
 800709e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070aa:	e9cd 2300 	strd	r2, r3, [sp]
 80070ae:	4622      	mov	r2, r4
 80070b0:	462b      	mov	r3, r5
 80070b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070b4:	f7ff ff40 	bl	8006f38 <prvInsertTimerInActiveList>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d06d      	beq.n	800719a <prvProcessReceivedCommands+0x1b6>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80070be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d012      	beq.n	80070f2 <prvProcessReceivedCommands+0x10e>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80070cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80070d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070d6:	eb10 0802 	adds.w	r8, r0, r2
 80070da:	eb41 0903 	adc.w	r9, r1, r3
 80070de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070e2:	e9cd 2300 	strd	r2, r3, [sp]
 80070e6:	4642      	mov	r2, r8
 80070e8:	464b      	mov	r3, r9
 80070ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070ec:	f7ff fdf2 	bl	8006cd4 <prvReloadTimer>
 80070f0:	e008      	b.n	8007104 <prvProcessReceivedCommands+0x120>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007108:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800710a:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800710c:	e045      	b.n	800719a <prvProcessReceivedCommands+0x1b6>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800710e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007110:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	b2da      	uxtb	r2, r3
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8007120:	e03c      	b.n	800719c <prvProcessReceivedCommands+0x1b8>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007128:	f043 0301 	orr.w	r3, r3, #1
 800712c:	b2da      	uxtb	r2, r3
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800713a:	e9c1 2308 	strd	r2, r3, [r1, #32]
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007140:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007144:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007148:	eb10 0a02 	adds.w	sl, r0, r2
 800714c:	eb41 0b03 	adc.w	fp, r1, r3
 8007150:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007158:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800715c:	e9cd 2300 	strd	r2, r3, [sp]
 8007160:	4652      	mov	r2, sl
 8007162:	465b      	mov	r3, fp
 8007164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007166:	f7ff fee7 	bl	8006f38 <prvInsertTimerInActiveList>
                        break;
 800716a:	e017      	b.n	800719c <prvProcessReceivedCommands+0x1b8>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d103      	bne.n	8007182 <prvProcessReceivedCommands+0x19e>
                            {
                                vPortFree( pxTimer );
 800717a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800717c:	f000 fb8c 	bl	8007898 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007180:	e00c      	b.n	800719c <prvProcessReceivedCommands+0x1b8>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007184:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007188:	f023 0301 	bic.w	r3, r3, #1
 800718c:	b2da      	uxtb	r2, r3
 800718e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007190:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8007194:	e002      	b.n	800719c <prvProcessReceivedCommands+0x1b8>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007196:	bf00      	nop
 8007198:	e000      	b.n	800719c <prvProcessReceivedCommands+0x1b8>
                        break;
 800719a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800719c:	4b09      	ldr	r3, [pc, #36]	@ (80071c4 <prvProcessReceivedCommands+0x1e0>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	f107 0108 	add.w	r1, r7, #8
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	f7fd ffb2 	bl	8005114 <xQueueReceive>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f47f af24 	bne.w	8007000 <prvProcessReceivedCommands+0x1c>
                }
            }
        }
    }
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	3730      	adds	r7, #48	@ 0x30
 80071be:	46bd      	mov	sp, r7
 80071c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071c4:	200007e8 	.word	0x200007e8

080071c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071ce:	e00e      	b.n	80071ee <prvSwitchTimerLists+0x26>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071d0:	4b10      	ldr	r3, [pc, #64]	@ (8007214 <prvSwitchTimerLists+0x4c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	e9c7 2300 	strd	r2, r3, [r7]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80071de:	f04f 32ff 	mov.w	r2, #4294967295
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295
 80071e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071ea:	f7ff fda9 	bl	8006d40 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071ee:	4b09      	ldr	r3, [pc, #36]	@ (8007214 <prvSwitchTimerLists+0x4c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1eb      	bne.n	80071d0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80071f8:	4b06      	ldr	r3, [pc, #24]	@ (8007214 <prvSwitchTimerLists+0x4c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60fb      	str	r3, [r7, #12]
        pxCurrentTimerList = pxOverflowTimerList;
 80071fe:	4b06      	ldr	r3, [pc, #24]	@ (8007218 <prvSwitchTimerLists+0x50>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a04      	ldr	r2, [pc, #16]	@ (8007214 <prvSwitchTimerLists+0x4c>)
 8007204:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007206:	4a04      	ldr	r2, [pc, #16]	@ (8007218 <prvSwitchTimerLists+0x50>)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6013      	str	r3, [r2, #0]
    }
 800720c:	bf00      	nop
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	200007e0 	.word	0x200007e0
 8007218:	200007e4 	.word	0x200007e4

0800721c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007222:	f000 f8df 	bl	80073e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007226:	4b10      	ldr	r3, [pc, #64]	@ (8007268 <prvCheckForValidListAndQueue+0x4c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d116      	bne.n	800725c <prvCheckForValidListAndQueue+0x40>
            {
                vListInitialise( &xActiveTimerList1 );
 800722e:	480f      	ldr	r0, [pc, #60]	@ (800726c <prvCheckForValidListAndQueue+0x50>)
 8007230:	f7fd fe14 	bl	8004e5c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007234:	480e      	ldr	r0, [pc, #56]	@ (8007270 <prvCheckForValidListAndQueue+0x54>)
 8007236:	f7fd fe11 	bl	8004e5c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800723a:	4b0e      	ldr	r3, [pc, #56]	@ (8007274 <prvCheckForValidListAndQueue+0x58>)
 800723c:	4a0b      	ldr	r2, [pc, #44]	@ (800726c <prvCheckForValidListAndQueue+0x50>)
 800723e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007240:	4b0d      	ldr	r3, [pc, #52]	@ (8007278 <prvCheckForValidListAndQueue+0x5c>)
 8007242:	4a0b      	ldr	r2, [pc, #44]	@ (8007270 <prvCheckForValidListAndQueue+0x54>)
 8007244:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007246:	2300      	movs	r3, #0
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	4b0c      	ldr	r3, [pc, #48]	@ (800727c <prvCheckForValidListAndQueue+0x60>)
 800724c:	4a0c      	ldr	r2, [pc, #48]	@ (8007280 <prvCheckForValidListAndQueue+0x64>)
 800724e:	2118      	movs	r1, #24
 8007250:	200a      	movs	r0, #10
 8007252:	f7fd ff0c 	bl	800506e <xQueueGenericCreateStatic>
 8007256:	4603      	mov	r3, r0
 8007258:	4a03      	ldr	r2, [pc, #12]	@ (8007268 <prvCheckForValidListAndQueue+0x4c>)
 800725a:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800725c:	f000 f8dc 	bl	8007418 <vPortExitCritical>
    }
 8007260:	bf00      	nop
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	200007e8 	.word	0x200007e8
 800726c:	200007a0 	.word	0x200007a0
 8007270:	200007c0 	.word	0x200007c0
 8007274:	200007e0 	.word	0x200007e0
 8007278:	200007e4 	.word	0x200007e4
 800727c:	200008e8 	.word	0x200008e8
 8007280:	200007f8 	.word	0x200007f8

08007284 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3b04      	subs	r3, #4
 8007294:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800729c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3b04      	subs	r3, #4
 80072a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f023 0201 	bic.w	r2, r3, #1
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3b04      	subs	r3, #4
 80072b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80072b4:	4a0c      	ldr	r2, [pc, #48]	@ (80072e8 <pxPortInitialiseStack+0x64>)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3b14      	subs	r3, #20
 80072be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3b04      	subs	r3, #4
 80072ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f06f 0202 	mvn.w	r2, #2
 80072d2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3b20      	subs	r3, #32
 80072d8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80072da:	68fb      	ldr	r3, [r7, #12]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	080072ed 	.word	0x080072ed

080072ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80072f6:	f04f 0305 	mov.w	r3, #5
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	607b      	str	r3, [r7, #4]
}
 8007308:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800730a:	bf00      	nop
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0fc      	beq.n	800730c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007320:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <pxCurrentTCBConst2>)
 8007322:	6819      	ldr	r1, [r3, #0]
 8007324:	6808      	ldr	r0, [r1, #0]
 8007326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732a:	f380 8809 	msr	PSP, r0
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f04f 0000 	mov.w	r0, #0
 8007336:	f380 8811 	msr	BASEPRI, r0
 800733a:	4770      	bx	lr
 800733c:	f3af 8000 	nop.w

08007340 <pxCurrentTCBConst2>:
 8007340:	20000158 	.word	0x20000158
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop

08007348 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007348:	4808      	ldr	r0, [pc, #32]	@ (800736c <prvPortStartFirstTask+0x24>)
 800734a:	6800      	ldr	r0, [r0, #0]
 800734c:	6800      	ldr	r0, [r0, #0]
 800734e:	f380 8808 	msr	MSP, r0
 8007352:	f04f 0000 	mov.w	r0, #0
 8007356:	f380 8814 	msr	CONTROL, r0
 800735a:	b662      	cpsie	i
 800735c:	b661      	cpsie	f
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	df00      	svc	0
 8007368:	bf00      	nop
 800736a:	0000      	.short	0x0000
 800736c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop

08007374 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800737a:	4b15      	ldr	r3, [pc, #84]	@ (80073d0 <xPortStartScheduler+0x5c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007380:	4b14      	ldr	r3, [pc, #80]	@ (80073d4 <xPortStartScheduler+0x60>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a13      	ldr	r2, [pc, #76]	@ (80073d4 <xPortStartScheduler+0x60>)
 8007386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800738a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800738c:	4b11      	ldr	r3, [pc, #68]	@ (80073d4 <xPortStartScheduler+0x60>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a10      	ldr	r2, [pc, #64]	@ (80073d4 <xPortStartScheduler+0x60>)
 8007392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007396:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8007398:	4b0f      	ldr	r3, [pc, #60]	@ (80073d8 <xPortStartScheduler+0x64>)
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800739e:	f000 f98f 	bl	80076c0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80073a2:	4b0e      	ldr	r3, [pc, #56]	@ (80073dc <xPortStartScheduler+0x68>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80073a8:	f000 f9bc 	bl	8007724 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073ac:	4b0c      	ldr	r3, [pc, #48]	@ (80073e0 <xPortStartScheduler+0x6c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0b      	ldr	r2, [pc, #44]	@ (80073e0 <xPortStartScheduler+0x6c>)
 80073b2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80073b6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80073b8:	f7ff ffc6 	bl	8007348 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80073bc:	f7fe fe04 	bl	8005fc8 <vTaskSwitchContext>
    prvTaskExitError();
 80073c0:	f7ff ff94 	bl	80072ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	e000ed08 	.word	0xe000ed08
 80073d4:	e000ed20 	.word	0xe000ed20
 80073d8:	e000ed1c 	.word	0xe000ed1c
 80073dc:	20000010 	.word	0x20000010
 80073e0:	e000ef34 	.word	0xe000ef34

080073e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
    __asm volatile
 80073ea:	f04f 0305 	mov.w	r3, #5
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	607b      	str	r3, [r7, #4]
}
 80073fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80073fe:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <vPortEnterCritical+0x30>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3301      	adds	r3, #1
 8007404:	4a03      	ldr	r2, [pc, #12]	@ (8007414 <vPortEnterCritical+0x30>)
 8007406:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	20000010 	.word	0x20000010

08007418 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 800741e:	4b0a      	ldr	r3, [pc, #40]	@ (8007448 <vPortExitCritical+0x30>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3b01      	subs	r3, #1
 8007424:	4a08      	ldr	r2, [pc, #32]	@ (8007448 <vPortExitCritical+0x30>)
 8007426:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007428:	4b07      	ldr	r3, [pc, #28]	@ (8007448 <vPortExitCritical+0x30>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d105      	bne.n	800743c <vPortExitCritical+0x24>
 8007430:	2300      	movs	r3, #0
 8007432:	607b      	str	r3, [r7, #4]
    __asm volatile
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f383 8811 	msr	BASEPRI, r3
}
 800743a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	20000010 	.word	0x20000010
 800744c:	00000000 	.word	0x00000000

08007450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007450:	f3ef 8009 	mrs	r0, PSP
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	4b15      	ldr	r3, [pc, #84]	@ (80074b0 <pxCurrentTCBConst>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	f01e 0f10 	tst.w	lr, #16
 8007460:	bf08      	it	eq
 8007462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746a:	6010      	str	r0, [r2, #0]
 800746c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007470:	f04f 0005 	mov.w	r0, #5
 8007474:	f380 8811 	msr	BASEPRI, r0
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f7fe fda2 	bl	8005fc8 <vTaskSwitchContext>
 8007484:	f04f 0000 	mov.w	r0, #0
 8007488:	f380 8811 	msr	BASEPRI, r0
 800748c:	bc09      	pop	{r0, r3}
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	6808      	ldr	r0, [r1, #0]
 8007492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007496:	f01e 0f10 	tst.w	lr, #16
 800749a:	bf08      	it	eq
 800749c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074a0:	f380 8809 	msr	PSP, r0
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	f3af 8000 	nop.w

080074b0 <pxCurrentTCBConst>:
 80074b0:	20000158 	.word	0x20000158
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
    __asm volatile
 80074be:	f04f 0305 	mov.w	r3, #5
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	607b      	str	r3, [r7, #4]
}
 80074d0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80074d2:	f7fe fc83 	bl	8005ddc <xTaskIncrementTick>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074dc:	4b06      	ldr	r3, [pc, #24]	@ (80074f8 <SysTick_Handler+0x40>)
 80074de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f383 8811 	msr	BASEPRI, r3
}
 80074ee:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 80074fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007500:	b08a      	sub	sp, #40	@ 0x28
 8007502:	af00      	add	r7, sp, #0
 8007504:	e9c7 0100 	strd	r0, r1, [r7]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8007508:	4966      	ldr	r1, [pc, #408]	@ (80076a4 <vPortSuppressTicksAndSleep+0x1a8>)
 800750a:	6809      	ldr	r1, [r1, #0]
 800750c:	2000      	movs	r0, #0
 800750e:	460a      	mov	r2, r1
 8007510:	4603      	mov	r3, r0
 8007512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007516:	4282      	cmp	r2, r0
 8007518:	418b      	sbcs	r3, r1
 800751a:	d206      	bcs.n	800752a <vPortSuppressTicksAndSleep+0x2e>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800751c:	4b61      	ldr	r3, [pc, #388]	@ (80076a4 <vPortSuppressTicksAndSleep+0x1a8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2200      	movs	r2, #0
 8007522:	4698      	mov	r8, r3
 8007524:	4691      	mov	r9, r2
 8007526:	e9c7 8900 	strd	r8, r9, [r7]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 800752a:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 800752c:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 8007530:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8007534:	f7fe ff74 	bl	8006420 <eTaskConfirmSleepModeStatus>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <vPortSuppressTicksAndSleep+0x46>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 800753e:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 8007540:	e0aa      	b.n	8007698 <vPortSuppressTicksAndSleep+0x19c>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8007542:	4b59      	ldr	r3, [pc, #356]	@ (80076a8 <vPortSuppressTicksAndSleep+0x1ac>)
 8007544:	2206      	movs	r2, #6
 8007546:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8007548:	4b58      	ldr	r3, [pc, #352]	@ (80076ac <vPortSuppressTicksAndSleep+0x1b0>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	61fb      	str	r3, [r7, #28]
            if( ulSysTickDecrementsLeft == 0 )
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d102      	bne.n	800755a <vPortSuppressTicksAndSleep+0x5e>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 8007554:	4b56      	ldr	r3, [pc, #344]	@ (80076b0 <vPortSuppressTicksAndSleep+0x1b4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	61fb      	str	r3, [r7, #28]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800755a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800755e:	1e54      	subs	r4, r2, #1
 8007560:	f143 35ff 	adc.w	r5, r3, #4294967295
 8007564:	4622      	mov	r2, r4
 8007566:	4b52      	ldr	r3, [pc, #328]	@ (80076b0 <vPortSuppressTicksAndSleep+0x1b4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	627b      	str	r3, [r7, #36]	@ 0x24
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 8007574:	4b4f      	ldr	r3, [pc, #316]	@ (80076b4 <vPortSuppressTicksAndSleep+0x1b8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <vPortSuppressTicksAndSleep+0x96>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 8007580:	4b4c      	ldr	r3, [pc, #304]	@ (80076b4 <vPortSuppressTicksAndSleep+0x1b8>)
 8007582:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007586:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 8007588:	4b49      	ldr	r3, [pc, #292]	@ (80076b0 <vPortSuppressTicksAndSleep+0x1b4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	627b      	str	r3, [r7, #36]	@ 0x24
            if( ulReloadValue > ulStoppedTimerCompensation )
 8007592:	4b49      	ldr	r3, [pc, #292]	@ (80076b8 <vPortSuppressTicksAndSleep+0x1bc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007598:	429a      	cmp	r2, r3
 800759a:	d904      	bls.n	80075a6 <vPortSuppressTicksAndSleep+0xaa>
                ulReloadValue -= ulStoppedTimerCompensation;
 800759c:	4b46      	ldr	r3, [pc, #280]	@ (80076b8 <vPortSuppressTicksAndSleep+0x1bc>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	627b      	str	r3, [r7, #36]	@ 0x24
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 80075a6:	4a45      	ldr	r2, [pc, #276]	@ (80076bc <vPortSuppressTicksAndSleep+0x1c0>)
 80075a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075aa:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075ac:	4b3f      	ldr	r3, [pc, #252]	@ (80076ac <vPortSuppressTicksAndSleep+0x1b0>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80075b2:	4b3d      	ldr	r3, [pc, #244]	@ (80076a8 <vPortSuppressTicksAndSleep+0x1ac>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a3c      	ldr	r2, [pc, #240]	@ (80076a8 <vPortSuppressTicksAndSleep+0x1ac>)
 80075b8:	f043 0301 	orr.w	r3, r3, #1
 80075bc:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 80075be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            if( xModifiableIdleTime > 0 )
 80075c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	d004      	beq.n	80075d8 <vPortSuppressTicksAndSleep+0xdc>
                __asm volatile ( "dsb" ::: "memory" );
 80075ce:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 80075d2:	bf30      	wfi
                __asm volatile ( "isb" );
 80075d4:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 80075d8:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 80075da:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 80075de:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 80075e2:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 80075e4:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 80075e8:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 80075ec:	4b2e      	ldr	r3, [pc, #184]	@ (80076a8 <vPortSuppressTicksAndSleep+0x1ac>)
 80075ee:	2206      	movs	r2, #6
 80075f0:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 80075f2:	4b2d      	ldr	r3, [pc, #180]	@ (80076a8 <vPortSuppressTicksAndSleep+0x1ac>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d01d      	beq.n	800763a <vPortSuppressTicksAndSleep+0x13e>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 80075fe:	4b2c      	ldr	r3, [pc, #176]	@ (80076b0 <vPortSuppressTicksAndSleep+0x1b4>)
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <vPortSuppressTicksAndSleep+0x1b0>)
 8007604:	6819      	ldr	r1, [r3, #0]
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	1acb      	subs	r3, r1, r3
 800760a:	4413      	add	r3, r2
 800760c:	3b01      	subs	r3, #1
 800760e:	61bb      	str	r3, [r7, #24]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8007610:	4b29      	ldr	r3, [pc, #164]	@ (80076b8 <vPortSuppressTicksAndSleep+0x1bc>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	429a      	cmp	r2, r3
 8007618:	d904      	bls.n	8007624 <vPortSuppressTicksAndSleep+0x128>
 800761a:	4b25      	ldr	r3, [pc, #148]	@ (80076b0 <vPortSuppressTicksAndSleep+0x1b4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	429a      	cmp	r2, r3
 8007622:	d903      	bls.n	800762c <vPortSuppressTicksAndSleep+0x130>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8007624:	4b22      	ldr	r3, [pc, #136]	@ (80076b0 <vPortSuppressTicksAndSleep+0x1b4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3b01      	subs	r3, #1
 800762a:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800762c:	4a23      	ldr	r2, [pc, #140]	@ (80076bc <vPortSuppressTicksAndSleep+0x1c0>)
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	3b01      	subs	r3, #1
 8007636:	623b      	str	r3, [r7, #32]
 8007638:	e01a      	b.n	8007670 <vPortSuppressTicksAndSleep+0x174>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800763a:	4b1c      	ldr	r3, [pc, #112]	@ (80076ac <vPortSuppressTicksAndSleep+0x1b0>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	61fb      	str	r3, [r7, #28]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	4a1b      	ldr	r2, [pc, #108]	@ (80076b0 <vPortSuppressTicksAndSleep+0x1b4>)
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	fb03 f202 	mul.w	r2, r3, r2
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	60fb      	str	r3, [r7, #12]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8007650:	4b17      	ldr	r3, [pc, #92]	@ (80076b0 <vPortSuppressTicksAndSleep+0x1b4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	fbb2 f3f3 	udiv	r3, r2, r3
 800765a:	623b      	str	r3, [r7, #32]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	3301      	adds	r3, #1
 8007660:	4a13      	ldr	r2, [pc, #76]	@ (80076b0 <vPortSuppressTicksAndSleep+0x1b4>)
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	fb03 f202 	mul.w	r2, r3, r2
 8007668:	4914      	ldr	r1, [pc, #80]	@ (80076bc <vPortSuppressTicksAndSleep+0x1c0>)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007670:	4b0e      	ldr	r3, [pc, #56]	@ (80076ac <vPortSuppressTicksAndSleep+0x1b0>)
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007676:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <vPortSuppressTicksAndSleep+0x1ac>)
 8007678:	2207      	movs	r2, #7
 800767a:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800767c:	4b0c      	ldr	r3, [pc, #48]	@ (80076b0 <vPortSuppressTicksAndSleep+0x1b4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a0e      	ldr	r2, [pc, #56]	@ (80076bc <vPortSuppressTicksAndSleep+0x1c0>)
 8007682:	3b01      	subs	r3, #1
 8007684:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	2200      	movs	r2, #0
 800768a:	469a      	mov	sl, r3
 800768c:	4693      	mov	fp, r2
 800768e:	4650      	mov	r0, sl
 8007690:	4659      	mov	r1, fp
 8007692:	f7fe fb59 	bl	8005d48 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 8007696:	b662      	cpsie	i
    }
 8007698:	bf00      	nop
 800769a:	3728      	adds	r7, #40	@ 0x28
 800769c:	46bd      	mov	sp, r7
 800769e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076a2:	bf00      	nop
 80076a4:	20000954 	.word	0x20000954
 80076a8:	e000e010 	.word	0xe000e010
 80076ac:	e000e018 	.word	0xe000e018
 80076b0:	20000950 	.word	0x20000950
 80076b4:	e000ed04 	.word	0xe000ed04
 80076b8:	20000958 	.word	0x20000958
 80076bc:	e000e014 	.word	0xe000e014

080076c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80076c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007704 <vPortSetupTimerInterrupt+0x44>)
 80076c6:	4a10      	ldr	r2, [pc, #64]	@ (8007708 <vPortSetupTimerInterrupt+0x48>)
 80076c8:	601a      	str	r2, [r3, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80076ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007704 <vPortSetupTimerInterrupt+0x44>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80076d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d6:	4a0d      	ldr	r2, [pc, #52]	@ (800770c <vPortSetupTimerInterrupt+0x4c>)
 80076d8:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80076da:	4b0d      	ldr	r3, [pc, #52]	@ (8007710 <vPortSetupTimerInterrupt+0x50>)
 80076dc:	225e      	movs	r2, #94	@ 0x5e
 80076de:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007714 <vPortSetupTimerInterrupt+0x54>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007718 <vPortSetupTimerInterrupt+0x58>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076ec:	4b0b      	ldr	r3, [pc, #44]	@ (800771c <vPortSetupTimerInterrupt+0x5c>)
 80076ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007720 <vPortSetupTimerInterrupt+0x60>)
 80076f0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076f2:	4b08      	ldr	r3, [pc, #32]	@ (8007714 <vPortSetupTimerInterrupt+0x54>)
 80076f4:	2207      	movs	r2, #7
 80076f6:	601a      	str	r2, [r3, #0]
}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000950 	.word	0x20000950
 8007708:	00027100 	.word	0x00027100
 800770c:	20000954 	.word	0x20000954
 8007710:	20000958 	.word	0x20000958
 8007714:	e000e010 	.word	0xe000e010
 8007718:	e000e018 	.word	0xe000e018
 800771c:	e000e014 	.word	0xe000e014
 8007720:	000270ff 	.word	0x000270ff

08007724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007724:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007734 <vPortEnableVFP+0x10>
 8007728:	6801      	ldr	r1, [r0, #0]
 800772a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800772e:	6001      	str	r1, [r0, #0]
 8007730:	4770      	bx	lr
 8007732:	0000      	.short	0x0000
 8007734:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop

0800773c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d022      	beq.n	8007794 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800774e:	2308      	movs	r3, #8
 8007750:	43db      	mvns	r3, r3
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	d81b      	bhi.n	8007790 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8007758:	2208      	movs	r2, #8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	2b00      	cmp	r3, #0
 8007768:	d014      	beq.n	8007794 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	f1c3 0308 	rsb	r3, r3, #8
 8007774:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	43db      	mvns	r3, r3
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	429a      	cmp	r2, r3
 800777e:	d804      	bhi.n	800778a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	4413      	add	r3, r2
 8007786:	607b      	str	r3, [r7, #4]
 8007788:	e004      	b.n	8007794 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	607b      	str	r3, [r7, #4]
 800778e:	e001      	b.n	8007794 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8007794:	f7fe f948 	bl	8005a28 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007798:	4b3a      	ldr	r3, [pc, #232]	@ (8007884 <pvPortMalloc+0x148>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80077a0:	f000 f8b8 	bl	8007914 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	db64      	blt.n	8007874 <pvPortMalloc+0x138>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d061      	beq.n	8007874 <pvPortMalloc+0x138>
 80077b0:	4b35      	ldr	r3, [pc, #212]	@ (8007888 <pvPortMalloc+0x14c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d85c      	bhi.n	8007874 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80077ba:	4b34      	ldr	r3, [pc, #208]	@ (800788c <pvPortMalloc+0x150>)
 80077bc:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80077be:	4b33      	ldr	r3, [pc, #204]	@ (800788c <pvPortMalloc+0x150>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80077c4:	e004      	b.n	80077d0 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d903      	bls.n	80077e2 <pvPortMalloc+0xa6>
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1f1      	bne.n	80077c6 <pvPortMalloc+0x8a>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80077e2:	4b28      	ldr	r3, [pc, #160]	@ (8007884 <pvPortMalloc+0x148>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d043      	beq.n	8007874 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2208      	movs	r2, #8
 80077f2:	4413      	add	r3, r2
 80077f4:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	1ad2      	subs	r2, r2, r3
 8007806:	2308      	movs	r3, #8
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	429a      	cmp	r2, r3
 800780c:	d913      	bls.n	8007836 <pvPortMalloc+0xfa>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800780e:	69fa      	ldr	r2, [r7, #28]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4413      	add	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	1ad2      	subs	r2, r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007836:	4b14      	ldr	r3, [pc, #80]	@ (8007888 <pvPortMalloc+0x14c>)
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	4a11      	ldr	r2, [pc, #68]	@ (8007888 <pvPortMalloc+0x14c>)
 8007842:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007844:	4b10      	ldr	r3, [pc, #64]	@ (8007888 <pvPortMalloc+0x14c>)
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	4b11      	ldr	r3, [pc, #68]	@ (8007890 <pvPortMalloc+0x154>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d203      	bcs.n	8007858 <pvPortMalloc+0x11c>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007850:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <pvPortMalloc+0x14c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a0e      	ldr	r2, [pc, #56]	@ (8007890 <pvPortMalloc+0x154>)
 8007856:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800786a:	4b0a      	ldr	r3, [pc, #40]	@ (8007894 <pvPortMalloc+0x158>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3301      	adds	r3, #1
 8007870:	4a08      	ldr	r2, [pc, #32]	@ (8007894 <pvPortMalloc+0x158>)
 8007872:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007874:	f7fe f934 	bl	8005ae0 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8007878:	697b      	ldr	r3, [r7, #20]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3720      	adds	r7, #32
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20003164 	.word	0x20003164
 8007888:	20003168 	.word	0x20003168
 800788c:	2000315c 	.word	0x2000315c
 8007890:	2000316c 	.word	0x2000316c
 8007894:	20003170 	.word	0x20003170

08007898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d02b      	beq.n	8007902 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80078aa:	2308      	movs	r3, #8
 80078ac:	425b      	negs	r3, r3
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	0fdb      	lsrs	r3, r3, #31
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01c      	beq.n	8007902 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d118      	bne.n	8007902 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80078dc:	f7fe f8a4 	bl	8005a28 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	4b09      	ldr	r3, [pc, #36]	@ (800790c <vPortFree+0x74>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4413      	add	r3, r2
 80078ea:	4a08      	ldr	r2, [pc, #32]	@ (800790c <vPortFree+0x74>)
 80078ec:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078ee:	68b8      	ldr	r0, [r7, #8]
 80078f0:	f000 f86a 	bl	80079c8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80078f4:	4b06      	ldr	r3, [pc, #24]	@ (8007910 <vPortFree+0x78>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	4a05      	ldr	r2, [pc, #20]	@ (8007910 <vPortFree+0x78>)
 80078fc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80078fe:	f7fe f8ef 	bl	8005ae0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007902:	bf00      	nop
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20003168 	.word	0x20003168
 8007910:	20003174 	.word	0x20003174

08007914 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800791a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800791e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007920:	4b24      	ldr	r3, [pc, #144]	@ (80079b4 <prvHeapInit+0xa0>)
 8007922:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00c      	beq.n	8007948 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3307      	adds	r3, #7
 8007932:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0307 	bic.w	r3, r3, #7
 800793a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	4a1c      	ldr	r2, [pc, #112]	@ (80079b4 <prvHeapInit+0xa0>)
 8007944:	4413      	add	r3, r2
 8007946:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4a1b      	ldr	r2, [pc, #108]	@ (80079b8 <prvHeapInit+0xa4>)
 800794c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800794e:	4b1a      	ldr	r3, [pc, #104]	@ (80079b8 <prvHeapInit+0xa4>)
 8007950:	2200      	movs	r2, #0
 8007952:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4413      	add	r3, r2
 800795a:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 800795c:	2208      	movs	r2, #8
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	1a9b      	subs	r3, r3, r2
 8007962:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f023 0307 	bic.w	r3, r3, #7
 800796a:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a13      	ldr	r2, [pc, #76]	@ (80079bc <prvHeapInit+0xa8>)
 8007970:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007972:	4b12      	ldr	r3, [pc, #72]	@ (80079bc <prvHeapInit+0xa8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2200      	movs	r2, #0
 8007978:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800797a:	4b10      	ldr	r3, [pc, #64]	@ (80079bc <prvHeapInit+0xa8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8007990:	4b0a      	ldr	r3, [pc, #40]	@ (80079bc <prvHeapInit+0xa8>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	4a08      	ldr	r2, [pc, #32]	@ (80079c0 <prvHeapInit+0xac>)
 800799e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	4a07      	ldr	r2, [pc, #28]	@ (80079c4 <prvHeapInit+0xb0>)
 80079a6:	6013      	str	r3, [r2, #0]
}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	2000095c 	.word	0x2000095c
 80079b8:	2000315c 	.word	0x2000315c
 80079bc:	20003164 	.word	0x20003164
 80079c0:	2000316c 	.word	0x2000316c
 80079c4:	20003168 	.word	0x20003168

080079c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80079d0:	4b28      	ldr	r3, [pc, #160]	@ (8007a74 <prvInsertBlockIntoFreeList+0xac>)
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	e002      	b.n	80079dc <prvInsertBlockIntoFreeList+0x14>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d8f7      	bhi.n	80079d6 <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	4413      	add	r3, r2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d108      	bne.n	8007a0a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	441a      	add	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	441a      	add	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d118      	bne.n	8007a50 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b15      	ldr	r3, [pc, #84]	@ (8007a78 <prvInsertBlockIntoFreeList+0xb0>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d00d      	beq.n	8007a46 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	441a      	add	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	e008      	b.n	8007a58 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8007a46:	4b0c      	ldr	r3, [pc, #48]	@ (8007a78 <prvInsertBlockIntoFreeList+0xb0>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e003      	b.n	8007a58 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d002      	beq.n	8007a66 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007a66:	bf00      	nop
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	2000315c 	.word	0x2000315c
 8007a78:	20003164 	.word	0x20003164

08007a7c <std>:
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	b510      	push	{r4, lr}
 8007a80:	4604      	mov	r4, r0
 8007a82:	e9c0 3300 	strd	r3, r3, [r0]
 8007a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a8a:	6083      	str	r3, [r0, #8]
 8007a8c:	8181      	strh	r1, [r0, #12]
 8007a8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a90:	81c2      	strh	r2, [r0, #14]
 8007a92:	6183      	str	r3, [r0, #24]
 8007a94:	4619      	mov	r1, r3
 8007a96:	2208      	movs	r2, #8
 8007a98:	305c      	adds	r0, #92	@ 0x5c
 8007a9a:	f000 fa21 	bl	8007ee0 <memset>
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad4 <std+0x58>)
 8007aa0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad8 <std+0x5c>)
 8007aa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007adc <std+0x60>)
 8007aa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <std+0x64>)
 8007aac:	6323      	str	r3, [r4, #48]	@ 0x30
 8007aae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <std+0x68>)
 8007ab0:	6224      	str	r4, [r4, #32]
 8007ab2:	429c      	cmp	r4, r3
 8007ab4:	d006      	beq.n	8007ac4 <std+0x48>
 8007ab6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007aba:	4294      	cmp	r4, r2
 8007abc:	d002      	beq.n	8007ac4 <std+0x48>
 8007abe:	33d0      	adds	r3, #208	@ 0xd0
 8007ac0:	429c      	cmp	r4, r3
 8007ac2:	d105      	bne.n	8007ad0 <std+0x54>
 8007ac4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007acc:	f000 ba7a 	b.w	8007fc4 <__retarget_lock_init_recursive>
 8007ad0:	bd10      	pop	{r4, pc}
 8007ad2:	bf00      	nop
 8007ad4:	08007d31 	.word	0x08007d31
 8007ad8:	08007d53 	.word	0x08007d53
 8007adc:	08007d8b 	.word	0x08007d8b
 8007ae0:	08007daf 	.word	0x08007daf
 8007ae4:	20003178 	.word	0x20003178

08007ae8 <stdio_exit_handler>:
 8007ae8:	4a02      	ldr	r2, [pc, #8]	@ (8007af4 <stdio_exit_handler+0xc>)
 8007aea:	4903      	ldr	r1, [pc, #12]	@ (8007af8 <stdio_exit_handler+0x10>)
 8007aec:	4803      	ldr	r0, [pc, #12]	@ (8007afc <stdio_exit_handler+0x14>)
 8007aee:	f000 b869 	b.w	8007bc4 <_fwalk_sglue>
 8007af2:	bf00      	nop
 8007af4:	20000014 	.word	0x20000014
 8007af8:	08008b31 	.word	0x08008b31
 8007afc:	20000024 	.word	0x20000024

08007b00 <cleanup_stdio>:
 8007b00:	6841      	ldr	r1, [r0, #4]
 8007b02:	4b0c      	ldr	r3, [pc, #48]	@ (8007b34 <cleanup_stdio+0x34>)
 8007b04:	4299      	cmp	r1, r3
 8007b06:	b510      	push	{r4, lr}
 8007b08:	4604      	mov	r4, r0
 8007b0a:	d001      	beq.n	8007b10 <cleanup_stdio+0x10>
 8007b0c:	f001 f810 	bl	8008b30 <_fflush_r>
 8007b10:	68a1      	ldr	r1, [r4, #8]
 8007b12:	4b09      	ldr	r3, [pc, #36]	@ (8007b38 <cleanup_stdio+0x38>)
 8007b14:	4299      	cmp	r1, r3
 8007b16:	d002      	beq.n	8007b1e <cleanup_stdio+0x1e>
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f001 f809 	bl	8008b30 <_fflush_r>
 8007b1e:	68e1      	ldr	r1, [r4, #12]
 8007b20:	4b06      	ldr	r3, [pc, #24]	@ (8007b3c <cleanup_stdio+0x3c>)
 8007b22:	4299      	cmp	r1, r3
 8007b24:	d004      	beq.n	8007b30 <cleanup_stdio+0x30>
 8007b26:	4620      	mov	r0, r4
 8007b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b2c:	f001 b800 	b.w	8008b30 <_fflush_r>
 8007b30:	bd10      	pop	{r4, pc}
 8007b32:	bf00      	nop
 8007b34:	20003178 	.word	0x20003178
 8007b38:	200031e0 	.word	0x200031e0
 8007b3c:	20003248 	.word	0x20003248

08007b40 <global_stdio_init.part.0>:
 8007b40:	b510      	push	{r4, lr}
 8007b42:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <global_stdio_init.part.0+0x30>)
 8007b44:	4c0b      	ldr	r4, [pc, #44]	@ (8007b74 <global_stdio_init.part.0+0x34>)
 8007b46:	4a0c      	ldr	r2, [pc, #48]	@ (8007b78 <global_stdio_init.part.0+0x38>)
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2104      	movs	r1, #4
 8007b50:	f7ff ff94 	bl	8007a7c <std>
 8007b54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b58:	2201      	movs	r2, #1
 8007b5a:	2109      	movs	r1, #9
 8007b5c:	f7ff ff8e 	bl	8007a7c <std>
 8007b60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b64:	2202      	movs	r2, #2
 8007b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b6a:	2112      	movs	r1, #18
 8007b6c:	f7ff bf86 	b.w	8007a7c <std>
 8007b70:	200032b0 	.word	0x200032b0
 8007b74:	20003178 	.word	0x20003178
 8007b78:	08007ae9 	.word	0x08007ae9

08007b7c <__sfp_lock_acquire>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	@ (8007b84 <__sfp_lock_acquire+0x8>)
 8007b7e:	f000 ba22 	b.w	8007fc6 <__retarget_lock_acquire_recursive>
 8007b82:	bf00      	nop
 8007b84:	200032b9 	.word	0x200032b9

08007b88 <__sfp_lock_release>:
 8007b88:	4801      	ldr	r0, [pc, #4]	@ (8007b90 <__sfp_lock_release+0x8>)
 8007b8a:	f000 ba1d 	b.w	8007fc8 <__retarget_lock_release_recursive>
 8007b8e:	bf00      	nop
 8007b90:	200032b9 	.word	0x200032b9

08007b94 <__sinit>:
 8007b94:	b510      	push	{r4, lr}
 8007b96:	4604      	mov	r4, r0
 8007b98:	f7ff fff0 	bl	8007b7c <__sfp_lock_acquire>
 8007b9c:	6a23      	ldr	r3, [r4, #32]
 8007b9e:	b11b      	cbz	r3, 8007ba8 <__sinit+0x14>
 8007ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ba4:	f7ff bff0 	b.w	8007b88 <__sfp_lock_release>
 8007ba8:	4b04      	ldr	r3, [pc, #16]	@ (8007bbc <__sinit+0x28>)
 8007baa:	6223      	str	r3, [r4, #32]
 8007bac:	4b04      	ldr	r3, [pc, #16]	@ (8007bc0 <__sinit+0x2c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1f5      	bne.n	8007ba0 <__sinit+0xc>
 8007bb4:	f7ff ffc4 	bl	8007b40 <global_stdio_init.part.0>
 8007bb8:	e7f2      	b.n	8007ba0 <__sinit+0xc>
 8007bba:	bf00      	nop
 8007bbc:	08007b01 	.word	0x08007b01
 8007bc0:	200032b0 	.word	0x200032b0

08007bc4 <_fwalk_sglue>:
 8007bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	4607      	mov	r7, r0
 8007bca:	4688      	mov	r8, r1
 8007bcc:	4614      	mov	r4, r2
 8007bce:	2600      	movs	r6, #0
 8007bd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bd4:	f1b9 0901 	subs.w	r9, r9, #1
 8007bd8:	d505      	bpl.n	8007be6 <_fwalk_sglue+0x22>
 8007bda:	6824      	ldr	r4, [r4, #0]
 8007bdc:	2c00      	cmp	r4, #0
 8007bde:	d1f7      	bne.n	8007bd0 <_fwalk_sglue+0xc>
 8007be0:	4630      	mov	r0, r6
 8007be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007be6:	89ab      	ldrh	r3, [r5, #12]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d907      	bls.n	8007bfc <_fwalk_sglue+0x38>
 8007bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	d003      	beq.n	8007bfc <_fwalk_sglue+0x38>
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	47c0      	blx	r8
 8007bfa:	4306      	orrs	r6, r0
 8007bfc:	3568      	adds	r5, #104	@ 0x68
 8007bfe:	e7e9      	b.n	8007bd4 <_fwalk_sglue+0x10>

08007c00 <iprintf>:
 8007c00:	b40f      	push	{r0, r1, r2, r3}
 8007c02:	b507      	push	{r0, r1, r2, lr}
 8007c04:	4906      	ldr	r1, [pc, #24]	@ (8007c20 <iprintf+0x20>)
 8007c06:	ab04      	add	r3, sp, #16
 8007c08:	6808      	ldr	r0, [r1, #0]
 8007c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0e:	6881      	ldr	r1, [r0, #8]
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	f000 fc63 	bl	80084dc <_vfiprintf_r>
 8007c16:	b003      	add	sp, #12
 8007c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c1c:	b004      	add	sp, #16
 8007c1e:	4770      	bx	lr
 8007c20:	20000020 	.word	0x20000020

08007c24 <putchar>:
 8007c24:	4b02      	ldr	r3, [pc, #8]	@ (8007c30 <putchar+0xc>)
 8007c26:	4601      	mov	r1, r0
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	6882      	ldr	r2, [r0, #8]
 8007c2c:	f001 b80a 	b.w	8008c44 <_putc_r>
 8007c30:	20000020 	.word	0x20000020

08007c34 <_puts_r>:
 8007c34:	6a03      	ldr	r3, [r0, #32]
 8007c36:	b570      	push	{r4, r5, r6, lr}
 8007c38:	6884      	ldr	r4, [r0, #8]
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	460e      	mov	r6, r1
 8007c3e:	b90b      	cbnz	r3, 8007c44 <_puts_r+0x10>
 8007c40:	f7ff ffa8 	bl	8007b94 <__sinit>
 8007c44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c46:	07db      	lsls	r3, r3, #31
 8007c48:	d405      	bmi.n	8007c56 <_puts_r+0x22>
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	0598      	lsls	r0, r3, #22
 8007c4e:	d402      	bmi.n	8007c56 <_puts_r+0x22>
 8007c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c52:	f000 f9b8 	bl	8007fc6 <__retarget_lock_acquire_recursive>
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	0719      	lsls	r1, r3, #28
 8007c5a:	d502      	bpl.n	8007c62 <_puts_r+0x2e>
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d135      	bne.n	8007cce <_puts_r+0x9a>
 8007c62:	4621      	mov	r1, r4
 8007c64:	4628      	mov	r0, r5
 8007c66:	f000 f8e5 	bl	8007e34 <__swsetup_r>
 8007c6a:	b380      	cbz	r0, 8007cce <_puts_r+0x9a>
 8007c6c:	f04f 35ff 	mov.w	r5, #4294967295
 8007c70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c72:	07da      	lsls	r2, r3, #31
 8007c74:	d405      	bmi.n	8007c82 <_puts_r+0x4e>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	059b      	lsls	r3, r3, #22
 8007c7a:	d402      	bmi.n	8007c82 <_puts_r+0x4e>
 8007c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c7e:	f000 f9a3 	bl	8007fc8 <__retarget_lock_release_recursive>
 8007c82:	4628      	mov	r0, r5
 8007c84:	bd70      	pop	{r4, r5, r6, pc}
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	da04      	bge.n	8007c94 <_puts_r+0x60>
 8007c8a:	69a2      	ldr	r2, [r4, #24]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	dc17      	bgt.n	8007cc0 <_puts_r+0x8c>
 8007c90:	290a      	cmp	r1, #10
 8007c92:	d015      	beq.n	8007cc0 <_puts_r+0x8c>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	6022      	str	r2, [r4, #0]
 8007c9a:	7019      	strb	r1, [r3, #0]
 8007c9c:	68a3      	ldr	r3, [r4, #8]
 8007c9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	60a3      	str	r3, [r4, #8]
 8007ca6:	2900      	cmp	r1, #0
 8007ca8:	d1ed      	bne.n	8007c86 <_puts_r+0x52>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	da11      	bge.n	8007cd2 <_puts_r+0x9e>
 8007cae:	4622      	mov	r2, r4
 8007cb0:	210a      	movs	r1, #10
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 f87f 	bl	8007db6 <__swbuf_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d0d7      	beq.n	8007c6c <_puts_r+0x38>
 8007cbc:	250a      	movs	r5, #10
 8007cbe:	e7d7      	b.n	8007c70 <_puts_r+0x3c>
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 f877 	bl	8007db6 <__swbuf_r>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d1e7      	bne.n	8007c9c <_puts_r+0x68>
 8007ccc:	e7ce      	b.n	8007c6c <_puts_r+0x38>
 8007cce:	3e01      	subs	r6, #1
 8007cd0:	e7e4      	b.n	8007c9c <_puts_r+0x68>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	6022      	str	r2, [r4, #0]
 8007cd8:	220a      	movs	r2, #10
 8007cda:	701a      	strb	r2, [r3, #0]
 8007cdc:	e7ee      	b.n	8007cbc <_puts_r+0x88>
	...

08007ce0 <puts>:
 8007ce0:	4b02      	ldr	r3, [pc, #8]	@ (8007cec <puts+0xc>)
 8007ce2:	4601      	mov	r1, r0
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	f7ff bfa5 	b.w	8007c34 <_puts_r>
 8007cea:	bf00      	nop
 8007cec:	20000020 	.word	0x20000020

08007cf0 <siprintf>:
 8007cf0:	b40e      	push	{r1, r2, r3}
 8007cf2:	b500      	push	{lr}
 8007cf4:	b09c      	sub	sp, #112	@ 0x70
 8007cf6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007cf8:	9002      	str	r0, [sp, #8]
 8007cfa:	9006      	str	r0, [sp, #24]
 8007cfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d00:	4809      	ldr	r0, [pc, #36]	@ (8007d28 <siprintf+0x38>)
 8007d02:	9107      	str	r1, [sp, #28]
 8007d04:	9104      	str	r1, [sp, #16]
 8007d06:	4909      	ldr	r1, [pc, #36]	@ (8007d2c <siprintf+0x3c>)
 8007d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d0c:	9105      	str	r1, [sp, #20]
 8007d0e:	6800      	ldr	r0, [r0, #0]
 8007d10:	9301      	str	r3, [sp, #4]
 8007d12:	a902      	add	r1, sp, #8
 8007d14:	f000 fabc 	bl	8008290 <_svfiprintf_r>
 8007d18:	9b02      	ldr	r3, [sp, #8]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	701a      	strb	r2, [r3, #0]
 8007d1e:	b01c      	add	sp, #112	@ 0x70
 8007d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d24:	b003      	add	sp, #12
 8007d26:	4770      	bx	lr
 8007d28:	20000020 	.word	0x20000020
 8007d2c:	ffff0208 	.word	0xffff0208

08007d30 <__sread>:
 8007d30:	b510      	push	{r4, lr}
 8007d32:	460c      	mov	r4, r1
 8007d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d38:	f000 f8fc 	bl	8007f34 <_read_r>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	bfab      	itete	ge
 8007d40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d42:	89a3      	ldrhlt	r3, [r4, #12]
 8007d44:	181b      	addge	r3, r3, r0
 8007d46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d4a:	bfac      	ite	ge
 8007d4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d4e:	81a3      	strhlt	r3, [r4, #12]
 8007d50:	bd10      	pop	{r4, pc}

08007d52 <__swrite>:
 8007d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d56:	461f      	mov	r7, r3
 8007d58:	898b      	ldrh	r3, [r1, #12]
 8007d5a:	05db      	lsls	r3, r3, #23
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	4616      	mov	r6, r2
 8007d62:	d505      	bpl.n	8007d70 <__swrite+0x1e>
 8007d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d68:	2302      	movs	r3, #2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f000 f8d0 	bl	8007f10 <_lseek_r>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	463b      	mov	r3, r7
 8007d80:	4628      	mov	r0, r5
 8007d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d86:	f000 b8e7 	b.w	8007f58 <_write_r>

08007d8a <__sseek>:
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d92:	f000 f8bd 	bl	8007f10 <_lseek_r>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	bf15      	itete	ne
 8007d9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007da2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007da6:	81a3      	strheq	r3, [r4, #12]
 8007da8:	bf18      	it	ne
 8007daa:	81a3      	strhne	r3, [r4, #12]
 8007dac:	bd10      	pop	{r4, pc}

08007dae <__sclose>:
 8007dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db2:	f000 b89d 	b.w	8007ef0 <_close_r>

08007db6 <__swbuf_r>:
 8007db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db8:	460e      	mov	r6, r1
 8007dba:	4614      	mov	r4, r2
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	b118      	cbz	r0, 8007dc8 <__swbuf_r+0x12>
 8007dc0:	6a03      	ldr	r3, [r0, #32]
 8007dc2:	b90b      	cbnz	r3, 8007dc8 <__swbuf_r+0x12>
 8007dc4:	f7ff fee6 	bl	8007b94 <__sinit>
 8007dc8:	69a3      	ldr	r3, [r4, #24]
 8007dca:	60a3      	str	r3, [r4, #8]
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	071a      	lsls	r2, r3, #28
 8007dd0:	d501      	bpl.n	8007dd6 <__swbuf_r+0x20>
 8007dd2:	6923      	ldr	r3, [r4, #16]
 8007dd4:	b943      	cbnz	r3, 8007de8 <__swbuf_r+0x32>
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 f82b 	bl	8007e34 <__swsetup_r>
 8007dde:	b118      	cbz	r0, 8007de8 <__swbuf_r+0x32>
 8007de0:	f04f 37ff 	mov.w	r7, #4294967295
 8007de4:	4638      	mov	r0, r7
 8007de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	6922      	ldr	r2, [r4, #16]
 8007dec:	1a98      	subs	r0, r3, r2
 8007dee:	6963      	ldr	r3, [r4, #20]
 8007df0:	b2f6      	uxtb	r6, r6
 8007df2:	4283      	cmp	r3, r0
 8007df4:	4637      	mov	r7, r6
 8007df6:	dc05      	bgt.n	8007e04 <__swbuf_r+0x4e>
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f000 fe98 	bl	8008b30 <_fflush_r>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d1ed      	bne.n	8007de0 <__swbuf_r+0x2a>
 8007e04:	68a3      	ldr	r3, [r4, #8]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	60a3      	str	r3, [r4, #8]
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	6022      	str	r2, [r4, #0]
 8007e10:	701e      	strb	r6, [r3, #0]
 8007e12:	6962      	ldr	r2, [r4, #20]
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d004      	beq.n	8007e24 <__swbuf_r+0x6e>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	07db      	lsls	r3, r3, #31
 8007e1e:	d5e1      	bpl.n	8007de4 <__swbuf_r+0x2e>
 8007e20:	2e0a      	cmp	r6, #10
 8007e22:	d1df      	bne.n	8007de4 <__swbuf_r+0x2e>
 8007e24:	4621      	mov	r1, r4
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fe82 	bl	8008b30 <_fflush_r>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d0d9      	beq.n	8007de4 <__swbuf_r+0x2e>
 8007e30:	e7d6      	b.n	8007de0 <__swbuf_r+0x2a>
	...

08007e34 <__swsetup_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4b29      	ldr	r3, [pc, #164]	@ (8007edc <__swsetup_r+0xa8>)
 8007e38:	4605      	mov	r5, r0
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	b118      	cbz	r0, 8007e48 <__swsetup_r+0x14>
 8007e40:	6a03      	ldr	r3, [r0, #32]
 8007e42:	b90b      	cbnz	r3, 8007e48 <__swsetup_r+0x14>
 8007e44:	f7ff fea6 	bl	8007b94 <__sinit>
 8007e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e4c:	0719      	lsls	r1, r3, #28
 8007e4e:	d422      	bmi.n	8007e96 <__swsetup_r+0x62>
 8007e50:	06da      	lsls	r2, r3, #27
 8007e52:	d407      	bmi.n	8007e64 <__swsetup_r+0x30>
 8007e54:	2209      	movs	r2, #9
 8007e56:	602a      	str	r2, [r5, #0]
 8007e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e62:	e033      	b.n	8007ecc <__swsetup_r+0x98>
 8007e64:	0758      	lsls	r0, r3, #29
 8007e66:	d512      	bpl.n	8007e8e <__swsetup_r+0x5a>
 8007e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e6a:	b141      	cbz	r1, 8007e7e <__swsetup_r+0x4a>
 8007e6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e70:	4299      	cmp	r1, r3
 8007e72:	d002      	beq.n	8007e7a <__swsetup_r+0x46>
 8007e74:	4628      	mov	r0, r5
 8007e76:	f000 f8b7 	bl	8007fe8 <_free_r>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	2300      	movs	r3, #0
 8007e88:	6063      	str	r3, [r4, #4]
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	f043 0308 	orr.w	r3, r3, #8
 8007e94:	81a3      	strh	r3, [r4, #12]
 8007e96:	6923      	ldr	r3, [r4, #16]
 8007e98:	b94b      	cbnz	r3, 8007eae <__swsetup_r+0x7a>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea4:	d003      	beq.n	8007eae <__swsetup_r+0x7a>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 fe8f 	bl	8008bcc <__smakebuf_r>
 8007eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb2:	f013 0201 	ands.w	r2, r3, #1
 8007eb6:	d00a      	beq.n	8007ece <__swsetup_r+0x9a>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	60a2      	str	r2, [r4, #8]
 8007ebc:	6962      	ldr	r2, [r4, #20]
 8007ebe:	4252      	negs	r2, r2
 8007ec0:	61a2      	str	r2, [r4, #24]
 8007ec2:	6922      	ldr	r2, [r4, #16]
 8007ec4:	b942      	cbnz	r2, 8007ed8 <__swsetup_r+0xa4>
 8007ec6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007eca:	d1c5      	bne.n	8007e58 <__swsetup_r+0x24>
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}
 8007ece:	0799      	lsls	r1, r3, #30
 8007ed0:	bf58      	it	pl
 8007ed2:	6962      	ldrpl	r2, [r4, #20]
 8007ed4:	60a2      	str	r2, [r4, #8]
 8007ed6:	e7f4      	b.n	8007ec2 <__swsetup_r+0x8e>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e7f7      	b.n	8007ecc <__swsetup_r+0x98>
 8007edc:	20000020 	.word	0x20000020

08007ee0 <memset>:
 8007ee0:	4402      	add	r2, r0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d100      	bne.n	8007eea <memset+0xa>
 8007ee8:	4770      	bx	lr
 8007eea:	f803 1b01 	strb.w	r1, [r3], #1
 8007eee:	e7f9      	b.n	8007ee4 <memset+0x4>

08007ef0 <_close_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d06      	ldr	r5, [pc, #24]	@ (8007f0c <_close_r+0x1c>)
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	602b      	str	r3, [r5, #0]
 8007efc:	f7f9 fb77 	bl	80015ee <_close>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d102      	bne.n	8007f0a <_close_r+0x1a>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	b103      	cbz	r3, 8007f0a <_close_r+0x1a>
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}
 8007f0c:	200032b4 	.word	0x200032b4

08007f10 <_lseek_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4d07      	ldr	r5, [pc, #28]	@ (8007f30 <_lseek_r+0x20>)
 8007f14:	4604      	mov	r4, r0
 8007f16:	4608      	mov	r0, r1
 8007f18:	4611      	mov	r1, r2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	602a      	str	r2, [r5, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f7f9 fb8c 	bl	800163c <_lseek>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d102      	bne.n	8007f2e <_lseek_r+0x1e>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	b103      	cbz	r3, 8007f2e <_lseek_r+0x1e>
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	200032b4 	.word	0x200032b4

08007f34 <_read_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4d07      	ldr	r5, [pc, #28]	@ (8007f54 <_read_r+0x20>)
 8007f38:	4604      	mov	r4, r0
 8007f3a:	4608      	mov	r0, r1
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	602a      	str	r2, [r5, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f7f9 fb1a 	bl	800157c <_read>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_read_r+0x1e>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_read_r+0x1e>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	200032b4 	.word	0x200032b4

08007f58 <_write_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d07      	ldr	r5, [pc, #28]	@ (8007f78 <_write_r+0x20>)
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	4608      	mov	r0, r1
 8007f60:	4611      	mov	r1, r2
 8007f62:	2200      	movs	r2, #0
 8007f64:	602a      	str	r2, [r5, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f7f9 fb25 	bl	80015b6 <_write>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_write_r+0x1e>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_write_r+0x1e>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	200032b4 	.word	0x200032b4

08007f7c <__libc_init_array>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8007fb4 <__libc_init_array+0x38>)
 8007f80:	4c0d      	ldr	r4, [pc, #52]	@ (8007fb8 <__libc_init_array+0x3c>)
 8007f82:	1b64      	subs	r4, r4, r5
 8007f84:	10a4      	asrs	r4, r4, #2
 8007f86:	2600      	movs	r6, #0
 8007f88:	42a6      	cmp	r6, r4
 8007f8a:	d109      	bne.n	8007fa0 <__libc_init_array+0x24>
 8007f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8007fbc <__libc_init_array+0x40>)
 8007f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8007fc0 <__libc_init_array+0x44>)
 8007f90:	f000 ff1c 	bl	8008dcc <_init>
 8007f94:	1b64      	subs	r4, r4, r5
 8007f96:	10a4      	asrs	r4, r4, #2
 8007f98:	2600      	movs	r6, #0
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	d105      	bne.n	8007faa <__libc_init_array+0x2e>
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa4:	4798      	blx	r3
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7ee      	b.n	8007f88 <__libc_init_array+0xc>
 8007faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fae:	4798      	blx	r3
 8007fb0:	3601      	adds	r6, #1
 8007fb2:	e7f2      	b.n	8007f9a <__libc_init_array+0x1e>
 8007fb4:	080094a8 	.word	0x080094a8
 8007fb8:	080094a8 	.word	0x080094a8
 8007fbc:	080094a8 	.word	0x080094a8
 8007fc0:	080094ac 	.word	0x080094ac

08007fc4 <__retarget_lock_init_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <__retarget_lock_acquire_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <__retarget_lock_release_recursive>:
 8007fc8:	4770      	bx	lr

08007fca <memcpy>:
 8007fca:	440a      	add	r2, r1
 8007fcc:	4291      	cmp	r1, r2
 8007fce:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fd2:	d100      	bne.n	8007fd6 <memcpy+0xc>
 8007fd4:	4770      	bx	lr
 8007fd6:	b510      	push	{r4, lr}
 8007fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fe0:	4291      	cmp	r1, r2
 8007fe2:	d1f9      	bne.n	8007fd8 <memcpy+0xe>
 8007fe4:	bd10      	pop	{r4, pc}
	...

08007fe8 <_free_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4605      	mov	r5, r0
 8007fec:	2900      	cmp	r1, #0
 8007fee:	d041      	beq.n	8008074 <_free_r+0x8c>
 8007ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff4:	1f0c      	subs	r4, r1, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	bfb8      	it	lt
 8007ffa:	18e4      	addlt	r4, r4, r3
 8007ffc:	f000 f8e0 	bl	80081c0 <__malloc_lock>
 8008000:	4a1d      	ldr	r2, [pc, #116]	@ (8008078 <_free_r+0x90>)
 8008002:	6813      	ldr	r3, [r2, #0]
 8008004:	b933      	cbnz	r3, 8008014 <_free_r+0x2c>
 8008006:	6063      	str	r3, [r4, #4]
 8008008:	6014      	str	r4, [r2, #0]
 800800a:	4628      	mov	r0, r5
 800800c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008010:	f000 b8dc 	b.w	80081cc <__malloc_unlock>
 8008014:	42a3      	cmp	r3, r4
 8008016:	d908      	bls.n	800802a <_free_r+0x42>
 8008018:	6820      	ldr	r0, [r4, #0]
 800801a:	1821      	adds	r1, r4, r0
 800801c:	428b      	cmp	r3, r1
 800801e:	bf01      	itttt	eq
 8008020:	6819      	ldreq	r1, [r3, #0]
 8008022:	685b      	ldreq	r3, [r3, #4]
 8008024:	1809      	addeq	r1, r1, r0
 8008026:	6021      	streq	r1, [r4, #0]
 8008028:	e7ed      	b.n	8008006 <_free_r+0x1e>
 800802a:	461a      	mov	r2, r3
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	b10b      	cbz	r3, 8008034 <_free_r+0x4c>
 8008030:	42a3      	cmp	r3, r4
 8008032:	d9fa      	bls.n	800802a <_free_r+0x42>
 8008034:	6811      	ldr	r1, [r2, #0]
 8008036:	1850      	adds	r0, r2, r1
 8008038:	42a0      	cmp	r0, r4
 800803a:	d10b      	bne.n	8008054 <_free_r+0x6c>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	4401      	add	r1, r0
 8008040:	1850      	adds	r0, r2, r1
 8008042:	4283      	cmp	r3, r0
 8008044:	6011      	str	r1, [r2, #0]
 8008046:	d1e0      	bne.n	800800a <_free_r+0x22>
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	6053      	str	r3, [r2, #4]
 800804e:	4408      	add	r0, r1
 8008050:	6010      	str	r0, [r2, #0]
 8008052:	e7da      	b.n	800800a <_free_r+0x22>
 8008054:	d902      	bls.n	800805c <_free_r+0x74>
 8008056:	230c      	movs	r3, #12
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	e7d6      	b.n	800800a <_free_r+0x22>
 800805c:	6820      	ldr	r0, [r4, #0]
 800805e:	1821      	adds	r1, r4, r0
 8008060:	428b      	cmp	r3, r1
 8008062:	bf04      	itt	eq
 8008064:	6819      	ldreq	r1, [r3, #0]
 8008066:	685b      	ldreq	r3, [r3, #4]
 8008068:	6063      	str	r3, [r4, #4]
 800806a:	bf04      	itt	eq
 800806c:	1809      	addeq	r1, r1, r0
 800806e:	6021      	streq	r1, [r4, #0]
 8008070:	6054      	str	r4, [r2, #4]
 8008072:	e7ca      	b.n	800800a <_free_r+0x22>
 8008074:	bd38      	pop	{r3, r4, r5, pc}
 8008076:	bf00      	nop
 8008078:	200032c0 	.word	0x200032c0

0800807c <sbrk_aligned>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	4e0f      	ldr	r6, [pc, #60]	@ (80080bc <sbrk_aligned+0x40>)
 8008080:	460c      	mov	r4, r1
 8008082:	6831      	ldr	r1, [r6, #0]
 8008084:	4605      	mov	r5, r0
 8008086:	b911      	cbnz	r1, 800808e <sbrk_aligned+0x12>
 8008088:	f000 fe4c 	bl	8008d24 <_sbrk_r>
 800808c:	6030      	str	r0, [r6, #0]
 800808e:	4621      	mov	r1, r4
 8008090:	4628      	mov	r0, r5
 8008092:	f000 fe47 	bl	8008d24 <_sbrk_r>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	d103      	bne.n	80080a2 <sbrk_aligned+0x26>
 800809a:	f04f 34ff 	mov.w	r4, #4294967295
 800809e:	4620      	mov	r0, r4
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
 80080a2:	1cc4      	adds	r4, r0, #3
 80080a4:	f024 0403 	bic.w	r4, r4, #3
 80080a8:	42a0      	cmp	r0, r4
 80080aa:	d0f8      	beq.n	800809e <sbrk_aligned+0x22>
 80080ac:	1a21      	subs	r1, r4, r0
 80080ae:	4628      	mov	r0, r5
 80080b0:	f000 fe38 	bl	8008d24 <_sbrk_r>
 80080b4:	3001      	adds	r0, #1
 80080b6:	d1f2      	bne.n	800809e <sbrk_aligned+0x22>
 80080b8:	e7ef      	b.n	800809a <sbrk_aligned+0x1e>
 80080ba:	bf00      	nop
 80080bc:	200032bc 	.word	0x200032bc

080080c0 <_malloc_r>:
 80080c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c4:	1ccd      	adds	r5, r1, #3
 80080c6:	f025 0503 	bic.w	r5, r5, #3
 80080ca:	3508      	adds	r5, #8
 80080cc:	2d0c      	cmp	r5, #12
 80080ce:	bf38      	it	cc
 80080d0:	250c      	movcc	r5, #12
 80080d2:	2d00      	cmp	r5, #0
 80080d4:	4606      	mov	r6, r0
 80080d6:	db01      	blt.n	80080dc <_malloc_r+0x1c>
 80080d8:	42a9      	cmp	r1, r5
 80080da:	d904      	bls.n	80080e6 <_malloc_r+0x26>
 80080dc:	230c      	movs	r3, #12
 80080de:	6033      	str	r3, [r6, #0]
 80080e0:	2000      	movs	r0, #0
 80080e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081bc <_malloc_r+0xfc>
 80080ea:	f000 f869 	bl	80081c0 <__malloc_lock>
 80080ee:	f8d8 3000 	ldr.w	r3, [r8]
 80080f2:	461c      	mov	r4, r3
 80080f4:	bb44      	cbnz	r4, 8008148 <_malloc_r+0x88>
 80080f6:	4629      	mov	r1, r5
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff ffbf 	bl	800807c <sbrk_aligned>
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	4604      	mov	r4, r0
 8008102:	d158      	bne.n	80081b6 <_malloc_r+0xf6>
 8008104:	f8d8 4000 	ldr.w	r4, [r8]
 8008108:	4627      	mov	r7, r4
 800810a:	2f00      	cmp	r7, #0
 800810c:	d143      	bne.n	8008196 <_malloc_r+0xd6>
 800810e:	2c00      	cmp	r4, #0
 8008110:	d04b      	beq.n	80081aa <_malloc_r+0xea>
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	4639      	mov	r1, r7
 8008116:	4630      	mov	r0, r6
 8008118:	eb04 0903 	add.w	r9, r4, r3
 800811c:	f000 fe02 	bl	8008d24 <_sbrk_r>
 8008120:	4581      	cmp	r9, r0
 8008122:	d142      	bne.n	80081aa <_malloc_r+0xea>
 8008124:	6821      	ldr	r1, [r4, #0]
 8008126:	1a6d      	subs	r5, r5, r1
 8008128:	4629      	mov	r1, r5
 800812a:	4630      	mov	r0, r6
 800812c:	f7ff ffa6 	bl	800807c <sbrk_aligned>
 8008130:	3001      	adds	r0, #1
 8008132:	d03a      	beq.n	80081aa <_malloc_r+0xea>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	442b      	add	r3, r5
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	f8d8 3000 	ldr.w	r3, [r8]
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	bb62      	cbnz	r2, 800819c <_malloc_r+0xdc>
 8008142:	f8c8 7000 	str.w	r7, [r8]
 8008146:	e00f      	b.n	8008168 <_malloc_r+0xa8>
 8008148:	6822      	ldr	r2, [r4, #0]
 800814a:	1b52      	subs	r2, r2, r5
 800814c:	d420      	bmi.n	8008190 <_malloc_r+0xd0>
 800814e:	2a0b      	cmp	r2, #11
 8008150:	d917      	bls.n	8008182 <_malloc_r+0xc2>
 8008152:	1961      	adds	r1, r4, r5
 8008154:	42a3      	cmp	r3, r4
 8008156:	6025      	str	r5, [r4, #0]
 8008158:	bf18      	it	ne
 800815a:	6059      	strne	r1, [r3, #4]
 800815c:	6863      	ldr	r3, [r4, #4]
 800815e:	bf08      	it	eq
 8008160:	f8c8 1000 	streq.w	r1, [r8]
 8008164:	5162      	str	r2, [r4, r5]
 8008166:	604b      	str	r3, [r1, #4]
 8008168:	4630      	mov	r0, r6
 800816a:	f000 f82f 	bl	80081cc <__malloc_unlock>
 800816e:	f104 000b 	add.w	r0, r4, #11
 8008172:	1d23      	adds	r3, r4, #4
 8008174:	f020 0007 	bic.w	r0, r0, #7
 8008178:	1ac2      	subs	r2, r0, r3
 800817a:	bf1c      	itt	ne
 800817c:	1a1b      	subne	r3, r3, r0
 800817e:	50a3      	strne	r3, [r4, r2]
 8008180:	e7af      	b.n	80080e2 <_malloc_r+0x22>
 8008182:	6862      	ldr	r2, [r4, #4]
 8008184:	42a3      	cmp	r3, r4
 8008186:	bf0c      	ite	eq
 8008188:	f8c8 2000 	streq.w	r2, [r8]
 800818c:	605a      	strne	r2, [r3, #4]
 800818e:	e7eb      	b.n	8008168 <_malloc_r+0xa8>
 8008190:	4623      	mov	r3, r4
 8008192:	6864      	ldr	r4, [r4, #4]
 8008194:	e7ae      	b.n	80080f4 <_malloc_r+0x34>
 8008196:	463c      	mov	r4, r7
 8008198:	687f      	ldr	r7, [r7, #4]
 800819a:	e7b6      	b.n	800810a <_malloc_r+0x4a>
 800819c:	461a      	mov	r2, r3
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	42a3      	cmp	r3, r4
 80081a2:	d1fb      	bne.n	800819c <_malloc_r+0xdc>
 80081a4:	2300      	movs	r3, #0
 80081a6:	6053      	str	r3, [r2, #4]
 80081a8:	e7de      	b.n	8008168 <_malloc_r+0xa8>
 80081aa:	230c      	movs	r3, #12
 80081ac:	6033      	str	r3, [r6, #0]
 80081ae:	4630      	mov	r0, r6
 80081b0:	f000 f80c 	bl	80081cc <__malloc_unlock>
 80081b4:	e794      	b.n	80080e0 <_malloc_r+0x20>
 80081b6:	6005      	str	r5, [r0, #0]
 80081b8:	e7d6      	b.n	8008168 <_malloc_r+0xa8>
 80081ba:	bf00      	nop
 80081bc:	200032c0 	.word	0x200032c0

080081c0 <__malloc_lock>:
 80081c0:	4801      	ldr	r0, [pc, #4]	@ (80081c8 <__malloc_lock+0x8>)
 80081c2:	f7ff bf00 	b.w	8007fc6 <__retarget_lock_acquire_recursive>
 80081c6:	bf00      	nop
 80081c8:	200032b8 	.word	0x200032b8

080081cc <__malloc_unlock>:
 80081cc:	4801      	ldr	r0, [pc, #4]	@ (80081d4 <__malloc_unlock+0x8>)
 80081ce:	f7ff befb 	b.w	8007fc8 <__retarget_lock_release_recursive>
 80081d2:	bf00      	nop
 80081d4:	200032b8 	.word	0x200032b8

080081d8 <__ssputs_r>:
 80081d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	688e      	ldr	r6, [r1, #8]
 80081de:	461f      	mov	r7, r3
 80081e0:	42be      	cmp	r6, r7
 80081e2:	680b      	ldr	r3, [r1, #0]
 80081e4:	4682      	mov	sl, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	4690      	mov	r8, r2
 80081ea:	d82d      	bhi.n	8008248 <__ssputs_r+0x70>
 80081ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80081f4:	d026      	beq.n	8008244 <__ssputs_r+0x6c>
 80081f6:	6965      	ldr	r5, [r4, #20]
 80081f8:	6909      	ldr	r1, [r1, #16]
 80081fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081fe:	eba3 0901 	sub.w	r9, r3, r1
 8008202:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008206:	1c7b      	adds	r3, r7, #1
 8008208:	444b      	add	r3, r9
 800820a:	106d      	asrs	r5, r5, #1
 800820c:	429d      	cmp	r5, r3
 800820e:	bf38      	it	cc
 8008210:	461d      	movcc	r5, r3
 8008212:	0553      	lsls	r3, r2, #21
 8008214:	d527      	bpl.n	8008266 <__ssputs_r+0x8e>
 8008216:	4629      	mov	r1, r5
 8008218:	f7ff ff52 	bl	80080c0 <_malloc_r>
 800821c:	4606      	mov	r6, r0
 800821e:	b360      	cbz	r0, 800827a <__ssputs_r+0xa2>
 8008220:	6921      	ldr	r1, [r4, #16]
 8008222:	464a      	mov	r2, r9
 8008224:	f7ff fed1 	bl	8007fca <memcpy>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800822e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	6126      	str	r6, [r4, #16]
 8008236:	6165      	str	r5, [r4, #20]
 8008238:	444e      	add	r6, r9
 800823a:	eba5 0509 	sub.w	r5, r5, r9
 800823e:	6026      	str	r6, [r4, #0]
 8008240:	60a5      	str	r5, [r4, #8]
 8008242:	463e      	mov	r6, r7
 8008244:	42be      	cmp	r6, r7
 8008246:	d900      	bls.n	800824a <__ssputs_r+0x72>
 8008248:	463e      	mov	r6, r7
 800824a:	6820      	ldr	r0, [r4, #0]
 800824c:	4632      	mov	r2, r6
 800824e:	4641      	mov	r1, r8
 8008250:	f000 fd2c 	bl	8008cac <memmove>
 8008254:	68a3      	ldr	r3, [r4, #8]
 8008256:	1b9b      	subs	r3, r3, r6
 8008258:	60a3      	str	r3, [r4, #8]
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	4433      	add	r3, r6
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	2000      	movs	r0, #0
 8008262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008266:	462a      	mov	r2, r5
 8008268:	f000 fd6c 	bl	8008d44 <_realloc_r>
 800826c:	4606      	mov	r6, r0
 800826e:	2800      	cmp	r0, #0
 8008270:	d1e0      	bne.n	8008234 <__ssputs_r+0x5c>
 8008272:	6921      	ldr	r1, [r4, #16]
 8008274:	4650      	mov	r0, sl
 8008276:	f7ff feb7 	bl	8007fe8 <_free_r>
 800827a:	230c      	movs	r3, #12
 800827c:	f8ca 3000 	str.w	r3, [sl]
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	e7e9      	b.n	8008262 <__ssputs_r+0x8a>
	...

08008290 <_svfiprintf_r>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	4698      	mov	r8, r3
 8008296:	898b      	ldrh	r3, [r1, #12]
 8008298:	061b      	lsls	r3, r3, #24
 800829a:	b09d      	sub	sp, #116	@ 0x74
 800829c:	4607      	mov	r7, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	d510      	bpl.n	80082c6 <_svfiprintf_r+0x36>
 80082a4:	690b      	ldr	r3, [r1, #16]
 80082a6:	b973      	cbnz	r3, 80082c6 <_svfiprintf_r+0x36>
 80082a8:	2140      	movs	r1, #64	@ 0x40
 80082aa:	f7ff ff09 	bl	80080c0 <_malloc_r>
 80082ae:	6028      	str	r0, [r5, #0]
 80082b0:	6128      	str	r0, [r5, #16]
 80082b2:	b930      	cbnz	r0, 80082c2 <_svfiprintf_r+0x32>
 80082b4:	230c      	movs	r3, #12
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	b01d      	add	sp, #116	@ 0x74
 80082be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c2:	2340      	movs	r3, #64	@ 0x40
 80082c4:	616b      	str	r3, [r5, #20]
 80082c6:	2300      	movs	r3, #0
 80082c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ca:	2320      	movs	r3, #32
 80082cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80082d4:	2330      	movs	r3, #48	@ 0x30
 80082d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008474 <_svfiprintf_r+0x1e4>
 80082da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082de:	f04f 0901 	mov.w	r9, #1
 80082e2:	4623      	mov	r3, r4
 80082e4:	469a      	mov	sl, r3
 80082e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ea:	b10a      	cbz	r2, 80082f0 <_svfiprintf_r+0x60>
 80082ec:	2a25      	cmp	r2, #37	@ 0x25
 80082ee:	d1f9      	bne.n	80082e4 <_svfiprintf_r+0x54>
 80082f0:	ebba 0b04 	subs.w	fp, sl, r4
 80082f4:	d00b      	beq.n	800830e <_svfiprintf_r+0x7e>
 80082f6:	465b      	mov	r3, fp
 80082f8:	4622      	mov	r2, r4
 80082fa:	4629      	mov	r1, r5
 80082fc:	4638      	mov	r0, r7
 80082fe:	f7ff ff6b 	bl	80081d8 <__ssputs_r>
 8008302:	3001      	adds	r0, #1
 8008304:	f000 80a7 	beq.w	8008456 <_svfiprintf_r+0x1c6>
 8008308:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800830a:	445a      	add	r2, fp
 800830c:	9209      	str	r2, [sp, #36]	@ 0x24
 800830e:	f89a 3000 	ldrb.w	r3, [sl]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 809f 	beq.w	8008456 <_svfiprintf_r+0x1c6>
 8008318:	2300      	movs	r3, #0
 800831a:	f04f 32ff 	mov.w	r2, #4294967295
 800831e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008322:	f10a 0a01 	add.w	sl, sl, #1
 8008326:	9304      	str	r3, [sp, #16]
 8008328:	9307      	str	r3, [sp, #28]
 800832a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800832e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008330:	4654      	mov	r4, sl
 8008332:	2205      	movs	r2, #5
 8008334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008338:	484e      	ldr	r0, [pc, #312]	@ (8008474 <_svfiprintf_r+0x1e4>)
 800833a:	f7f7 ff49 	bl	80001d0 <memchr>
 800833e:	9a04      	ldr	r2, [sp, #16]
 8008340:	b9d8      	cbnz	r0, 800837a <_svfiprintf_r+0xea>
 8008342:	06d0      	lsls	r0, r2, #27
 8008344:	bf44      	itt	mi
 8008346:	2320      	movmi	r3, #32
 8008348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800834c:	0711      	lsls	r1, r2, #28
 800834e:	bf44      	itt	mi
 8008350:	232b      	movmi	r3, #43	@ 0x2b
 8008352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008356:	f89a 3000 	ldrb.w	r3, [sl]
 800835a:	2b2a      	cmp	r3, #42	@ 0x2a
 800835c:	d015      	beq.n	800838a <_svfiprintf_r+0xfa>
 800835e:	9a07      	ldr	r2, [sp, #28]
 8008360:	4654      	mov	r4, sl
 8008362:	2000      	movs	r0, #0
 8008364:	f04f 0c0a 	mov.w	ip, #10
 8008368:	4621      	mov	r1, r4
 800836a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800836e:	3b30      	subs	r3, #48	@ 0x30
 8008370:	2b09      	cmp	r3, #9
 8008372:	d94b      	bls.n	800840c <_svfiprintf_r+0x17c>
 8008374:	b1b0      	cbz	r0, 80083a4 <_svfiprintf_r+0x114>
 8008376:	9207      	str	r2, [sp, #28]
 8008378:	e014      	b.n	80083a4 <_svfiprintf_r+0x114>
 800837a:	eba0 0308 	sub.w	r3, r0, r8
 800837e:	fa09 f303 	lsl.w	r3, r9, r3
 8008382:	4313      	orrs	r3, r2
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	46a2      	mov	sl, r4
 8008388:	e7d2      	b.n	8008330 <_svfiprintf_r+0xa0>
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	1d19      	adds	r1, r3, #4
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	9103      	str	r1, [sp, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	bfbb      	ittet	lt
 8008396:	425b      	neglt	r3, r3
 8008398:	f042 0202 	orrlt.w	r2, r2, #2
 800839c:	9307      	strge	r3, [sp, #28]
 800839e:	9307      	strlt	r3, [sp, #28]
 80083a0:	bfb8      	it	lt
 80083a2:	9204      	strlt	r2, [sp, #16]
 80083a4:	7823      	ldrb	r3, [r4, #0]
 80083a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80083a8:	d10a      	bne.n	80083c0 <_svfiprintf_r+0x130>
 80083aa:	7863      	ldrb	r3, [r4, #1]
 80083ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ae:	d132      	bne.n	8008416 <_svfiprintf_r+0x186>
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	1d1a      	adds	r2, r3, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	9203      	str	r2, [sp, #12]
 80083b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083bc:	3402      	adds	r4, #2
 80083be:	9305      	str	r3, [sp, #20]
 80083c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008484 <_svfiprintf_r+0x1f4>
 80083c4:	7821      	ldrb	r1, [r4, #0]
 80083c6:	2203      	movs	r2, #3
 80083c8:	4650      	mov	r0, sl
 80083ca:	f7f7 ff01 	bl	80001d0 <memchr>
 80083ce:	b138      	cbz	r0, 80083e0 <_svfiprintf_r+0x150>
 80083d0:	9b04      	ldr	r3, [sp, #16]
 80083d2:	eba0 000a 	sub.w	r0, r0, sl
 80083d6:	2240      	movs	r2, #64	@ 0x40
 80083d8:	4082      	lsls	r2, r0
 80083da:	4313      	orrs	r3, r2
 80083dc:	3401      	adds	r4, #1
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e4:	4824      	ldr	r0, [pc, #144]	@ (8008478 <_svfiprintf_r+0x1e8>)
 80083e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083ea:	2206      	movs	r2, #6
 80083ec:	f7f7 fef0 	bl	80001d0 <memchr>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d036      	beq.n	8008462 <_svfiprintf_r+0x1d2>
 80083f4:	4b21      	ldr	r3, [pc, #132]	@ (800847c <_svfiprintf_r+0x1ec>)
 80083f6:	bb1b      	cbnz	r3, 8008440 <_svfiprintf_r+0x1b0>
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	3307      	adds	r3, #7
 80083fc:	f023 0307 	bic.w	r3, r3, #7
 8008400:	3308      	adds	r3, #8
 8008402:	9303      	str	r3, [sp, #12]
 8008404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008406:	4433      	add	r3, r6
 8008408:	9309      	str	r3, [sp, #36]	@ 0x24
 800840a:	e76a      	b.n	80082e2 <_svfiprintf_r+0x52>
 800840c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008410:	460c      	mov	r4, r1
 8008412:	2001      	movs	r0, #1
 8008414:	e7a8      	b.n	8008368 <_svfiprintf_r+0xd8>
 8008416:	2300      	movs	r3, #0
 8008418:	3401      	adds	r4, #1
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	4619      	mov	r1, r3
 800841e:	f04f 0c0a 	mov.w	ip, #10
 8008422:	4620      	mov	r0, r4
 8008424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008428:	3a30      	subs	r2, #48	@ 0x30
 800842a:	2a09      	cmp	r2, #9
 800842c:	d903      	bls.n	8008436 <_svfiprintf_r+0x1a6>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0c6      	beq.n	80083c0 <_svfiprintf_r+0x130>
 8008432:	9105      	str	r1, [sp, #20]
 8008434:	e7c4      	b.n	80083c0 <_svfiprintf_r+0x130>
 8008436:	fb0c 2101 	mla	r1, ip, r1, r2
 800843a:	4604      	mov	r4, r0
 800843c:	2301      	movs	r3, #1
 800843e:	e7f0      	b.n	8008422 <_svfiprintf_r+0x192>
 8008440:	ab03      	add	r3, sp, #12
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	462a      	mov	r2, r5
 8008446:	4b0e      	ldr	r3, [pc, #56]	@ (8008480 <_svfiprintf_r+0x1f0>)
 8008448:	a904      	add	r1, sp, #16
 800844a:	4638      	mov	r0, r7
 800844c:	f3af 8000 	nop.w
 8008450:	1c42      	adds	r2, r0, #1
 8008452:	4606      	mov	r6, r0
 8008454:	d1d6      	bne.n	8008404 <_svfiprintf_r+0x174>
 8008456:	89ab      	ldrh	r3, [r5, #12]
 8008458:	065b      	lsls	r3, r3, #25
 800845a:	f53f af2d 	bmi.w	80082b8 <_svfiprintf_r+0x28>
 800845e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008460:	e72c      	b.n	80082bc <_svfiprintf_r+0x2c>
 8008462:	ab03      	add	r3, sp, #12
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	462a      	mov	r2, r5
 8008468:	4b05      	ldr	r3, [pc, #20]	@ (8008480 <_svfiprintf_r+0x1f0>)
 800846a:	a904      	add	r1, sp, #16
 800846c:	4638      	mov	r0, r7
 800846e:	f000 f9bb 	bl	80087e8 <_printf_i>
 8008472:	e7ed      	b.n	8008450 <_svfiprintf_r+0x1c0>
 8008474:	0800946c 	.word	0x0800946c
 8008478:	08009476 	.word	0x08009476
 800847c:	00000000 	.word	0x00000000
 8008480:	080081d9 	.word	0x080081d9
 8008484:	08009472 	.word	0x08009472

08008488 <__sfputc_r>:
 8008488:	6893      	ldr	r3, [r2, #8]
 800848a:	3b01      	subs	r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	b410      	push	{r4}
 8008490:	6093      	str	r3, [r2, #8]
 8008492:	da08      	bge.n	80084a6 <__sfputc_r+0x1e>
 8008494:	6994      	ldr	r4, [r2, #24]
 8008496:	42a3      	cmp	r3, r4
 8008498:	db01      	blt.n	800849e <__sfputc_r+0x16>
 800849a:	290a      	cmp	r1, #10
 800849c:	d103      	bne.n	80084a6 <__sfputc_r+0x1e>
 800849e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a2:	f7ff bc88 	b.w	8007db6 <__swbuf_r>
 80084a6:	6813      	ldr	r3, [r2, #0]
 80084a8:	1c58      	adds	r0, r3, #1
 80084aa:	6010      	str	r0, [r2, #0]
 80084ac:	7019      	strb	r1, [r3, #0]
 80084ae:	4608      	mov	r0, r1
 80084b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <__sfputs_r>:
 80084b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b8:	4606      	mov	r6, r0
 80084ba:	460f      	mov	r7, r1
 80084bc:	4614      	mov	r4, r2
 80084be:	18d5      	adds	r5, r2, r3
 80084c0:	42ac      	cmp	r4, r5
 80084c2:	d101      	bne.n	80084c8 <__sfputs_r+0x12>
 80084c4:	2000      	movs	r0, #0
 80084c6:	e007      	b.n	80084d8 <__sfputs_r+0x22>
 80084c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084cc:	463a      	mov	r2, r7
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7ff ffda 	bl	8008488 <__sfputc_r>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d1f3      	bne.n	80084c0 <__sfputs_r+0xa>
 80084d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084dc <_vfiprintf_r>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	460d      	mov	r5, r1
 80084e2:	b09d      	sub	sp, #116	@ 0x74
 80084e4:	4614      	mov	r4, r2
 80084e6:	4698      	mov	r8, r3
 80084e8:	4606      	mov	r6, r0
 80084ea:	b118      	cbz	r0, 80084f4 <_vfiprintf_r+0x18>
 80084ec:	6a03      	ldr	r3, [r0, #32]
 80084ee:	b90b      	cbnz	r3, 80084f4 <_vfiprintf_r+0x18>
 80084f0:	f7ff fb50 	bl	8007b94 <__sinit>
 80084f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084f6:	07d9      	lsls	r1, r3, #31
 80084f8:	d405      	bmi.n	8008506 <_vfiprintf_r+0x2a>
 80084fa:	89ab      	ldrh	r3, [r5, #12]
 80084fc:	059a      	lsls	r2, r3, #22
 80084fe:	d402      	bmi.n	8008506 <_vfiprintf_r+0x2a>
 8008500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008502:	f7ff fd60 	bl	8007fc6 <__retarget_lock_acquire_recursive>
 8008506:	89ab      	ldrh	r3, [r5, #12]
 8008508:	071b      	lsls	r3, r3, #28
 800850a:	d501      	bpl.n	8008510 <_vfiprintf_r+0x34>
 800850c:	692b      	ldr	r3, [r5, #16]
 800850e:	b99b      	cbnz	r3, 8008538 <_vfiprintf_r+0x5c>
 8008510:	4629      	mov	r1, r5
 8008512:	4630      	mov	r0, r6
 8008514:	f7ff fc8e 	bl	8007e34 <__swsetup_r>
 8008518:	b170      	cbz	r0, 8008538 <_vfiprintf_r+0x5c>
 800851a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800851c:	07dc      	lsls	r4, r3, #31
 800851e:	d504      	bpl.n	800852a <_vfiprintf_r+0x4e>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	b01d      	add	sp, #116	@ 0x74
 8008526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852a:	89ab      	ldrh	r3, [r5, #12]
 800852c:	0598      	lsls	r0, r3, #22
 800852e:	d4f7      	bmi.n	8008520 <_vfiprintf_r+0x44>
 8008530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008532:	f7ff fd49 	bl	8007fc8 <__retarget_lock_release_recursive>
 8008536:	e7f3      	b.n	8008520 <_vfiprintf_r+0x44>
 8008538:	2300      	movs	r3, #0
 800853a:	9309      	str	r3, [sp, #36]	@ 0x24
 800853c:	2320      	movs	r3, #32
 800853e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008542:	f8cd 800c 	str.w	r8, [sp, #12]
 8008546:	2330      	movs	r3, #48	@ 0x30
 8008548:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086f8 <_vfiprintf_r+0x21c>
 800854c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008550:	f04f 0901 	mov.w	r9, #1
 8008554:	4623      	mov	r3, r4
 8008556:	469a      	mov	sl, r3
 8008558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855c:	b10a      	cbz	r2, 8008562 <_vfiprintf_r+0x86>
 800855e:	2a25      	cmp	r2, #37	@ 0x25
 8008560:	d1f9      	bne.n	8008556 <_vfiprintf_r+0x7a>
 8008562:	ebba 0b04 	subs.w	fp, sl, r4
 8008566:	d00b      	beq.n	8008580 <_vfiprintf_r+0xa4>
 8008568:	465b      	mov	r3, fp
 800856a:	4622      	mov	r2, r4
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f7ff ffa1 	bl	80084b6 <__sfputs_r>
 8008574:	3001      	adds	r0, #1
 8008576:	f000 80a7 	beq.w	80086c8 <_vfiprintf_r+0x1ec>
 800857a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800857c:	445a      	add	r2, fp
 800857e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008580:	f89a 3000 	ldrb.w	r3, [sl]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 809f 	beq.w	80086c8 <_vfiprintf_r+0x1ec>
 800858a:	2300      	movs	r3, #0
 800858c:	f04f 32ff 	mov.w	r2, #4294967295
 8008590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008594:	f10a 0a01 	add.w	sl, sl, #1
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80085a2:	4654      	mov	r4, sl
 80085a4:	2205      	movs	r2, #5
 80085a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085aa:	4853      	ldr	r0, [pc, #332]	@ (80086f8 <_vfiprintf_r+0x21c>)
 80085ac:	f7f7 fe10 	bl	80001d0 <memchr>
 80085b0:	9a04      	ldr	r2, [sp, #16]
 80085b2:	b9d8      	cbnz	r0, 80085ec <_vfiprintf_r+0x110>
 80085b4:	06d1      	lsls	r1, r2, #27
 80085b6:	bf44      	itt	mi
 80085b8:	2320      	movmi	r3, #32
 80085ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085be:	0713      	lsls	r3, r2, #28
 80085c0:	bf44      	itt	mi
 80085c2:	232b      	movmi	r3, #43	@ 0x2b
 80085c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085c8:	f89a 3000 	ldrb.w	r3, [sl]
 80085cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ce:	d015      	beq.n	80085fc <_vfiprintf_r+0x120>
 80085d0:	9a07      	ldr	r2, [sp, #28]
 80085d2:	4654      	mov	r4, sl
 80085d4:	2000      	movs	r0, #0
 80085d6:	f04f 0c0a 	mov.w	ip, #10
 80085da:	4621      	mov	r1, r4
 80085dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e0:	3b30      	subs	r3, #48	@ 0x30
 80085e2:	2b09      	cmp	r3, #9
 80085e4:	d94b      	bls.n	800867e <_vfiprintf_r+0x1a2>
 80085e6:	b1b0      	cbz	r0, 8008616 <_vfiprintf_r+0x13a>
 80085e8:	9207      	str	r2, [sp, #28]
 80085ea:	e014      	b.n	8008616 <_vfiprintf_r+0x13a>
 80085ec:	eba0 0308 	sub.w	r3, r0, r8
 80085f0:	fa09 f303 	lsl.w	r3, r9, r3
 80085f4:	4313      	orrs	r3, r2
 80085f6:	9304      	str	r3, [sp, #16]
 80085f8:	46a2      	mov	sl, r4
 80085fa:	e7d2      	b.n	80085a2 <_vfiprintf_r+0xc6>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1d19      	adds	r1, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	9103      	str	r1, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbb      	ittet	lt
 8008608:	425b      	neglt	r3, r3
 800860a:	f042 0202 	orrlt.w	r2, r2, #2
 800860e:	9307      	strge	r3, [sp, #28]
 8008610:	9307      	strlt	r3, [sp, #28]
 8008612:	bfb8      	it	lt
 8008614:	9204      	strlt	r2, [sp, #16]
 8008616:	7823      	ldrb	r3, [r4, #0]
 8008618:	2b2e      	cmp	r3, #46	@ 0x2e
 800861a:	d10a      	bne.n	8008632 <_vfiprintf_r+0x156>
 800861c:	7863      	ldrb	r3, [r4, #1]
 800861e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008620:	d132      	bne.n	8008688 <_vfiprintf_r+0x1ac>
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	1d1a      	adds	r2, r3, #4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	9203      	str	r2, [sp, #12]
 800862a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800862e:	3402      	adds	r4, #2
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008708 <_vfiprintf_r+0x22c>
 8008636:	7821      	ldrb	r1, [r4, #0]
 8008638:	2203      	movs	r2, #3
 800863a:	4650      	mov	r0, sl
 800863c:	f7f7 fdc8 	bl	80001d0 <memchr>
 8008640:	b138      	cbz	r0, 8008652 <_vfiprintf_r+0x176>
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	eba0 000a 	sub.w	r0, r0, sl
 8008648:	2240      	movs	r2, #64	@ 0x40
 800864a:	4082      	lsls	r2, r0
 800864c:	4313      	orrs	r3, r2
 800864e:	3401      	adds	r4, #1
 8008650:	9304      	str	r3, [sp, #16]
 8008652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008656:	4829      	ldr	r0, [pc, #164]	@ (80086fc <_vfiprintf_r+0x220>)
 8008658:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800865c:	2206      	movs	r2, #6
 800865e:	f7f7 fdb7 	bl	80001d0 <memchr>
 8008662:	2800      	cmp	r0, #0
 8008664:	d03f      	beq.n	80086e6 <_vfiprintf_r+0x20a>
 8008666:	4b26      	ldr	r3, [pc, #152]	@ (8008700 <_vfiprintf_r+0x224>)
 8008668:	bb1b      	cbnz	r3, 80086b2 <_vfiprintf_r+0x1d6>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	3307      	adds	r3, #7
 800866e:	f023 0307 	bic.w	r3, r3, #7
 8008672:	3308      	adds	r3, #8
 8008674:	9303      	str	r3, [sp, #12]
 8008676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008678:	443b      	add	r3, r7
 800867a:	9309      	str	r3, [sp, #36]	@ 0x24
 800867c:	e76a      	b.n	8008554 <_vfiprintf_r+0x78>
 800867e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008682:	460c      	mov	r4, r1
 8008684:	2001      	movs	r0, #1
 8008686:	e7a8      	b.n	80085da <_vfiprintf_r+0xfe>
 8008688:	2300      	movs	r3, #0
 800868a:	3401      	adds	r4, #1
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	4619      	mov	r1, r3
 8008690:	f04f 0c0a 	mov.w	ip, #10
 8008694:	4620      	mov	r0, r4
 8008696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800869a:	3a30      	subs	r2, #48	@ 0x30
 800869c:	2a09      	cmp	r2, #9
 800869e:	d903      	bls.n	80086a8 <_vfiprintf_r+0x1cc>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0c6      	beq.n	8008632 <_vfiprintf_r+0x156>
 80086a4:	9105      	str	r1, [sp, #20]
 80086a6:	e7c4      	b.n	8008632 <_vfiprintf_r+0x156>
 80086a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086ac:	4604      	mov	r4, r0
 80086ae:	2301      	movs	r3, #1
 80086b0:	e7f0      	b.n	8008694 <_vfiprintf_r+0x1b8>
 80086b2:	ab03      	add	r3, sp, #12
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	462a      	mov	r2, r5
 80086b8:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <_vfiprintf_r+0x228>)
 80086ba:	a904      	add	r1, sp, #16
 80086bc:	4630      	mov	r0, r6
 80086be:	f3af 8000 	nop.w
 80086c2:	4607      	mov	r7, r0
 80086c4:	1c78      	adds	r0, r7, #1
 80086c6:	d1d6      	bne.n	8008676 <_vfiprintf_r+0x19a>
 80086c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086ca:	07d9      	lsls	r1, r3, #31
 80086cc:	d405      	bmi.n	80086da <_vfiprintf_r+0x1fe>
 80086ce:	89ab      	ldrh	r3, [r5, #12]
 80086d0:	059a      	lsls	r2, r3, #22
 80086d2:	d402      	bmi.n	80086da <_vfiprintf_r+0x1fe>
 80086d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086d6:	f7ff fc77 	bl	8007fc8 <__retarget_lock_release_recursive>
 80086da:	89ab      	ldrh	r3, [r5, #12]
 80086dc:	065b      	lsls	r3, r3, #25
 80086de:	f53f af1f 	bmi.w	8008520 <_vfiprintf_r+0x44>
 80086e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086e4:	e71e      	b.n	8008524 <_vfiprintf_r+0x48>
 80086e6:	ab03      	add	r3, sp, #12
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	462a      	mov	r2, r5
 80086ec:	4b05      	ldr	r3, [pc, #20]	@ (8008704 <_vfiprintf_r+0x228>)
 80086ee:	a904      	add	r1, sp, #16
 80086f0:	4630      	mov	r0, r6
 80086f2:	f000 f879 	bl	80087e8 <_printf_i>
 80086f6:	e7e4      	b.n	80086c2 <_vfiprintf_r+0x1e6>
 80086f8:	0800946c 	.word	0x0800946c
 80086fc:	08009476 	.word	0x08009476
 8008700:	00000000 	.word	0x00000000
 8008704:	080084b7 	.word	0x080084b7
 8008708:	08009472 	.word	0x08009472

0800870c <_printf_common>:
 800870c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008710:	4616      	mov	r6, r2
 8008712:	4698      	mov	r8, r3
 8008714:	688a      	ldr	r2, [r1, #8]
 8008716:	690b      	ldr	r3, [r1, #16]
 8008718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800871c:	4293      	cmp	r3, r2
 800871e:	bfb8      	it	lt
 8008720:	4613      	movlt	r3, r2
 8008722:	6033      	str	r3, [r6, #0]
 8008724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008728:	4607      	mov	r7, r0
 800872a:	460c      	mov	r4, r1
 800872c:	b10a      	cbz	r2, 8008732 <_printf_common+0x26>
 800872e:	3301      	adds	r3, #1
 8008730:	6033      	str	r3, [r6, #0]
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	0699      	lsls	r1, r3, #26
 8008736:	bf42      	ittt	mi
 8008738:	6833      	ldrmi	r3, [r6, #0]
 800873a:	3302      	addmi	r3, #2
 800873c:	6033      	strmi	r3, [r6, #0]
 800873e:	6825      	ldr	r5, [r4, #0]
 8008740:	f015 0506 	ands.w	r5, r5, #6
 8008744:	d106      	bne.n	8008754 <_printf_common+0x48>
 8008746:	f104 0a19 	add.w	sl, r4, #25
 800874a:	68e3      	ldr	r3, [r4, #12]
 800874c:	6832      	ldr	r2, [r6, #0]
 800874e:	1a9b      	subs	r3, r3, r2
 8008750:	42ab      	cmp	r3, r5
 8008752:	dc26      	bgt.n	80087a2 <_printf_common+0x96>
 8008754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	3b00      	subs	r3, #0
 800875c:	bf18      	it	ne
 800875e:	2301      	movne	r3, #1
 8008760:	0692      	lsls	r2, r2, #26
 8008762:	d42b      	bmi.n	80087bc <_printf_common+0xb0>
 8008764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008768:	4641      	mov	r1, r8
 800876a:	4638      	mov	r0, r7
 800876c:	47c8      	blx	r9
 800876e:	3001      	adds	r0, #1
 8008770:	d01e      	beq.n	80087b0 <_printf_common+0xa4>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	6922      	ldr	r2, [r4, #16]
 8008776:	f003 0306 	and.w	r3, r3, #6
 800877a:	2b04      	cmp	r3, #4
 800877c:	bf02      	ittt	eq
 800877e:	68e5      	ldreq	r5, [r4, #12]
 8008780:	6833      	ldreq	r3, [r6, #0]
 8008782:	1aed      	subeq	r5, r5, r3
 8008784:	68a3      	ldr	r3, [r4, #8]
 8008786:	bf0c      	ite	eq
 8008788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800878c:	2500      	movne	r5, #0
 800878e:	4293      	cmp	r3, r2
 8008790:	bfc4      	itt	gt
 8008792:	1a9b      	subgt	r3, r3, r2
 8008794:	18ed      	addgt	r5, r5, r3
 8008796:	2600      	movs	r6, #0
 8008798:	341a      	adds	r4, #26
 800879a:	42b5      	cmp	r5, r6
 800879c:	d11a      	bne.n	80087d4 <_printf_common+0xc8>
 800879e:	2000      	movs	r0, #0
 80087a0:	e008      	b.n	80087b4 <_printf_common+0xa8>
 80087a2:	2301      	movs	r3, #1
 80087a4:	4652      	mov	r2, sl
 80087a6:	4641      	mov	r1, r8
 80087a8:	4638      	mov	r0, r7
 80087aa:	47c8      	blx	r9
 80087ac:	3001      	adds	r0, #1
 80087ae:	d103      	bne.n	80087b8 <_printf_common+0xac>
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b8:	3501      	adds	r5, #1
 80087ba:	e7c6      	b.n	800874a <_printf_common+0x3e>
 80087bc:	18e1      	adds	r1, r4, r3
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	2030      	movs	r0, #48	@ 0x30
 80087c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087c6:	4422      	add	r2, r4
 80087c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087d0:	3302      	adds	r3, #2
 80087d2:	e7c7      	b.n	8008764 <_printf_common+0x58>
 80087d4:	2301      	movs	r3, #1
 80087d6:	4622      	mov	r2, r4
 80087d8:	4641      	mov	r1, r8
 80087da:	4638      	mov	r0, r7
 80087dc:	47c8      	blx	r9
 80087de:	3001      	adds	r0, #1
 80087e0:	d0e6      	beq.n	80087b0 <_printf_common+0xa4>
 80087e2:	3601      	adds	r6, #1
 80087e4:	e7d9      	b.n	800879a <_printf_common+0x8e>
	...

080087e8 <_printf_i>:
 80087e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	7e0f      	ldrb	r7, [r1, #24]
 80087ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087f0:	2f78      	cmp	r7, #120	@ 0x78
 80087f2:	4691      	mov	r9, r2
 80087f4:	4680      	mov	r8, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	469a      	mov	sl, r3
 80087fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087fe:	d807      	bhi.n	8008810 <_printf_i+0x28>
 8008800:	2f62      	cmp	r7, #98	@ 0x62
 8008802:	d80a      	bhi.n	800881a <_printf_i+0x32>
 8008804:	2f00      	cmp	r7, #0
 8008806:	f000 80d2 	beq.w	80089ae <_printf_i+0x1c6>
 800880a:	2f58      	cmp	r7, #88	@ 0x58
 800880c:	f000 80b9 	beq.w	8008982 <_printf_i+0x19a>
 8008810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008818:	e03a      	b.n	8008890 <_printf_i+0xa8>
 800881a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800881e:	2b15      	cmp	r3, #21
 8008820:	d8f6      	bhi.n	8008810 <_printf_i+0x28>
 8008822:	a101      	add	r1, pc, #4	@ (adr r1, 8008828 <_printf_i+0x40>)
 8008824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008828:	08008881 	.word	0x08008881
 800882c:	08008895 	.word	0x08008895
 8008830:	08008811 	.word	0x08008811
 8008834:	08008811 	.word	0x08008811
 8008838:	08008811 	.word	0x08008811
 800883c:	08008811 	.word	0x08008811
 8008840:	08008895 	.word	0x08008895
 8008844:	08008811 	.word	0x08008811
 8008848:	08008811 	.word	0x08008811
 800884c:	08008811 	.word	0x08008811
 8008850:	08008811 	.word	0x08008811
 8008854:	08008995 	.word	0x08008995
 8008858:	080088bf 	.word	0x080088bf
 800885c:	0800894f 	.word	0x0800894f
 8008860:	08008811 	.word	0x08008811
 8008864:	08008811 	.word	0x08008811
 8008868:	080089b7 	.word	0x080089b7
 800886c:	08008811 	.word	0x08008811
 8008870:	080088bf 	.word	0x080088bf
 8008874:	08008811 	.word	0x08008811
 8008878:	08008811 	.word	0x08008811
 800887c:	08008957 	.word	0x08008957
 8008880:	6833      	ldr	r3, [r6, #0]
 8008882:	1d1a      	adds	r2, r3, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6032      	str	r2, [r6, #0]
 8008888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800888c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008890:	2301      	movs	r3, #1
 8008892:	e09d      	b.n	80089d0 <_printf_i+0x1e8>
 8008894:	6833      	ldr	r3, [r6, #0]
 8008896:	6820      	ldr	r0, [r4, #0]
 8008898:	1d19      	adds	r1, r3, #4
 800889a:	6031      	str	r1, [r6, #0]
 800889c:	0606      	lsls	r6, r0, #24
 800889e:	d501      	bpl.n	80088a4 <_printf_i+0xbc>
 80088a0:	681d      	ldr	r5, [r3, #0]
 80088a2:	e003      	b.n	80088ac <_printf_i+0xc4>
 80088a4:	0645      	lsls	r5, r0, #25
 80088a6:	d5fb      	bpl.n	80088a0 <_printf_i+0xb8>
 80088a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088ac:	2d00      	cmp	r5, #0
 80088ae:	da03      	bge.n	80088b8 <_printf_i+0xd0>
 80088b0:	232d      	movs	r3, #45	@ 0x2d
 80088b2:	426d      	negs	r5, r5
 80088b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088b8:	4859      	ldr	r0, [pc, #356]	@ (8008a20 <_printf_i+0x238>)
 80088ba:	230a      	movs	r3, #10
 80088bc:	e011      	b.n	80088e2 <_printf_i+0xfa>
 80088be:	6821      	ldr	r1, [r4, #0]
 80088c0:	6833      	ldr	r3, [r6, #0]
 80088c2:	0608      	lsls	r0, r1, #24
 80088c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80088c8:	d402      	bmi.n	80088d0 <_printf_i+0xe8>
 80088ca:	0649      	lsls	r1, r1, #25
 80088cc:	bf48      	it	mi
 80088ce:	b2ad      	uxthmi	r5, r5
 80088d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80088d2:	4853      	ldr	r0, [pc, #332]	@ (8008a20 <_printf_i+0x238>)
 80088d4:	6033      	str	r3, [r6, #0]
 80088d6:	bf14      	ite	ne
 80088d8:	230a      	movne	r3, #10
 80088da:	2308      	moveq	r3, #8
 80088dc:	2100      	movs	r1, #0
 80088de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088e2:	6866      	ldr	r6, [r4, #4]
 80088e4:	60a6      	str	r6, [r4, #8]
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	bfa2      	ittt	ge
 80088ea:	6821      	ldrge	r1, [r4, #0]
 80088ec:	f021 0104 	bicge.w	r1, r1, #4
 80088f0:	6021      	strge	r1, [r4, #0]
 80088f2:	b90d      	cbnz	r5, 80088f8 <_printf_i+0x110>
 80088f4:	2e00      	cmp	r6, #0
 80088f6:	d04b      	beq.n	8008990 <_printf_i+0x1a8>
 80088f8:	4616      	mov	r6, r2
 80088fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80088fe:	fb03 5711 	mls	r7, r3, r1, r5
 8008902:	5dc7      	ldrb	r7, [r0, r7]
 8008904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008908:	462f      	mov	r7, r5
 800890a:	42bb      	cmp	r3, r7
 800890c:	460d      	mov	r5, r1
 800890e:	d9f4      	bls.n	80088fa <_printf_i+0x112>
 8008910:	2b08      	cmp	r3, #8
 8008912:	d10b      	bne.n	800892c <_printf_i+0x144>
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	07df      	lsls	r7, r3, #31
 8008918:	d508      	bpl.n	800892c <_printf_i+0x144>
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	6861      	ldr	r1, [r4, #4]
 800891e:	4299      	cmp	r1, r3
 8008920:	bfde      	ittt	le
 8008922:	2330      	movle	r3, #48	@ 0x30
 8008924:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008928:	f106 36ff 	addle.w	r6, r6, #4294967295
 800892c:	1b92      	subs	r2, r2, r6
 800892e:	6122      	str	r2, [r4, #16]
 8008930:	f8cd a000 	str.w	sl, [sp]
 8008934:	464b      	mov	r3, r9
 8008936:	aa03      	add	r2, sp, #12
 8008938:	4621      	mov	r1, r4
 800893a:	4640      	mov	r0, r8
 800893c:	f7ff fee6 	bl	800870c <_printf_common>
 8008940:	3001      	adds	r0, #1
 8008942:	d14a      	bne.n	80089da <_printf_i+0x1f2>
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	b004      	add	sp, #16
 800894a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	f043 0320 	orr.w	r3, r3, #32
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	4833      	ldr	r0, [pc, #204]	@ (8008a24 <_printf_i+0x23c>)
 8008958:	2778      	movs	r7, #120	@ 0x78
 800895a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	6831      	ldr	r1, [r6, #0]
 8008962:	061f      	lsls	r7, r3, #24
 8008964:	f851 5b04 	ldr.w	r5, [r1], #4
 8008968:	d402      	bmi.n	8008970 <_printf_i+0x188>
 800896a:	065f      	lsls	r7, r3, #25
 800896c:	bf48      	it	mi
 800896e:	b2ad      	uxthmi	r5, r5
 8008970:	6031      	str	r1, [r6, #0]
 8008972:	07d9      	lsls	r1, r3, #31
 8008974:	bf44      	itt	mi
 8008976:	f043 0320 	orrmi.w	r3, r3, #32
 800897a:	6023      	strmi	r3, [r4, #0]
 800897c:	b11d      	cbz	r5, 8008986 <_printf_i+0x19e>
 800897e:	2310      	movs	r3, #16
 8008980:	e7ac      	b.n	80088dc <_printf_i+0xf4>
 8008982:	4827      	ldr	r0, [pc, #156]	@ (8008a20 <_printf_i+0x238>)
 8008984:	e7e9      	b.n	800895a <_printf_i+0x172>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	f023 0320 	bic.w	r3, r3, #32
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	e7f6      	b.n	800897e <_printf_i+0x196>
 8008990:	4616      	mov	r6, r2
 8008992:	e7bd      	b.n	8008910 <_printf_i+0x128>
 8008994:	6833      	ldr	r3, [r6, #0]
 8008996:	6825      	ldr	r5, [r4, #0]
 8008998:	6961      	ldr	r1, [r4, #20]
 800899a:	1d18      	adds	r0, r3, #4
 800899c:	6030      	str	r0, [r6, #0]
 800899e:	062e      	lsls	r6, r5, #24
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	d501      	bpl.n	80089a8 <_printf_i+0x1c0>
 80089a4:	6019      	str	r1, [r3, #0]
 80089a6:	e002      	b.n	80089ae <_printf_i+0x1c6>
 80089a8:	0668      	lsls	r0, r5, #25
 80089aa:	d5fb      	bpl.n	80089a4 <_printf_i+0x1bc>
 80089ac:	8019      	strh	r1, [r3, #0]
 80089ae:	2300      	movs	r3, #0
 80089b0:	6123      	str	r3, [r4, #16]
 80089b2:	4616      	mov	r6, r2
 80089b4:	e7bc      	b.n	8008930 <_printf_i+0x148>
 80089b6:	6833      	ldr	r3, [r6, #0]
 80089b8:	1d1a      	adds	r2, r3, #4
 80089ba:	6032      	str	r2, [r6, #0]
 80089bc:	681e      	ldr	r6, [r3, #0]
 80089be:	6862      	ldr	r2, [r4, #4]
 80089c0:	2100      	movs	r1, #0
 80089c2:	4630      	mov	r0, r6
 80089c4:	f7f7 fc04 	bl	80001d0 <memchr>
 80089c8:	b108      	cbz	r0, 80089ce <_printf_i+0x1e6>
 80089ca:	1b80      	subs	r0, r0, r6
 80089cc:	6060      	str	r0, [r4, #4]
 80089ce:	6863      	ldr	r3, [r4, #4]
 80089d0:	6123      	str	r3, [r4, #16]
 80089d2:	2300      	movs	r3, #0
 80089d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089d8:	e7aa      	b.n	8008930 <_printf_i+0x148>
 80089da:	6923      	ldr	r3, [r4, #16]
 80089dc:	4632      	mov	r2, r6
 80089de:	4649      	mov	r1, r9
 80089e0:	4640      	mov	r0, r8
 80089e2:	47d0      	blx	sl
 80089e4:	3001      	adds	r0, #1
 80089e6:	d0ad      	beq.n	8008944 <_printf_i+0x15c>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	079b      	lsls	r3, r3, #30
 80089ec:	d413      	bmi.n	8008a16 <_printf_i+0x22e>
 80089ee:	68e0      	ldr	r0, [r4, #12]
 80089f0:	9b03      	ldr	r3, [sp, #12]
 80089f2:	4298      	cmp	r0, r3
 80089f4:	bfb8      	it	lt
 80089f6:	4618      	movlt	r0, r3
 80089f8:	e7a6      	b.n	8008948 <_printf_i+0x160>
 80089fa:	2301      	movs	r3, #1
 80089fc:	4632      	mov	r2, r6
 80089fe:	4649      	mov	r1, r9
 8008a00:	4640      	mov	r0, r8
 8008a02:	47d0      	blx	sl
 8008a04:	3001      	adds	r0, #1
 8008a06:	d09d      	beq.n	8008944 <_printf_i+0x15c>
 8008a08:	3501      	adds	r5, #1
 8008a0a:	68e3      	ldr	r3, [r4, #12]
 8008a0c:	9903      	ldr	r1, [sp, #12]
 8008a0e:	1a5b      	subs	r3, r3, r1
 8008a10:	42ab      	cmp	r3, r5
 8008a12:	dcf2      	bgt.n	80089fa <_printf_i+0x212>
 8008a14:	e7eb      	b.n	80089ee <_printf_i+0x206>
 8008a16:	2500      	movs	r5, #0
 8008a18:	f104 0619 	add.w	r6, r4, #25
 8008a1c:	e7f5      	b.n	8008a0a <_printf_i+0x222>
 8008a1e:	bf00      	nop
 8008a20:	0800947d 	.word	0x0800947d
 8008a24:	0800948e 	.word	0x0800948e

08008a28 <__sflush_r>:
 8008a28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a30:	0716      	lsls	r6, r2, #28
 8008a32:	4605      	mov	r5, r0
 8008a34:	460c      	mov	r4, r1
 8008a36:	d454      	bmi.n	8008ae2 <__sflush_r+0xba>
 8008a38:	684b      	ldr	r3, [r1, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dc02      	bgt.n	8008a44 <__sflush_r+0x1c>
 8008a3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dd48      	ble.n	8008ad6 <__sflush_r+0xae>
 8008a44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a46:	2e00      	cmp	r6, #0
 8008a48:	d045      	beq.n	8008ad6 <__sflush_r+0xae>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a50:	682f      	ldr	r7, [r5, #0]
 8008a52:	6a21      	ldr	r1, [r4, #32]
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	d030      	beq.n	8008aba <__sflush_r+0x92>
 8008a58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	0759      	lsls	r1, r3, #29
 8008a5e:	d505      	bpl.n	8008a6c <__sflush_r+0x44>
 8008a60:	6863      	ldr	r3, [r4, #4]
 8008a62:	1ad2      	subs	r2, r2, r3
 8008a64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a66:	b10b      	cbz	r3, 8008a6c <__sflush_r+0x44>
 8008a68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a6a:	1ad2      	subs	r2, r2, r3
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a70:	6a21      	ldr	r1, [r4, #32]
 8008a72:	4628      	mov	r0, r5
 8008a74:	47b0      	blx	r6
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	d106      	bne.n	8008a8a <__sflush_r+0x62>
 8008a7c:	6829      	ldr	r1, [r5, #0]
 8008a7e:	291d      	cmp	r1, #29
 8008a80:	d82b      	bhi.n	8008ada <__sflush_r+0xb2>
 8008a82:	4a2a      	ldr	r2, [pc, #168]	@ (8008b2c <__sflush_r+0x104>)
 8008a84:	410a      	asrs	r2, r1
 8008a86:	07d6      	lsls	r6, r2, #31
 8008a88:	d427      	bmi.n	8008ada <__sflush_r+0xb2>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	6062      	str	r2, [r4, #4]
 8008a8e:	04d9      	lsls	r1, r3, #19
 8008a90:	6922      	ldr	r2, [r4, #16]
 8008a92:	6022      	str	r2, [r4, #0]
 8008a94:	d504      	bpl.n	8008aa0 <__sflush_r+0x78>
 8008a96:	1c42      	adds	r2, r0, #1
 8008a98:	d101      	bne.n	8008a9e <__sflush_r+0x76>
 8008a9a:	682b      	ldr	r3, [r5, #0]
 8008a9c:	b903      	cbnz	r3, 8008aa0 <__sflush_r+0x78>
 8008a9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aa2:	602f      	str	r7, [r5, #0]
 8008aa4:	b1b9      	cbz	r1, 8008ad6 <__sflush_r+0xae>
 8008aa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008aaa:	4299      	cmp	r1, r3
 8008aac:	d002      	beq.n	8008ab4 <__sflush_r+0x8c>
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f7ff fa9a 	bl	8007fe8 <_free_r>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ab8:	e00d      	b.n	8008ad6 <__sflush_r+0xae>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b0      	blx	r6
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	1c50      	adds	r0, r2, #1
 8008ac4:	d1c9      	bne.n	8008a5a <__sflush_r+0x32>
 8008ac6:	682b      	ldr	r3, [r5, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0c6      	beq.n	8008a5a <__sflush_r+0x32>
 8008acc:	2b1d      	cmp	r3, #29
 8008ace:	d001      	beq.n	8008ad4 <__sflush_r+0xac>
 8008ad0:	2b16      	cmp	r3, #22
 8008ad2:	d11e      	bne.n	8008b12 <__sflush_r+0xea>
 8008ad4:	602f      	str	r7, [r5, #0]
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	e022      	b.n	8008b20 <__sflush_r+0xf8>
 8008ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ade:	b21b      	sxth	r3, r3
 8008ae0:	e01b      	b.n	8008b1a <__sflush_r+0xf2>
 8008ae2:	690f      	ldr	r7, [r1, #16]
 8008ae4:	2f00      	cmp	r7, #0
 8008ae6:	d0f6      	beq.n	8008ad6 <__sflush_r+0xae>
 8008ae8:	0793      	lsls	r3, r2, #30
 8008aea:	680e      	ldr	r6, [r1, #0]
 8008aec:	bf08      	it	eq
 8008aee:	694b      	ldreq	r3, [r1, #20]
 8008af0:	600f      	str	r7, [r1, #0]
 8008af2:	bf18      	it	ne
 8008af4:	2300      	movne	r3, #0
 8008af6:	eba6 0807 	sub.w	r8, r6, r7
 8008afa:	608b      	str	r3, [r1, #8]
 8008afc:	f1b8 0f00 	cmp.w	r8, #0
 8008b00:	dde9      	ble.n	8008ad6 <__sflush_r+0xae>
 8008b02:	6a21      	ldr	r1, [r4, #32]
 8008b04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b06:	4643      	mov	r3, r8
 8008b08:	463a      	mov	r2, r7
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b0      	blx	r6
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	dc08      	bgt.n	8008b24 <__sflush_r+0xfc>
 8008b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b24:	4407      	add	r7, r0
 8008b26:	eba8 0800 	sub.w	r8, r8, r0
 8008b2a:	e7e7      	b.n	8008afc <__sflush_r+0xd4>
 8008b2c:	dfbffffe 	.word	0xdfbffffe

08008b30 <_fflush_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	690b      	ldr	r3, [r1, #16]
 8008b34:	4605      	mov	r5, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	b913      	cbnz	r3, 8008b40 <_fflush_r+0x10>
 8008b3a:	2500      	movs	r5, #0
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	b118      	cbz	r0, 8008b4a <_fflush_r+0x1a>
 8008b42:	6a03      	ldr	r3, [r0, #32]
 8008b44:	b90b      	cbnz	r3, 8008b4a <_fflush_r+0x1a>
 8008b46:	f7ff f825 	bl	8007b94 <__sinit>
 8008b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0f3      	beq.n	8008b3a <_fflush_r+0xa>
 8008b52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b54:	07d0      	lsls	r0, r2, #31
 8008b56:	d404      	bmi.n	8008b62 <_fflush_r+0x32>
 8008b58:	0599      	lsls	r1, r3, #22
 8008b5a:	d402      	bmi.n	8008b62 <_fflush_r+0x32>
 8008b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b5e:	f7ff fa32 	bl	8007fc6 <__retarget_lock_acquire_recursive>
 8008b62:	4628      	mov	r0, r5
 8008b64:	4621      	mov	r1, r4
 8008b66:	f7ff ff5f 	bl	8008a28 <__sflush_r>
 8008b6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b6c:	07da      	lsls	r2, r3, #31
 8008b6e:	4605      	mov	r5, r0
 8008b70:	d4e4      	bmi.n	8008b3c <_fflush_r+0xc>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	059b      	lsls	r3, r3, #22
 8008b76:	d4e1      	bmi.n	8008b3c <_fflush_r+0xc>
 8008b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b7a:	f7ff fa25 	bl	8007fc8 <__retarget_lock_release_recursive>
 8008b7e:	e7dd      	b.n	8008b3c <_fflush_r+0xc>

08008b80 <__swhatbuf_r>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	460c      	mov	r4, r1
 8008b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	b096      	sub	sp, #88	@ 0x58
 8008b8c:	4615      	mov	r5, r2
 8008b8e:	461e      	mov	r6, r3
 8008b90:	da0d      	bge.n	8008bae <__swhatbuf_r+0x2e>
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b98:	f04f 0100 	mov.w	r1, #0
 8008b9c:	bf14      	ite	ne
 8008b9e:	2340      	movne	r3, #64	@ 0x40
 8008ba0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	6031      	str	r1, [r6, #0]
 8008ba8:	602b      	str	r3, [r5, #0]
 8008baa:	b016      	add	sp, #88	@ 0x58
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	466a      	mov	r2, sp
 8008bb0:	f000 f896 	bl	8008ce0 <_fstat_r>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	dbec      	blt.n	8008b92 <__swhatbuf_r+0x12>
 8008bb8:	9901      	ldr	r1, [sp, #4]
 8008bba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bc2:	4259      	negs	r1, r3
 8008bc4:	4159      	adcs	r1, r3
 8008bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bca:	e7eb      	b.n	8008ba4 <__swhatbuf_r+0x24>

08008bcc <__smakebuf_r>:
 8008bcc:	898b      	ldrh	r3, [r1, #12]
 8008bce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bd0:	079d      	lsls	r5, r3, #30
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	d507      	bpl.n	8008be8 <__smakebuf_r+0x1c>
 8008bd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	2301      	movs	r3, #1
 8008be2:	6163      	str	r3, [r4, #20]
 8008be4:	b003      	add	sp, #12
 8008be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be8:	ab01      	add	r3, sp, #4
 8008bea:	466a      	mov	r2, sp
 8008bec:	f7ff ffc8 	bl	8008b80 <__swhatbuf_r>
 8008bf0:	9f00      	ldr	r7, [sp, #0]
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7ff fa62 	bl	80080c0 <_malloc_r>
 8008bfc:	b948      	cbnz	r0, 8008c12 <__smakebuf_r+0x46>
 8008bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c02:	059a      	lsls	r2, r3, #22
 8008c04:	d4ee      	bmi.n	8008be4 <__smakebuf_r+0x18>
 8008c06:	f023 0303 	bic.w	r3, r3, #3
 8008c0a:	f043 0302 	orr.w	r3, r3, #2
 8008c0e:	81a3      	strh	r3, [r4, #12]
 8008c10:	e7e2      	b.n	8008bd8 <__smakebuf_r+0xc>
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	6020      	str	r0, [r4, #0]
 8008c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	9b01      	ldr	r3, [sp, #4]
 8008c1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c22:	b15b      	cbz	r3, 8008c3c <__smakebuf_r+0x70>
 8008c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f000 f86b 	bl	8008d04 <_isatty_r>
 8008c2e:	b128      	cbz	r0, 8008c3c <__smakebuf_r+0x70>
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	f023 0303 	bic.w	r3, r3, #3
 8008c36:	f043 0301 	orr.w	r3, r3, #1
 8008c3a:	81a3      	strh	r3, [r4, #12]
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	431d      	orrs	r5, r3
 8008c40:	81a5      	strh	r5, [r4, #12]
 8008c42:	e7cf      	b.n	8008be4 <__smakebuf_r+0x18>

08008c44 <_putc_r>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	460d      	mov	r5, r1
 8008c48:	4614      	mov	r4, r2
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	b118      	cbz	r0, 8008c56 <_putc_r+0x12>
 8008c4e:	6a03      	ldr	r3, [r0, #32]
 8008c50:	b90b      	cbnz	r3, 8008c56 <_putc_r+0x12>
 8008c52:	f7fe ff9f 	bl	8007b94 <__sinit>
 8008c56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c58:	07d8      	lsls	r0, r3, #31
 8008c5a:	d405      	bmi.n	8008c68 <_putc_r+0x24>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	0599      	lsls	r1, r3, #22
 8008c60:	d402      	bmi.n	8008c68 <_putc_r+0x24>
 8008c62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c64:	f7ff f9af 	bl	8007fc6 <__retarget_lock_acquire_recursive>
 8008c68:	68a3      	ldr	r3, [r4, #8]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	60a3      	str	r3, [r4, #8]
 8008c70:	da05      	bge.n	8008c7e <_putc_r+0x3a>
 8008c72:	69a2      	ldr	r2, [r4, #24]
 8008c74:	4293      	cmp	r3, r2
 8008c76:	db12      	blt.n	8008c9e <_putc_r+0x5a>
 8008c78:	b2eb      	uxtb	r3, r5
 8008c7a:	2b0a      	cmp	r3, #10
 8008c7c:	d00f      	beq.n	8008c9e <_putc_r+0x5a>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	6022      	str	r2, [r4, #0]
 8008c84:	701d      	strb	r5, [r3, #0]
 8008c86:	b2ed      	uxtb	r5, r5
 8008c88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c8a:	07da      	lsls	r2, r3, #31
 8008c8c:	d405      	bmi.n	8008c9a <_putc_r+0x56>
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	059b      	lsls	r3, r3, #22
 8008c92:	d402      	bmi.n	8008c9a <_putc_r+0x56>
 8008c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c96:	f7ff f997 	bl	8007fc8 <__retarget_lock_release_recursive>
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	bd70      	pop	{r4, r5, r6, pc}
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	4622      	mov	r2, r4
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f7ff f887 	bl	8007db6 <__swbuf_r>
 8008ca8:	4605      	mov	r5, r0
 8008caa:	e7ed      	b.n	8008c88 <_putc_r+0x44>

08008cac <memmove>:
 8008cac:	4288      	cmp	r0, r1
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	eb01 0402 	add.w	r4, r1, r2
 8008cb4:	d902      	bls.n	8008cbc <memmove+0x10>
 8008cb6:	4284      	cmp	r4, r0
 8008cb8:	4623      	mov	r3, r4
 8008cba:	d807      	bhi.n	8008ccc <memmove+0x20>
 8008cbc:	1e43      	subs	r3, r0, #1
 8008cbe:	42a1      	cmp	r1, r4
 8008cc0:	d008      	beq.n	8008cd4 <memmove+0x28>
 8008cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cca:	e7f8      	b.n	8008cbe <memmove+0x12>
 8008ccc:	4402      	add	r2, r0
 8008cce:	4601      	mov	r1, r0
 8008cd0:	428a      	cmp	r2, r1
 8008cd2:	d100      	bne.n	8008cd6 <memmove+0x2a>
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cde:	e7f7      	b.n	8008cd0 <memmove+0x24>

08008ce0 <_fstat_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d07      	ldr	r5, [pc, #28]	@ (8008d00 <_fstat_r+0x20>)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	4608      	mov	r0, r1
 8008cea:	4611      	mov	r1, r2
 8008cec:	602b      	str	r3, [r5, #0]
 8008cee:	f7f8 fc8a 	bl	8001606 <_fstat>
 8008cf2:	1c43      	adds	r3, r0, #1
 8008cf4:	d102      	bne.n	8008cfc <_fstat_r+0x1c>
 8008cf6:	682b      	ldr	r3, [r5, #0]
 8008cf8:	b103      	cbz	r3, 8008cfc <_fstat_r+0x1c>
 8008cfa:	6023      	str	r3, [r4, #0]
 8008cfc:	bd38      	pop	{r3, r4, r5, pc}
 8008cfe:	bf00      	nop
 8008d00:	200032b4 	.word	0x200032b4

08008d04 <_isatty_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d06      	ldr	r5, [pc, #24]	@ (8008d20 <_isatty_r+0x1c>)
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	602b      	str	r3, [r5, #0]
 8008d10:	f7f8 fc89 	bl	8001626 <_isatty>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d102      	bne.n	8008d1e <_isatty_r+0x1a>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b103      	cbz	r3, 8008d1e <_isatty_r+0x1a>
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	200032b4 	.word	0x200032b4

08008d24 <_sbrk_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d06      	ldr	r5, [pc, #24]	@ (8008d40 <_sbrk_r+0x1c>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f000 f83e 	bl	8008db0 <_sbrk>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_sbrk_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_sbrk_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	200032b4 	.word	0x200032b4

08008d44 <_realloc_r>:
 8008d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d48:	4680      	mov	r8, r0
 8008d4a:	4615      	mov	r5, r2
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	b921      	cbnz	r1, 8008d5a <_realloc_r+0x16>
 8008d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d54:	4611      	mov	r1, r2
 8008d56:	f7ff b9b3 	b.w	80080c0 <_malloc_r>
 8008d5a:	b92a      	cbnz	r2, 8008d68 <_realloc_r+0x24>
 8008d5c:	f7ff f944 	bl	8007fe8 <_free_r>
 8008d60:	2400      	movs	r4, #0
 8008d62:	4620      	mov	r0, r4
 8008d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d68:	f000 f81a 	bl	8008da0 <_malloc_usable_size_r>
 8008d6c:	4285      	cmp	r5, r0
 8008d6e:	4606      	mov	r6, r0
 8008d70:	d802      	bhi.n	8008d78 <_realloc_r+0x34>
 8008d72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d76:	d8f4      	bhi.n	8008d62 <_realloc_r+0x1e>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	f7ff f9a0 	bl	80080c0 <_malloc_r>
 8008d80:	4607      	mov	r7, r0
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d0ec      	beq.n	8008d60 <_realloc_r+0x1c>
 8008d86:	42b5      	cmp	r5, r6
 8008d88:	462a      	mov	r2, r5
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	bf28      	it	cs
 8008d8e:	4632      	movcs	r2, r6
 8008d90:	f7ff f91b 	bl	8007fca <memcpy>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4640      	mov	r0, r8
 8008d98:	f7ff f926 	bl	8007fe8 <_free_r>
 8008d9c:	463c      	mov	r4, r7
 8008d9e:	e7e0      	b.n	8008d62 <_realloc_r+0x1e>

08008da0 <_malloc_usable_size_r>:
 8008da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008da4:	1f18      	subs	r0, r3, #4
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	bfbc      	itt	lt
 8008daa:	580b      	ldrlt	r3, [r1, r0]
 8008dac:	18c0      	addlt	r0, r0, r3
 8008dae:	4770      	bx	lr

08008db0 <_sbrk>:
 8008db0:	4a04      	ldr	r2, [pc, #16]	@ (8008dc4 <_sbrk+0x14>)
 8008db2:	6811      	ldr	r1, [r2, #0]
 8008db4:	4603      	mov	r3, r0
 8008db6:	b909      	cbnz	r1, 8008dbc <_sbrk+0xc>
 8008db8:	4903      	ldr	r1, [pc, #12]	@ (8008dc8 <_sbrk+0x18>)
 8008dba:	6011      	str	r1, [r2, #0]
 8008dbc:	6810      	ldr	r0, [r2, #0]
 8008dbe:	4403      	add	r3, r0
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	4770      	bx	lr
 8008dc4:	200032c4 	.word	0x200032c4
 8008dc8:	200032c8 	.word	0x200032c8

08008dcc <_init>:
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	bf00      	nop
 8008dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd2:	bc08      	pop	{r3}
 8008dd4:	469e      	mov	lr, r3
 8008dd6:	4770      	bx	lr

08008dd8 <_fini>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	bf00      	nop
 8008ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dde:	bc08      	pop	{r3}
 8008de0:	469e      	mov	lr, r3
 8008de2:	4770      	bx	lr
